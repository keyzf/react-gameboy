(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define(factory);
	else if(typeof exports === 'object')
		exports["Gameboy"] = factory();
	else
		root["Gameboy"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	//var React = require('react');
	var gameboy = __webpack_require__(3);
	var romData = __webpack_require__(2).rom;
	
	var Gameboy = React.createClass({displayName: 'Gameboy',
	  render: function () {
	    return (
	      React.createElement("canvas", {ref: "gameboy"})
	    );
	  },
	  componentDidMount: function() {
	    var canvasEl = this.refs.gameboy.getDOMNode();
	    console.log('hey');
	    window.gb = gameboy(canvasEl, romData, {gbBootRom:true});
	    gb.on('all', function() { console.log(arguments) });
	    console.log(gb);
	  }
	});
	
	module.exports = Gameboy;


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {"rom":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0012\u0013\r ��\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u000b\u0002\u0000\u0000\u0000\u0000\u0000�q\u0002\u0000\u0000\u0000\u0000\u0000Ã\u0002\u0000\u0000\u0000\u0000\u0000á\u0002\u0000\u0000\u0000\u0000\u0000��\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�P\u0001��ff�\r\u0000\u000b\u0003s\u0000�\u0000\f\u0000\r\u0000\b\u0011\u001f��\u0000\u000e��n���ٙ��gcn\u000e���ܙ���3>AFTER BURST\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000�\u0000�#�!\u0010'}�#�|�$ɯ�\f��.��/��0��1���u\u0001�'\u0004�\r͋\u0001͟\u0001ͩ\u0001Ϳ\u0001�L\r��\u0003��\u0003�!\r\u0003\u0011��\u000e\t�!\u0005��!\u0003��(��!\u0016\u0003\u0011��\u000e\u000b��>\u0001�*���\u000f�A�1�>\u0003����\u0003��!���!\u0003!���!\u0003�������>\u0001���>\u0010�\u0001������\u0010��>�����\u0002\u0001�\u0003!���f \r\u000by� ������!\u0004�>\u0001����!\u0004���������\u00070\u0007�0��Ā�!\u000f�ˆ!*�5 >����,�!����\u0002�0��(\u0007�+��Ā�>\u0004�*�!)�4!��\u0011��\u000e\bϯ�+��.�� \u000f��\u0002>��\u0002\u0018\u0006!����\u0002��������,�G�A�\u0003 �x�B��������1�� \u000f>\u0001�1��E\u000e�d\u000e��1��������!��~�\u0001��w�W )�w \t���\u0001���\u0018\u0007���\u0001����F \u0014~�@w�w���(\u0003�����\u000e�����\u0011�\u0000\u001bz� ��������������*�@#��B*�C*�G*�H*�I*�J*�K�C\u0000\u0000lll\u0000\u0007�����F>(= �ɯ\"\"\"�MD*�('~_\u0016\u0000<�\u001f\"#\u0019~i`5��O~� (\u0011�##~_\u0016\u0000<�\u001f\"\u0019q�4��7�> �\u0000�\u0000�\u0000/�\u000f�7_>\u0010�\u0000�\u0000�\u0000�\u0000�\u0000�\u0000�\u0000/�\u000f����_��������{���>0�\u0000�(��\u0004�����\u000f�\u000f�>\u000e̓\u000eͤ\u0003�[\u0001!)�~v�(��O��\u000f��������O������!�����!��ˆ�!�����!��ˎ����g.\u0000\u000e��\"\r ��\u0004���\u0004���_���W\u000e\u0004�!\u0004�4�!���~ \r��\u000f>\u0001�*���~�@�!���D��8��˾~�@��>����ɯ�l��m��2��8\u0004�;\f�!B\u0004\u00113�\u000e9�ɜ��c����^#\u001e\u0010�@a@~\u001e�kz2t\u0002�j'��5\b�_\u0005��\u001b�\u001c�\u001e�.\u001b���k���69\u001dC\u0000\u001f!j�͚\u0004͚\u0004\u0016\u0000!k�^!3�\u0019~!j�^!3�\u0019�w�4~�7 \u0002�w#�|�\u0003g�\u0000\u0002\u0003\u0005\u0006\b\t\u000b\r\u000e\u0010\u0011\u0013\u0014\u0016\u0018\u0019\u001b\u001c\u001e\u001f!\"$&')*,-/023578:;=>@ACDFGIJLMOPRSUVXY[\\^_abcefhiklmoprsuvwyz{}~�����������������������������������������������������������������������������������������������������������������������������������������������������������������ͤ\u0004M|�\u0002(\u00110\u001b� \u0005y��\u0005�>����\u0005�y��\u0005��o>\u0000�g�>����\u0005��o>\u0000�g���0\u000b_\u0016\u0000!�\u0004\u0019n&\u0000�!\u0000\u0001�$͟\u0005ɯ\u0016\b�\u001b0\u0001�\u001f\u0015 ��\u001bKG�!\u0000\u0000>\u0010�\u001a�\u001b0\u0001\t�\u001c�\u001d= ��\u001a�\u001bBKT]ɯ�_\u0006\u0000\u0016\b�\u0011�\u0010x�0\u0001G\u0015 ��\u0011Xɯ�_>\u0000�W!\u0000\u0000>\u0010�\u0011�\u0010�\u0015�\u0014�\u0019�0\u0001\u0019= ��\u0011�\u0010]T����u\u0006�\u001a\u0013G<(\u0006�j\r#\u0018��n�W�o�_�p��͑\u000f�\u0016\u0000�o������\u0012��\u0012_\u0001\u0000�!���p�� \t�^(\u0015\u0001\u0000�\u0018\u0010�\u0002 \u0005\u0001\u0005�\u0018\u0007�v(\u0003\u0001\u0000��n�o&\u0000\u0019\t�\u000e\u0000*<(\u0003\f\u0018���p�y�n�{�o�ɯ�p��n��o��*�u�*�v�#*�w�#�\u000f\u0007�u\u0006�u�O��!y��&\u00030\u0005�$\u0007\u0018��G�j\r#�\r �!o�4!v�5 �ɯ�q��r�}�s�|�t�!y��!\u0003> �y���z��{�!s�*fo\u0011|�\u0001\u0004\u0000�w��(\u0003�\u0018\u0003�o\b}�s�|�t��_*fo�u\u0007ͅ\u0007͕\u0007��\u0016\b�͠\u0007��\u0007�s��\u0007��\u0007!y���k�{�\u0018(\u0005}��g�&\u0000�\u0016\u0000|��\u0014�|�{�\u0018�\u0016���zȯ�o>\u0000�g��!���\"\"]T!y�\u000e\u0005���{�\u0007(�O/<�\u0007o&\u0000\u0011��\u0019\u0011y����{�\u0007O!y�~�0\"\r �6��{�\u0007=�O!y�~�0�> \"\r ��{�\u0018��\u0010(\u00158\n�z \t>!�y��z<�>\"�y����\u0007z��>#�y��\u0001���?\b�y�\u0001\u0018��?\b�z�\u0001���?\b�{�\u0001���?\b�|�}�}�ɯ<]T\t8�kb=����\u0010\u0004��N#F#�\\\b��\u0003ɯ�q��r��8�\u0019�8�\u0019�8�\u0019�*O\u0006\b�\u00110\u0003*\u0018\u0003�q�\u0012�r��q�\u001a�r�\u0013\u0005 ��\u000by� ���\fȧ̤\u0003�\u0006\t��0���\u0003�\fȧ�U\u0003�2��(H�(��\u0004���(\u0003����\b(7>\u0004ͤ\u000e�H&ͤ\u0003�U\u0003�(��\u0004(\u0010����\u0003�\u0003 \u0007>\u0001���\u0018\u0007����\b(�>\u0004ͤ\u000e�X&�\n&�Y\f>\u0001�+��0�����\u0007��*�G�*��(���͔\b�+}� ���S\t����x(�7���S\t����� \u0019+|�x ����S\t����� \u0007+|�x ��7��͔\b�G��\u0011��\u000e\u0010�����\u00018k e�I\n� \u0005�V\n\u0018�G�\u001f����p�Ċ\t��hĞ\t\u0018I�I\n�\u0000��I\n�\u0001���I\n�����I\n�\n��I\n�\u000b���͊\t͗\t͞\t\u0018\u001c�͊\t͗\t\u0018\u0013�͗\t\u0018\r�͗\t͞\t\u0018\u0004=����\n�o�\u000b�g\u0011�\t��!\u0004�*O*G##*_~W���\u001f0\u0018!��y�O!l�x�G!��{�_!m�z�Wy�\bOx�\u0000G<� )x==�(\"{�\u0010_z�\u0000W<� \u0015z==�(\u000e�\u0000�o�\u0001�g���͘\u000b�!��\u000e\u0010��!��*_:W\u001a\u0013s#rɇ_\u0016\u0000!b\n\u0019*fo��\n�\n�\n�\n�\n�\n�\n\u0015\u000b'\u000b.\u000bS\u000b[\u000bc\u000bk\u000bs\u000b|\u000b�\u000b�\u000b�\u000b�\t�\t�\t�\t�I\n��I\ng�o�͐\n]T�L\u000b��I\n!��G/��w��I\n!��/�w��I\n!�Ǯw��I\n��I\n_��W!\b�*fo\u0019}\\!\b�\"s�_��W!\u0004�*fo\u0019}\\!\u0004�\"s�͐\n�͐\n]T�s#r�͐\n�͐\n�͐\n]T��q#p#s#r��I\n��I\n��I\n_�g�os��I\nͤ\u000e��I\n����͐\n�͐\n��I\n���͐\n�͐\n��!��{\"r��5\u000b��L\u000b��5\u000b��L\u000b��5\u000b��L\u000b��5\u000b��L\u000b��C\u000b~��L\u000b��C\u000b~��L\u000b��C\u000b5�L\u000b�͐\n�͐\n��\f��q�*�r�y�s�x�t��\u0004��(��r���:\f�q�O�q(\u0011����W>\b(\u0002>\u0010�/<#\u0018\u0001*O��G{��u�z�(\u0005###\u0018P�q�O�i(\u0007���\b#\u0018\u0001*O��G�s���v��t��(\u0004##\u0018+*�w��q��#�x��u���0\u0018�v���0\u0011��!u���\u0003���\u0004��((\n�r�=�r�´\u000b�>����������>���������ǯ��������}\f͞\f8\n͎\f8�Ϳ\f\u0018�!��\u0011��*\u0012O\u0013~\u0012gi�\"\"�>�������>��������!��4 \u0002#4!��*fo#�!��*fo]T*fo�(\u0011Nkb\u0011���}���|��Ƿ�7�!��*fo]T!��*foN!���{���z��Ƿ�!��\u00012\u0000��\u0002\u000e�]T!��*O*G�*O*G�N�!��s#r�#\"\"\"\u001aO!��*V_!���kb}���|��ǯ\"\"!���q+�p+q+�p+q�}���|���>\u0001�����\u0010\u0004\u0001�\u0007!\u0000�\u0011\u0001�6\u0000�\r\u000e��\u0010\u0004!\u0000�\u0011\u0001�\u0001�\u001f�F\r!\u0000�\u0011\u0001�\u0001�\u0000\u000e�6\u0000����@\u00070\u0006�A�\u0002(��A�\u0002 �p���U\u0003ͬ\r>\u0002�\u0016\u000e�H~�'\u000e�(��\u0002 \u0007��)(�\u0018\u0004�\u0001 \u0005ͣ,\u0018��\u00185\u0018�!%�\u0001�\u0016�\u0001\u000e>��M����>\u0001�+��%�>\u0003�\u0016\u000e!�p\u0011\u0005�\u0001�\u0004�\r\u000e�'\u000e>\u0003�\u0016\u000e!/u\u0011\u0005�\u0001�\u0001�\r\u000e�'\u000e>\u0003�\u0016\u000e�>@�'\u000e��\u0002>\bͭ\u0003ɯ�_s#\u000bx� ���*\u0012\u0013\u000bx� ���G�%��&�x�%��\u0000!����&��%��\u0000!��!O�~!޶!�޶!�޶\u0007���%��\r�>\u0003�%��\u0000!�̀A��\r��%��\u0000!����%��\u000e�>\u0003�%��\u0000!�ͲA��\u000e��%��\u0000!���G�%��\u000f�>\u0003�%��\u0000!x�͈@��\u000f��%��\u0000!����\u000e��\u0010��G�%��\u0011�>\u0003�%��\u0000!x���@��\u0011��%��\u0000!��G�\u0010��\nx��\u0012(\u0012�\u0004(\u000e�\u0005(\n�\u0010(\u0006�\u0011(\u0002��>��x��G����\u0002����\u0001O�\u0002x�\u0001y���\u0002�ɇ_\u0016\u0000\u0019*fo�����\u001b\u000f�U\u000f��d \u0004>\u0001\u0018\u0006�e \u0002>\u0007�>\u0003�\u0016\u000e�=!�v�\b\u000f\u0011��*\u0012\u0013*\u0012\u0013*\u0012\u0013*fo*\u0012\u0013*\u0012\u0013~\u0012�'\u000e!���*���*���*���*���~���ɧ \u0019\u0001\u0005�{Z��o&\u0000))\t{��\u000f\u000f\u000f_\u0016\u0000\u0019~�Ͳ\u000f�A�\u0003 �~ɧ��͡\u000f�\u001aG<�p#\u0013\u0018�k&\u0000)))))Z\u0016\u0000\u0019\u0001\u0005�\tɧ \u0005\u0001\u0000�\u0018\u0003\u0001\u0000�{Z��o&\u0000))\t{��\u000f\u000f\u000f_\u0016\u0000\u0019�\u0011\u0000�}�o|�g}�\u001fG\u0007\u0007\u0007W}��o>\u0005�\f�\u001d= �}M\u0007\u0007\u0007_���/<�|��}��\u000e\u0004�\u0015\u0010�\u000e\u0003�\u0015\u0010�\u000e\u0002�\u0015\u0010����\u001f\u0010\r ���\u001aG~�\"\u0013�\u000e\u0004�8\u0010�\u000e\u0003�8\u0010�\u000e\u0002�8\u0010����B\u0010\r ���\u001aG~�\"\u0013�!\u0014�*FO!\u0018�*V_��\u0005!\u001c�y\"p!\u001e�{\"r!\u0012�*FO!\u0016�*V_��\u0005!\u001a�{\"r!\u0014�*FO!\u0016�*V_ͺ\u00100\u000f!\u001e�*fo#}�\u001e�|�\u001f�!\u0012�*FO!\u0018�*V_ͺ\u00100\u000f!\u001e�*fo#}�\u001e�|�\u001f����\u0005! �y\"p!\"�{\"r!\u001a�\u0011 ��\u0003\u0010ɯ\u0018\u0002>\u0001�j\u000f��\u000f��<�\u001d=�\u0018��:\r��\u0003�����\u0001(\u0003�d��������ʧ�����'�����)��d �����$�!q�}�%�|�&�~�(\u0015͘ �\u0012!(\rG!%�*fo�$��k\u0011!%�*fo####�!$�4~��\n ��T\u0011��ʧ���ʧ�ͷ �\u0012!�>\u0001�����,�x�+�}�-�|�.�~�\u0005\u0012 \u0006>\u0001����!-�*fo\u0011\u0003\u0000\u0019~�\u000fG(U�+�O�\u0003(\u0004�\u0007 !����\u000f�\u0001 \u0004\u000e\u0005\u0018\u0014�\u0005 \u0010!-�*fo~�\u001f \u0003y\u0018\u0006\u000e\u0001y�+��\u0001(\u000e�\u0005(\u001c� \u0019����W(\u0012�+�����,�����+��%\u0012x�\u0005 \n�\b'(\u0005�+�\u0018��+���%\u0012��\u0012�\u001b\u000f##�+��\u0001 \u0003�F��\u0003 \u0003�N��\u0005 \u0003�V��^�=!o\u0012�\b\u000f�!-�*V_\u001a\u0013�����!�\u001a��\u0007�\b�����!C�\u0013\u001a��\u0006�\u0004�����!�\u001a��\u0007�\b�����!B�\u0013\u001a��\u0005�\u0004��S\u0012S\u0012`\u00127\u00127\u00127\u0012D\u0012S\u0012�O(\u001b�͠\u001d��\u0007 \t!\u0004�5!\u0004�5�!\u0004�4!\u0004�4��\u0005��\u001d����\u0004��\u001d\u0011\u0000\u0000!��{\"r\u0011\u0004\u0000!��{\"r>\u0005à\u001d����(\u0011<����\u0010 \u0006����\u0018\u0003�W��Z\t�ff\u0000\u0000��\u0012͌\u0013��h\u0013�����\u0001(\u0004�d \t��ʧ(\u0003�O����������W�\u000e\u0013�!��\u0011�\u0012����\u000f(\u0010�\u00038\u0004�\b8\b�,\u0010�D\u0013\u0018\u0018�\t\u0010����\u00078\u000e>\u0007���\u0011\u0000\u0000!��{\"r����\u0007�/�������\u000f�\u0001 \u0004>\u0005\u0018\n�\u0002 \u0004>\u0004\u0018\u0002>\u0006͠\u001d�����\u0007(\u0003�e�����\u0001�!��*fo\u0011\u0002\u0000��\u000f0\u0002��>�������\u001f \u0005��ɧ�ͱ\u0013��\u0013��\u0013��\u0010��\u0013�L\u0014�n\u0014͞\u0017�!\u0002�\u0011������\u000f�\u00050\u0019\u0018\u0013!\u0006�\u0011������\u000f�\u00038\b�\b0\u0004�\t\u0010��,\u0010����������\u000f�O(\u0007�\u0004������\b���������\u0001��d��\u00078\u0006�\u0012��3����\u0007\u0007_\u0016\u0000!t�\u0019���w��ʧ����G��ʸ�!��\u0011��\u000e\b�!��*V_!��{\"r!��*V_!��{\"r������!|�2�}�3�z�1�{�0��\u0004����>��\u0005������ �������o \u0014�\u0004�!���#�4��\u0005Ȟ�5�\u0018\u0012���!\u0004Ȗ#�4������5��\b�!���#�6��\tȞ�7��2�!3Ȇ�@����� �8��1��9��5��(\u001a�!0Ȗ�9��8�� �8�!4ȯ�\">\u0000�w!��*fo�9ȇ��:�����o \r�9ȅO�:ȌG\u000b\u0018\u000e�9�O�:�G}�O|�G�2�/<_��W!��*fo\u0019]T�8ȷ>\u0003(\u0002>\u0002�E\u0016�O��G�8\u0006�4ȹ87��\u0002��\u0003��8ȷ \u0015�����\u0004������\u0005�>\f�/�\u0018\u0019�����\u0004������\u0005�>\u0014�/�\u0018\u0004��/��0�!1Ȇ�@��7�� \u000f>\u0001�8��3�_��W\u001b\u0018\u0017��8ȯ!6Ȗ\">\u0000�w�2�/<_��W����_����W����o�0�(\u0003�1�/<O��G�\u0004ȁO�\u0005ȈG�8��E\u0016�O��G�8\u0006�6ȹ8;��\u0006��\u0007��8ȷ(\u0018�����\b������\t��/��\u0001�/�\u0018\u0016�����\b������\t��/��\u0002�/���� \u0000��\u0001\u0000\u0001\u0000\u0001\u0000 \u0000 \u0000��(!�\u0002(\f8\u0011y�\u0007/�\bg{\u0018\u0016y�\u0007g{\u0018\u000f{�\u0007/�\bgy\u0018\u0005{�\u0007gy�\u0007o|�?��@�=�?�?�?g�@�=�\u0007��\b8\u0001$$|�@��Շ_\u0016\u0000!5\u0016\u0019*�;�~�<�!=\u0016\u0019*�=�~�>����\u00160\u0004\u000e\b\u00185��\u0016�@�G\u000e\u0010�\u0018\u00178%�;�_�<�W�\u0019�\u0018\u0017�\u001e\b0\u0005y�8\u0001K�=�_�>�W\u0019\u0005 �\u0018\u0002\u000e\u0000�?ȁ�\bɷ�\u0016\u0000\u0006\u0000{����\u0012��\u0012_�8�\u0019�8�\u0019�8�\u0019!\u0005�\t\u0019�~���J\u0017(\u0013�5\u0017(\u000e�j(\n�k(\u0006��0\u00027ɯ�W����\u0001z��\n��\u00100\u0004W�zɧ�_����\u0007(\u0004�e{�{��\u0011\u0005�}�o|�g\u0011\u0000�\u0019��\u000f�p\u0017��{�!N�*��(\u0011�(\t*� \u0006*� \u0003�###\u0018���ͱ\u0013��\u0017�ͱ\u0013��\u0013�͞\u0017�ɯ���>\u0001��\u0017(\u0005!����>\u0003��\u0017(\u0005!����>\u0007��\u0017(\u0005!����>\u0005��\u0017�!����ɯ�������\u000f�\u0003 \n�\u0006\u0018�!������\u0006\u0018�!������W�\u0004�G�\b�Oz�\u0019\u0018���\u0018��W�\u0004�G�\b�Oz�\u0019\u0018��D\u0019����1\u0018���?!)\u0018�\b\u000f��\u0018�\u0018�\u0018�\u0018����%(\r�2(\u0004�# \u0019�\u0011\"\u0018\u0003�\u001a\"|�C�}�D�z�E�{�F������o���(\u0002�7�B����W���7�C�z�\u000f�D��B�W���7�F�z�\u000f�E����\u0018͸\u0018\u001d��\u0018���\u0018\u0014͸\u0018��\u0018���\u0018��\u0018\u001c��\u0018���\u0018\u0015\u0015͸\u0018��\u0018��C�gy�_��D�gy�_��F�gx�W��E�gx�W��F�g�E�oz��=G\u000e\u0000��C�g�D�o{��=O\u0006\u0000��Gȯ�H��I��R\u0019�����\u0010���v\u0019(\u0005>\u0001�H��Iȧ \"�G��O>\b \n�8\u000fW�8�P\u0018\b�8\u0005_�8�Y>\u0001�I�\u0018��Hȧ��Gȯ�H��I��\u0006\u0019�z��0\u0002��>\u0001�Hȧɧ��\u00108\f�\u00188\b� 8\u0006��0\u0002�ɯɧ��\n8\u0010�\u00108\u0010�\u00188\b� 8\u0006��0\u0002�ɯ�����\u0001�>\u0001�.�!,�*V_�!�\u0019���\u0007_\u0016\u0000\u0019*V_!,�*fo\u00190\u0003!��}�,�|�-�MD!�����'�\u0000\u0000\u0000\u0000\n\u0000\n\u0000\n\u0000\n\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00002\u00002\u00002\u0000\u0014\u0000\u0014\u0000\u0014\u0000\u0014\u0000\n\u0000\n\u0000\n\u0000\u001e\u0000\u001e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001�\u0003�\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0000\u0014\u0000\u0002\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000d\u0000\u0002\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�{\u001a8\u0004�k\u001a�>������<�=_\u0016\u0000!\u0000�\u0019~�����͋\u001a!��*fo��\u000f�!�\u001aG*��(\u000b�(\u0004##\u0018�^#V�!\u0000\u0000�\u0002K\u0000\u0003<\u0000\u0004<\u0000\u0005-\u0000\u0006-\u0000\u0012K\u0000\u0013K\u0000\u0014-\u0000\u0015-\u0000\u001b4\u0000\u001c4\u0000\u001d4\u0000\u001e4\u0000 -\u0000\"-\u0000#-\u0000$K\u0000%-\u0000&\u001e\u0000(\u001e\u0000)\u001e\u0000'\u001e\u0000����G����$\u001b��k\u001a������G����$\u001b��k\u001a�����\u000f�\u0003���G��� \u0005�8\u0007\u0018\u0003�0\u0002��>������(��\u00038\u0006���\b\u0018\u0004���\u0004�0\u0007�\b�8\u0002��>�����ʧ����G���� \u001e!������\u0001 \u0003�F��\u0003 \u0003�N��\u0005 \u0003�V��^ɯ����!���\u0001 \u0003�F��\u0003 \u0003�N��\u0005 \u0003�V��^�!��*fo\u0011\u000f\u0000��\u000f��^#V\u0013r+s���ůͲ\u000f��Y�A�\u0003 �r#\u001d �\u0005��> �O\u0006\u0000\t�\u0018�*�L�*�M�*�N�*�O���\u001b�\u0010\u001c�!P��S\u0006��M�<�M��O�=�O� �~�����L�G�M�W�N�HZͼ\u0006��\u0011P�*�� \u0004<\u0012��\u0012\u0013\u0018���\u0006�(��\u0003!8)8\u0003!R)��\u0006>\u0002\u000e\u0000\u001e\u0000ͼ\u0006!8)��\u0006����G����\u000f�\u0007 \u0014������7Ox�==��8\u001b>\u0003\u0018\u0012�\u0003 \u0013����\u000f�<<��8\u0007>\u0007͠\u001d�ɯ����O����\u000f�,\u001d����y�\u0004˟͠\u001d��ͼ\u001c \u001e����,\u001d \u0016����\u000f����͠\u001d��\u0004˟����ɯ�����\u000f�\u0001 \f���G����\u000f�\u0018.�\u0003 \u000e������7G����\u0018\u001c�\u0005 \u000e������7G����\u0018\n����\u000fG�����\u0007�����\u000f�\u0001 \u0007��&8\u0006>\u0001�,\u001d����G�7��Ox�\u000f�\u0002˟������!���\u0001 \u0003�F��\u0003 \u0003�N��\u0005 \u0003�V��^�Ͷ&!�{�,\r����\u0007>\t(\u000b����e>\t(\u0002>\rͤ\u000e�Ͷ&!\u0014|�,\r�Ͷ&!+|�,\r�����\u0004�������\u0004����Z\t����\u0004�������\u0004����G����\u000f�7����x�!\u0000\u0000}���|���}���|����!\u0000\u0000}���|���}���|������\u001d͗\u001e���!\u0013\u001e�_\u0016\u0000\u0019\u0011\u0012�\u000e\u0004�!��}�\u0016�|�\u0017�!\u0000\u0000}�\u0018�|�\u0019��I\u0010!\u001a�*FO!\u001c�*V_�\u0000\u0000\u0000\u0000\tj\u0000\u0000\u0000\u0000\u0002\u0000\u0011s\u0002\u0000\u0012�\u0002\u0000�)\u0003\u0000�v\u0003\u0000ܽ\u0003\u0000\u0000\u0000\u0004\u0000\u001d>\u0004\u0000�x\u0004\u0000��\u0004\u0000\"�\u0004\u0000Y\u0019\u0005\u0000�J\u0005\u0000*z\u0005\u0000&�\u0005\u0000��\u0005\u0000\u0000\u0000\u0006\u0000\u0016*\u0006\u0000\u0015S\u0006\u0000\u0011{\u0006\u0000\u001c�\u0006\u0000E�\u0006\u0000��\u0006\u00001\u0012\u0007\u0000\n6\u0007\u00004Y\u0007\u0000�{\u0007\u0000��\u0007\u0000��\u0007\u0000��\u0007\u0000\u0000\u0000\b\u0000!��y\"p!��{\"r���\u001e \u0017��\u001e(\u0014�' ���\u001e \t�%\u001f(\u0006�' ɯ�>�����\u001e����G���O>\u0001�\u0019\u0018\u001c\u001c>\u0001��\u0018�����#��$�!������G(\u0014�F \u0010͇\u001f�\u0012!�����\u0001����!������O��N(\u0002��͎\u001f�\u0012!�����\u0010����!������G('�F #͇\u001f�\u0012! \u0012͕\u001f�\u0012!(\u0013����\u0001��ʯ�����\u0001����!������O��N(\u0002��͇\u001f�\u0012! \u0011͜\u001f�\u0012!�����\u0010��ʯ�����\u0010������\u001fͅ ���\u001fͅ ���\u001f�\u0011 ���\u001f�\u0011 �����g�����f�\u0018(����g�����f�\u0018\u001a����g�����f�\u0018\f����g�����f�>\u0001�l��n��o��m������e�����d�\u0018\f����e�����d�>\u0001�h��j��k��i������f�����g������!ͦ �!��5�>\u0001������ʧ(\u0002���A �\u0012!��H ͅ �����e�����d�\u0018\u001a����e�����d�\u0018\f�\b��e��\u0004��d�>\u0007�h�>\u0007�j�>\u0005�k�>\u0006�i������f�����g���!ͦ �*O*�g�~�f�y��!|�l�}�n�z�m�{�o������f�����g�>\u0003�l�>\u0003�n�>\n�m�>\n�o��*�l�*�n�*�o�~�m�����f�����g��#*�\u0004�g�~�\u0004�f�>\u0004�l��n��m�=�o�ɯ�p��q��&!��g!�ͮ!��!p��f�G�dȸ8\u001a�m�G�fȀG�k�O�dȑOx�8_�w\u0018]���o�G�fȐG�i�O�dȁ�8E�w\u0018C!q��g�G�eȸ8\u001c���n�G�gȀG�h�O�eȑOx�8\u001c�w\u0018\u001a�l�G�gȐG�j�O�eȁ�8\u0004�w\u0018\u0002��>����q��G�p���8\f�q�\u00078\u0003>\u0001�>\u0005��p�\u00078\u0003>\u0003�>\u0007������!gi�����!Q_�G�\u000fOx���7��#(\u001e�2(\u001a�%(\u001f�\u001b\u000f]T\u0013\u0013\u0013\u001a��!gi\u0013\u001a��!Q_�&\u0000.\u0007\u0016\u0016\u001e\u0016�&\u0002.\f\u0016\u000f\u001e\u000f�!��y\"p!��{\"r�!��y\"p!��{\"r�����\u0001�����O \u0005!��\u0018\u0003!����ɧ(\u0007�\u0003(\u00034\u0018\u00015<�\u0004 \u0001���������r����W�r��\b_�r����\u0010ͻ\"��\u0006\u0001͢3\u0018����G���W�!$�\b(\u0004|�\bW]>3\u0006\u0001͢3�!��\u0011��\u0018\u0006!��\u0011��\u000e@��G�(\u001e�\u00100\u001a�\u0002(\u0016�\u0004(\u0012�\u00058\u0004�\t8\n!�\"_\u0016\u0000\u0019~�ɯ�\u00005678333349:;<=>����\b��_�����W���\u0010�`\u0019���\n#�!O�\u000e\u0000z�(\f####\fy�\n(\u0019\u0018�!P�\u000e\u0000{�(\f####\fy�\n(\u0004\u0018���=���\"�����\b�����\"�����\b�����33\u0000\u0000����t��#͛#�����G�t���� \u0004>�����#ͥ#ͺ#��!��\u0011R#�\t\u0010����\u0007�>\u0007�����������!��\u0011���\t\u0010����\u0007\u0007�\u0002_\u0016\u0000!N�\u0019�����w�����9��?����\u0007\u0007<_\u0016\u0000!R�\u0019�����w����\u0007\u0007_\u0016\u0000!N�\u0019�\"\"\"w�����?�?�?W����?�?�?G>\u0000HZͼ\u0006����4�_\u0016\u0000!\u001e�\u0019�S\u0006����\bW���G�!$�:�:�:�8�8�8>\u0000HZͼ\u0006!\u001c��S\u0006����\u0007\u0007_\u0016\u0000!Q�\u0019~���R$��x$��3�W���O���G!5�z��*� \u0004~�(\u0005##\u0015\u0018�++~6\u0000��O���W���_\u0006\u0000����\u0001 \u0001Gy͢3�!\u0000�\u0006\u0000*�(\t\u0004>\u0010� �>��x+����<�=_\u0016\u0000!\u0000�\u00195�\t�.ɧȯ�.���$�\u0018%>\u0000\u000e\u000e\u001e\u0000ͼ\u0006�S\u0006�\u001f%>\u0000\u000e\u000e\u001e\u0001ͼ\u0006�S\u0006>\u0000\u000e\u0013\u001e\u0000ͼ\u0006!\u0005��S\u0006>\u0000\u000e\u0013\u001e\u0001ͼ\u0006!\u0005��S\u0006��!#�*V_!,�*fo��\u000f�}�#�|�$��!#�>e\u0018\u0005!,�>e�Q\u0007�\t���� \u0007���<�����ɧ \b��ɧ \u00027��*ɧ(\u0005�\n&7��_%͆% \u0003�\n&��%������\u000f�����!��5~�� \u00126;!��5~�� \u0007������ɯ���ɧ(\u0005��������� \u0019����\u001e(\n�\u0014(\u0006�\n(\u00020\u0006�>\u0005Ĥ\u000e������\u000b8\u0004>�������\u0004(\u000e�\u0007 \u0007>\u0005ͤ\u000e���\u000b���%�>\u0000\u000e\u0001\u001e\u0001ͼ\u0006!x��S\u0006>�����ɧ���ɧ��(��\u0004(\u0006>\u0011����>\u0001����������>\u0000\u000e\u0002\u001e\u0001ͼ\u0006!}��S\u0006�8&>\u0000\u000e\u0001\u001e\u0001ͼ\u0006�S\u0006�?&>\u0000\u000e\u0003\u001e\u0001ͼ\u0006�S\u0006�!��>\u0001\u0018\u0005!��>B�Q\u0007�>\u0000\u000e\u0001\u001e\u0001ͼ\u0006!��S\u0006�>\u0000\u000e\u0001\u001e\u0001ͼ\u0006!���S\u0006�\t��ʧ�\u000e@�,��G��ʸ0\u0011�0\u0005�0�\u0018\u001f!0ɾ0\u0019~\u0018\u0016\u000eX�,��G��ʸ8\u000e(\f��p8\u0002>p�������ͼ&#���\"���w�ͼ&6\u0000����\u0007\u0007_\u0016\u0000!q�\u0019����< \u0005͖\u00197�!���Z\t��!���Z\t\u0018\u0006!����\u0012ͩ&���1�G> �\u0007\u0007\u0007G������7O����������W�!\u0011�~��###\u0018�>\u0012ͤ\u000e�;\f��\u0003ͤ\u0003�x�u�y�v�\u001d{�x�\u0015z�w��T'z�(\u0004\u0015\u0004\u0018�{��\u001d\f�u�G�w�W\u0018���z� \u0004\u0006\u0002\u0018\f!wȾ \u0004\u0006\u0000\u0018\u0002\u0006\u0001{� \u0004\u000e\u0006\u0018\f!xȾ \u0004\u000e\u0000\u0018\u0002\u000e\u0003x��_\u0016\u0000�)ɧ \u0005!D�\u0018\f�\u0001 \u0005!V�\u0018\u0003!h�\u0019��Q>\u0000HZͼ\u0006�S\u0006�������������������������������\u0011�\u000f�/\u0006y�z��\u0011�\u000f�/\u0006�zȑ��w���\f!�'��\f�\u001d���� \u001f�{�<���!#)�,\r\u0011,\u0000!��{\"r\u0011T\u0000!��{\"rͣ(�\u0013)���\f!\"(��\f�\u001d���� \u001f�{�<���!.)�,\r\u0011,\u0000!��{\"r\u0011<\u0000!��{\"r��(�\u0013)���\f!Y(��\f�\u001d���� \u001f�|�<���!3)�,\r\u00114\u0000!��{\"r\u0011T\u0000!��{\"r�\u0001)�\u0013)�!{�5~�� \u0005>\u0003�{��!{�4~�\u0004 \u0004��{��!T\u0000�{��\u001b)}���|����!{�5~�� \u0005>\t�{��!{�4~�\n \u0004��{��!,\u0000�{��\u001b)}���|����!|�5~�� \u0005>\u0007�|��!|�4~�\b \u0004��|��!4\u0000�|��\u001b)}���|����!���Z\t�ɇ��_\u0016\u0000\u0019���؝\u0017ƨ�\u0000#)��؝\u0017��؝\u0017\u0014\u0002\u0000\u0000\u0000�\u0011\u0011�\u0016\u0010\u0010HI10�0\u0010\u0010\u0000�SC00\u0014\u0002\u0000\u0000\u0000�\u0011\u0011�\u0016\u0010\u0010\u0000\u0000\u0000H@�@mA\u0006B�B&C�CjD\u0014E�E�F\fG\u000bH�H�IKJ&K�K�L�M�N+O�O=P�P�QkR�R�S�SgTlTqTvT{T�T�T�T�T�T�T�T�T�T�T31520347�11145378�13020060�36985214�93493887�19640813�>\u0001�)�͑*͔\b���O�����ȡG����\u00070\u0002\u0018p\u00070\u0002\u0018k\u00070\u0013͵(!~�5~�� \\>\t�~�\u0018U\u00070\u0013��(!~�4~�\n F��~�Á*\u00070\n��* :��*\u00182\u00070\u0003�\u0018/\u00070\u0015Ͱ*��(!�4~�\b \u001a���\u0018\u0014\u00070\u0011��(!�5~�� \u0005>\u0007����)�+���\u0019'��)��ɯ�~���!��\u0001\n\u0000�\u0002\u000e�>+�\u0018(�O(>�����!����_\u0016\u0000\u0019�~�w��*����\u0006G>\u0000H\u001e\tͼ\u0006�~�\u0007_\u0016\u0000!\u0005�\u0019�S\u0006�>\u0003ͤ\u000e�>\u0001����\u001a+(\n!��4~�\u0007 �����O\u001e\u0005��\u0005\fy�\u001f(\u0002��>\u0001����\u0019'�\u0010,�R,�����=G\u0007\u0007\u0007�_\u0016\u0000!�)\u0019\u000e\b\u0011���9+�\r�#\u0013\u0018�\u001a�0���:\r\u0006\u0005\u000e\u0002\u0016\n\u001e\u0003&\u0000�('\u0006\u0002\u000e\u000b\u0016\u0010\u001e\u0005&\u0000�('>\u0000\u000e\u0006\u001e\u0003ͼ\u0006!z��S\u0006>\u0000\u000e\u0005\u001e\u0006ͼ\u0006!���S\u0006>\u0000\u000e\u0006\u001e\tͼ\u0006!���S\u0006>\u0000\u000e\u0004\u001e\fͼ\u0006!���S\u0006>\u0000\u000e\u0003\u001e\u000eͼ\u0006!���S\u0006��\u0003��:\r\u0006\u0004\u000e\u0004\u0016\f\u001e\u0007&\u0000�('\u0006\u0003\u000e\f\u0016\u000e\u001e\u0003&\u0000�('>\u0000\u000e\u0006\u001e\u0006ͼ\u0006!z��S\u0006>\u0000\u000e\u0004\u001e\rͼ\u0006!���S\u0006>\u0000\u000e\u0006\u001e\tͼ\u0006�+�O\u001e\u0005�\u0018\u0006\ry\u0007\u0007\u0007�_\u0016\u0000!�)\u0019�S\u0006��\u0003>\b�!\t��:\r>\u0000\u000e\u0006\u001e\u0006ͼ\u0006!���S\u0006>\u0000\u000e\u0005\u001e\rͼ\u0006!���S\u0006�=,>������\u0003�!��>B�Q\u0007>\u0000\u000e\b\u001e\bͼ\u0006�S\u0006�͔\b���O�����ȡG����\u0007\u0007\u00070\u0005̀,\u0018\u000f\u00070\u0005͑,\u0018\u0007\u00070\u0004����\u0018�!��5~� \u0005>\u001e����=,�!��4~�\u001f \u0005>\u0001����=,��\n3�#3ͭ,���,�'��\u0001 \u0005�S0\u0018��\u0002 \u0005��0\u0018.�\u0003 \u001a>\u0005����\u00152  >\u0002�\u0016\u000e�{x�'\u000e��'��>\u0002�\u0016\u000e�n{�'\u000e��'�ɯ�'�\u0018��'ɧ̝-�7-��/�\u0018.>\u0001�2��/���/��2��/�!\u000f\u0000�\u0016\t�\u0019'͔\b��\u0010���E�����,��ɯ�'�����������������*����������������������������!\u0011�\u0001<\u0000�\u0001\u000e!N�\u0001P\u0000�\u0001\u000e!R�\u0001\u001e\u0000�\u0001\u000e!\u0000�\u0001\u0010\u0000�\u0001\u000e�+��\u00150\u0004>\u0002\u0018\u0002>\u0003����>\u0002̓\u000eͬ-!-\u0000�\u0016\t���\u0010\u0006\u0005\u000e\u0005\u0016\n\u001e\u0003&\u0000�('\u0006\u0006\u000e\t\u0016\b\u001e\u0003&\u0000�('>\u0000\u000e\u0006\u001e\u0006ͼ\u0006!���S\u0006�\u0006.>\u0000\u000e\f\u001e\u0006ͼ\u0006�S\u0006>\u0000\u000e\u0007\u001e\nͼ\u0006!���S\u0006�\u000f.>\u0000\u000e\u000b\u001e\nͼ\u0006�S\u0006�!+�>B�Q\u0007�!��>B�Q\u0007��\u001f.�k/��b.>\u0002�\u0016\u000e\u0011\u0005�\u0001\u0000\u0002�\r\u000e�'\u000e!\u0006�*�1�*�r.*�2�*���*���͉.͢.�T.��1�G>\u001e�\u0007\u0007\u0007�0���+�=�!a)_\u0016\u0000\u0019*fo��G�\u0003\u0007\u0007O\u0007\u0007����x��\u000f\u000f������!q�\u0001(\u0000�\u0001\u000e�*�pɧ�\u0007\u0007O\u0011q����!4�\u0001\u001e\u0000�\u0001\u000e�*�3ɧ�G\u0007�O\u00114���!q�\u000e\u0000�pɧ�������\f��y���*���*���*���*������.��\f���=\f\u0018�\u0007\u0007!q�_\u0016\u0000\u0019]T����==!\t/�\b\u000f�\u0019T\u0019T\u0019T\u0019T\u0019T�HKK\u0002K\u0003L\u0003L_N_N]LD?D?D?�W�W�W�WUYsZsZ�[�[\u001cQ\u001cQ\u001cQ\u001cQ�a�@OA�B�]�b[C�GlFEGEG�<�<�`�cEe}fWh�B\u001aD}���|����1�G> �G�>\u0000\u000e\u0000Xͼ\u0006��\u0006��/� \u001c�\n&�>\u0002\u000e\u0000Xͼ\u0006!��*fo��\u0006>\u0002�\u0016\u000e!\u0000@\u0011\u0005�\u0001\u0000\u0002�\r\u000e�'\u000e>\u0002\u000e\u0014\u001e\u0000ͼ\u0006!\u0005���\u0006�!\u0005�\u0001\u0000\u0004�\u0001\u000e��>@�A>\u000f�E>p����,����*0>\u0001�.���\f�1��\u00118\u0006!h&��\f!�j��\f�2ɧ!�>��\fͼ.!>3��\f!�$��\f!(%��\f͔\b�'ɧ(���+��\n(\b�\u0014(\u0004�\u001e \u0004>\u0007\u0018\u0012�\u000b0\u0004>\u0003\u0018\n�\u00150\u0004>\u0004\u0018\u0002>\u0005̓\u000e�>\u0002̓\u000e!��5\u0006\u0002\u000e\u0004\u0016\u000f\u001e\u0003&\u0000�('\u0006\u0004\u000e\u0007\u0016\u000b\u001e\u0003&\u0000�('\u0006\u0006\u000e\u000b\u0016\b\u001e\u0003&\u0000�('>\u0000\u000e\u0003\u001e\u0005ͼ\u0006!���S\u0006>\u0000\u000e\u0005\u001e\bͼ\u0006!���S\u0006>\u0000\u000e\u0007\u001e\fͼ\u0006!���S\u0006�\u0006.>\u0000\u000e\t\u001e\u0005ͼ\u0006�S\u0006�\u000f.>\u0000\u000e\u000b\u001e\fͼ\u0006�S\u0006!-\u0000�\u0016\t���\u0010>\b̓\u000e��������'���0�+�O\u001e\u0005�\u0018\u0006{�̪+!+�4���$\u0006\u0002\u000e\u0002\u0016\u0010\u001e\u0005&\u0000�('\u0006\u0002\u000e\u0007\u0016\u0010\u001e\u0003&\u0000�('\u0006\u0001\u000e\n\u0016\u0012\u001e\u0005&\u0000�('>\u0000\u000e\u0003\u001e\u0003ͼ\u0006!���S\u0006>\u0000\u000e\u0007\u001e\u0005ͼ\u0006!���S\u0006>\u0000\u000e\u0004\u001e\bͼ\u0006!���S\u0006>\u0000\u000e\u0005\u001e\u000bͼ\u0006!\u0001��S\u0006>\u0000\u000e\u0002\u001e\rͼ\u0006!\u0007��S\u0006�\u001f%>\u0000\u000e\f\u001e\u000bͼ\u0006�S\u0006�\u0018%>\u0000\u000e\f\u001e\rͼ\u0006�S\u0006�8&>\u0000\u000e\u0003\u001e\bͼ\u0006�S\u0006�?&>\u0000\u000e\u0005\u001e\bͼ\u0006�S\u0006�\u0006.>\u0000\u000e\t\u001e\u0003ͼ\u0006�S\u0006͟4>\u0000\u000e\f\u001e\bͼ\u0006�S\u0006>\u0000\u000e\u0010\u001e\bͼ\u0006!\u0005��S\u0006>\u0000\u000e\u0011\u001e\u000bͼ\u0006!\u0005��S\u0006>\u0000\u000e\u0011\u001e\rͼ\u0006!\u0005��S\u0006��1�!\f4��\f͔\b��ȧ(�!\u000f\u0000>��-\t��/ɧ�>\t̓\u000e�����,��-�>\n���̓2͔\b����\b \r�m2 �!\u001e\u0000�\u0016\t��!/�5�(��\u0003 \u0004>����+�=O\u001e\u0005�\u0018\u0006\u001e\u0005��\u0005\fy�+ɧ�!��4~�\u000f��w!��5��2��ȧ��:\r\u0006\u0004\u000e\u0002\u0016\u000b\u001e\u0003&\u0000�('\u0006\u0003\u000e\u0006\u0016\r\u001e\u0005&\u0000�('\u0006\u0001\u000e\r\u0016\u0012\u001e\u0003&\u0000�('>\u0000\u000e\u0005\u001e\u0003ͼ\u0006!\u0010��S\u0006>\u0000\u000e\u0004\u001e\u0007ͼ\u0006!\u001a��S\u0006>\u0000\u000e\u0002\u001e\u000eͼ\u0006!$��S\u0006!/�>\u0001�Q\u0007>\u0000\u000e\u000e\u001e\u0007ͼ\u0006�S\u0006��2��\u0003�!��>B�Q\u0007>\u0000\u000e\b\u001e\tͼ\u0006�S\u0006ɯ�\u0001>\u0002�/�>\u0005���!\u0000\u0000}�,�|�-��>\u0002�\u0016\u000e!Yc\u0011\u0000��J\b!�^\u0011\u0000��J\b�'\u000e�\t!\u0011�~��(\u0010�(\b�b3(\u0003͖3###\u0018�!\u0011�\u0001<\u0000�\u0001\u000e���\u0011N�\u001a��(\u0014̈́3(\u0006\u0013\u0013\u0013\u0013\u0018�\u0013\u0013\u0013>\u0001\u0012�\u0018\u0003>�����վ \n#\u0013\u001a� \u0004#\u0013\u001a�����*V#^\u0006\u0002͢3�����ͩ\"��\f��{���z�������x�����3����3!�3�\b\u000f��\fͱ\"�nw�P�O\u0013P`P�atvtvtvtvtvtv�\u0001�!N�\u000e\u0000~�(\u0007####\f\u0018�y������\"z\"{\"6\u0000�\t���!\u00174�\b\u000f�\u001d4/4�4��������\u00058\u0005>\u0001�������ɧ \r��ɧ \u0007<<�������ɧ \b!��5>;\u0018\u0001=����8&>\u0000\u000e\u0003\u001e\bͼ\u0006�S\u0006�?&>\u0000\u000e\u0005\u001e\bͼ\u0006�S\u0006!��*fo\u0011\n\u0000\u0019}���|���͟4>\u0000\u000e\f\u001e\bͼ\u0006�S\u0006�3\u000e8\u0005>\u0006ͤ\u000e��!��>d�Q\u0007�����Z�\u00165!,�*V_�!,�\u0011���\u000f\u00100\f\u0011��!,�{\"r!,ɯ������*FO�!����'͟4>\u0000\u000e\f\u001e\bͼ\u0006�S\u0006�\u001f%>\u0000\u000e\f\u001e\u000bͼ\u0006�S\u0006��$�\u0018%>\u0000\u000e\f\u001e\rͼ\u0006�S\u0006>\u0001���7ɷɯ�����������7�#3�,5��x5�'��\u0001 \u0005�\u001b8\u0018��\u0002 \u0005�A8\u0018��\u0003 \u0005�8\u0018��\u0004 \u0005ͯ8\u0018\u001d�(��\u0004(\u0013>\u0005����\u00152(\t��)��'�\u0018�͸8��)��!��*fo#}���|�����5�(6��/��8���\u00078\u0005>\u0001�2�>\u0001�/���9��2��/��\u0019'͔\b��\u0010���E�����,��ɯ�'��*������������������������������������������������������������������<!\u0011�\u0001<\u0000�\u0001\u000e!N�\u0001P\u0000�\u0001\u000e!\u0000�\u0001\u0010\u0000�\u0001\u000e��(��\u0003 \u0004͝-�>\u0002̓\u000e�B6!-\u0000�\u0016\t��:\r\u0006\u0001\u000e\u0004\u0016\u000e\u001e\u0003&\u0000�('\u0006\u0005\u000e\n\u0016\r\u001e\u0003&\u0000�('>\u0000\u000e\u0002\u001e\u0005ͼ\u0006!5��S\u0006>\u0000\u000e\u0007\u001e\bͼ\u0006!>��S\u0006>\u0000\u000e\u0006\u001e\u000bͼ\u0006!A��S\u0006!��>B�Q\u0007>\u0000\u000e\f\u001e\u0005ͼ\u0006�S\u0006!��>B�Q\u0007>\u0000\u000e\u000f\u001e\u000bͼ\u0006�S\u0006��\u0003����\u00078\b\u0011\u0010'\u001bz� ��!��6\u0005�\u0002�~�\u0002>��\u0001����\u00070$�\u0001�� �>\u0019��>\"���>���\u000e��=�G\u0011�\u0000\u001bz� �x\u0018��!��6\u0007>���\u000e�\u0002\u00078��\u0001�� ����:\r\u0006\u0002\u000e\u0007\u0016\u0010\u001e\u0003&\u0000�('>\u0000\u000e\u0003\u001e\bͼ\u0006!���S\u0006!+�>B�Q\u0007>\u0000\u000e\t\u001e\bͼ\u0006�S\u0006��\u0003!i\u0000�\u0016\t�Ͳ7\u0006\u0005\u000e\u0002\u0016\n\u001e\u0003&\u0000�('>\u0000\u000e\u0006\u001e\u0003ͼ\u0006!I��S\u0006>\u0000\u000e\u0006\u001e\bͼ\u0006!�~\u0018+Ͳ7\u0006\u0005\u000e\u0002\u0016\n\u001e\u0003&\u0000�('>\u0000\u000e\u0006\u001e\u0003ͼ\u0006!R��S\u0006>\u0000\u000e\u0006\u001e\bͼ\u0006!�~;7�>\u0002�)���7��\u0010�>\u0003�\u0016\u000e��\u0006�'\u000e!i\u0000�\u0016\t�>\u0003�\u0016\u000e!rx\u0011\u0000��J\b�'\u000e��8\u0004!\u0011�\u0001<\u0000�\u0001\u000e!N�\u0001P\u0000�\u0001\u000e�(��\u0003 \u000f������� \u0006>�����>\u0002�/�>\u0005���������\u0010\u0006\u0007\u000e\u0004\u0016\u0006\u001e\u0003&\u0000�('>\u0000\u000e\b\u001e\u0005ͼ\u0006![��S\u0006!\u001e\u0000�\u0016\t��(��\u0003 \r>\b̓\u000e�\u00197!+�4���\u0010!��5\u0006\u0005\u000e\u0004\u0016\n\u001e\u0003&\u0000�('>\u0000\u000e\u0006\u001e\u0005ͼ\u0006!`��S\u0006!\u001e\u0000�\u0016\t�!��5�(��\u0003���\u0010\u0006\u0005\u000e\u0004\u0016\n\u001e\u0003&\u0000�('>\u0000\u000e\u0006\u001e\u0005ͼ\u0006!i��S\u0006!\u001e\u0000�\u0016\t�>\u000b̓\u000e�V7�>\f̓\u000e̓7���\u0010>\u0000\u000e\u0000\u001e\u0010ͼ\u0006>\u0002�\u0016\u000e!8T��\u0006�'\u000e� \u001c�\n&��/!\n\u0000�\u0016\t�B9��9>\u0002�\u0016\u000e!\u0000@\u0011\u0005�\u0001\u0000\u0002�\r\u000e�'\u000e>\u0002\u000e\u0014\u001e\u0000ͼ\u0006!\u0005���\u0006>\u0002�\u0016\u000e!7@\u0011\u0005�\u0001\u0000\u0002�\r\u000e�'\u000e>\u0002\u000e\u0000\u001e\u0007ͼ\u0006!\u0005���\u0006!��\u0011��\u000e\u00146\u0004��>\u0005���>\u0014�����ȧ��w9!�Ȇ� \u0004>\u0002\u0018\u000e��8\u0004>\u0001\u0018\u0006�\n8\u0002>\nw͚9!��5\u0018��{\u0004!�9�8\b��(\u0004##\u0018�#F\u000fx�/<�&\u0000�\u0001�\u0002�\u0003�\u0004���������O>\u0014�G\u0016\u001e>\u0000HZͼ\u0006����9! ��S\u0006��\u0015!��5 ��\u0011p\u0017\u001bz� ��!\u0000�\u0011\u0005�\u0001\u0000\u0002�A��\u0003 �*\u0012\u0013\u000bx� ���O;>\u0001�.���\f�:;!�j��\f�(��\u0003 \u000e�k;ͼ.!�;��\f\u0018\u000b>d���!�j��\f!>3��\f!(%��\f�(��\u0003(\u001c͸6���\u00070\u000e�>\"���>���\u000e�\u0018\u0005>a���>\u0006̓\u000e�(��\u0004 6�.�����������������������������ͤ\u0003>\u0001�0�ͼ;��.��0�͝:\u0018\t͔\b�'ɧ(���\u0003͔\b����\u00078j\u0011\u00000\u001bz� ��!��6\u0007>���\u000e�\u0011\u0000\u0010�N(\u0007\u001b{� �\u0018��\u0001�\u0013(*\u0006\f����\f!����6\u0007��\u000e�\u0011\u0000\u0005�4;�\u0001�\u0013 \u0003�\u0018\t�<\u0005 �\u0018�\u000e\u001e��>�!��6\u0007��\u000e��\r�\u0011\u0000\u0005�4;\u0018���\u0002>\u0013�\u0001�\u0001�� �\u000e\u001e��>\u0013!��6\u0006��\u000e��\r�\u0011\u0000\u0005�4;\u0018�\u001bz��\u0018�>\u0010���>����>����>������+�=!�)�\b\u000f>\u0002�\u0016\u000e\u0011\u0005�\u0001d\u0000�\r\u000e�'\u000e�!q�\u0001(\u0000�\u0001\u000e!\u0005�*�pɧ�\u0007\u0007O\u0011q���\u0005�����(\u0018!q�\u000e\n*��###\r �����=���\u0018\u0015����\u00058\u000e�+��\u000f>\u00028\u0002>\u0004�'ɷɯ���!�����\u000780\u0011\u0000\n�n \u0016\u001bz� ����=�6\u0003��\u000e��f(�\u0018�ˮ�ͤ\u0003��D\u00078��'ɧ�\u00181ˮ�'ɧ���.�\u0000\u0000\u0000\u0000\u0000�f(�>\u0004�.�˦���O��ʹ(\f����6C��\u000e�\u0018����������������������������U\u0003���������_��ʫ�������_��ʫ�������\u00078\f������\u000e˶�\u0018\r��<������\u000e���!��4~���>\u0001�\f�͔\b��\f����\u0007��;ͥ<��;��ȧ(\t�X&�\n&�\u0018\u000b����_��H&>\u0001���>\u0004ͤ\u000e��*�G�*��(���(��\u0003 \n>\u0002��ɯ���ɯ���<����1���!�<�\b\u000f�\u0000=\u0019=\\=`=>����>!���>w����\u0011\u000f>\u0001͜=����=�����W \u000b��U \u0013>\u0004͜=��aU�\u0001 \u0003x\u0018\u0016�(\u0003�\u001b>����+ \u0012����\u0004 \u000b>\u0005���>\u0003͜=���&���&���=�����W(\u0019������7�}V>\u0001͜=\u0011\u0000\u0000!��{\"r��6>(\u0005ͮ\u001d\u0018\n����\u000f�\u0005�\u0002>��&����=!�=�\b\u000f��vW���\u0007\u0007\u0007��\u001d!��5\u0018\u0017>\u0005͠\u001dͮ\u001d��\u001d!��5\u0018\u0006�\u0002>��\u001d!Mx�,\r\u0018\u0007�����h\u001d��&��=�=�=�=ͤ\u001e \u0006>\u0002͜=���\u001a \u0003�F>>�������* \b\u0001UU\u0011\u0001\u0000\u0018\u0006\u0001UU\u0011\u0001\u0000�#\"����� �������\u000f�\u0007 \u0004>\u0003\u0018\u0002>\u0007͠\u001d�����o��� \u0003�O��_�͐$������6\u0001������������������ͩ\"��\fͨ>\u0011\u0000�!��{\"r\u0011\u0003\u0000!��{\"r>\t�������������o>\u0007 \u0002>\u0003���!\u0002K��\fͱ\"��������������������o��� \u0004��\u0018\u0002������\n��ʧ \u0010��ʧ \n!��4~�\u001e��>��ͩ\"��\f��>�\u0014?�(?!D?��\fͱ\">\u0001�����+��\n0\u0004>\u000f\u0018\n�\u00140\u0004>\u0010\u0018\u0002>\u0011������ʧ>�(\u0002>\u0002����2�������ʧ \u000b>\u0001���>\u0007����>!���>\u0003����1���!O?�\b\u000f�U?m?�?>��������\u0011\u000f������>\u0001��?��ͩ\u001e \u0006>\u0002��?���\u001a \u0003�n@�\u0003@(\u0003�M@�/@(\u0012����������������7�!����\u0012��@�����< \n͖\u0019>\u0001���7�!���Z\t�����=!�?�\b\u000f���?�,\r\u0018\r�����������k\u001d!����\u0012��@���?�?����\u000f!�?�\b\u000f�^xqx�x!������o���(\u0006��8\f\u0018\u0017�\u000e8\u0013��8\u0002\u0018\r����o(\u0003�N��^ɯ�����o��� \n��8\u000e��0\n\u0018\u0004��8\u0004>��ɯ����� �������\u0001�������\u000f�\u0007>\u0003(\u0002>\u0007͠\u001d�͐$������6\u0001����������\u0000�������\u0004���ͩ\"��\f͸@>\b���>\u0005���������!KK��\fͱ\"���������������������������������1���!�@�\b\u000f��@0A>\u0001���>�����\u0011\u000f>\u0001�������?�?�?G����?�?�?W>\u0000HZͼ\u0006!.A�S\u0006������������\t���!�}�,\r��&�/���&�@A�����Ͷ&�����\u0007\u0007_\u0016\u0000!q�\u00196 �1���!ZA�\b\u000f�^AzA>����>\u0001����\u0011\u000f>\u0001���!\u0001y�,\r��&�ͤ\u001e͉A0\u0003͎A��&����\u000f������ȯ���͐$������6\u0002����������������\u0001 $��A�eB�\u0012B>\u0007����NB��A�nB�\u0012B>\u0003����NB���\bB�~B�0B>\u0001����NB�\bB͇B�0B>\u0005����NB��ͩ\"��\f�wB�ͩ\"��\f�^B�\u0011\u0000�!��{\"r\u0011\u0003\u0000!��{\"r>\t����������\u0011\u0000�!��{\"r\u0011\u0003\u0000!��{\"r>\t����������!\u0002K��\fͱ\"������������������\b��������\b���������������\b��������\b����1���!�B�\b\u000f��B�B>�����\u0011\u000f>\u0001���>����>P������2 (\u0007>\u0001���\u0018\b�^\u001a \u0003��B�ɯ������͐$������6\u0002�������������������\u0006C�IC�\u0010C�\u0006C�RC�\u0010C��ͩ\"��\f�BC�\u0011\u0000�!��{\"r\u0011\u0003\u0000!��{\"r>\t���������>\u0005���!\u0002K��\fͱ\"������������������\f��������\f����1���!fC�\b\u000f�lC�C�C>����>\u0001����\u0011\u000f>\u0001���!�y�,\r��&�Ͳ\u001e \u000e>\u0002��������r\u001d\u0018\b�^\u001a \u0003ͱC��&���&�>\u0004�'�ɯ������͐$������6\u0001������������ͩ\"��\f�\u000bD\u0011\u0000\u0000!��{\"r\u0011\u0004\u0000!��{\"r>\n���������>\u0005���!\u0003L��\fͱ\"������������\f����������1���!%D�\b\u000f�/DGD�D�D�D>����>\u0001���>w����\u0011\u000f>\u0001��D��PE��ZE�/F(\f��������3E\u0018$����\u00038\r����W \u0006>\u0002��D�����\u000f�,\u001d(\u0006>\u0004��D���&��PE�����W(\u0010������7͠\u001d>\u0001��D���&���&��PE�!������o \u0004�^\u0018\u0002�N )����o \n!��5!��5\u0018\b!��4!��4������7͠\u001d>\u0001��D���&����=!+E�\b\u000f�>\u0001͠\u001d�3E!-y�,\r\u0018\u001f>\u0005͠\u001dͮ\u001d��\u001d\u0018\u0003�3E!(y�,\r\u0018\u0007�����r\u001d��&�\u0015E\bE E�D\u0001��\u0011\u0001\u0000����\u000f�O \u0007�0\"ͮ\u001d��#\"��\u001d�Ͳ\u001e�>\u0003��D�!��*fo\u0011-\u0000��\u000f \u0004�\t`��\u0011Z\u0000��\u000f��\t`͂E��������͐$������6\u0003������������������ͼE��E��EͼE�\u0004F��EͼE�\u000bF��E��ͩ\"��\f���������������>\t���������!\u0002K��\fͱ\"�������>\u0001���\u0011\u0000�!��{\"r\u0011\u0003\u0000!��{\"r�>\u0002���\u0018\u0005>\b���\u0011\u0000�!��{\"r!��{\"r\u0011\u0003\u0000!��{\"r!��{\"r����G����\u000f�\u0007 \t>\u0016Ox�==\u0018\u0005>\u0016�<<��0\u0002������\u000f�\u0003>\u0007(\u0002>\u0003͠\u001d���� ���>���1���!wF�\b\u000f�{F�F>����>\u0001���>\u0001����\u0011\u000f>\u0001���!py�,\r!���Z\tͩ&��ͤ\u001e�^\u001a \u0003ͼF�%G!���Z\tͩ&�ɯ������͐$������6\u0001������������ͩ\"��\f�\u0016G\u0011\u0000�!��{\"r\u0011\u0003\u0000!��{\"r>\t���������>\u0007���!\u0002K��\fͱ\"������������������\u0002��������\u000f�\u0001��� \t�\n���>\u0005\u0018\u0007�\n���>\u0001͠\u001d�1���!PG�\b\u000f�TGzG>����>\u0001����\u0011\u000f>\u0001���!#z����((\u0003!�z�,\r��&�ͤ\u001e��\u001a \u0003͉G��&ɯ������͐$������6\u0001������������ͩ\"��\f��G\u0011\u0000\u0000!��{\"r\u0011\u0004\u0000!��{\"r>\n���������>\u0005���!\u0003L��\fͱ\"������������\u0002����������1���!�G�\b\u000f�\u0001H\"H>����>\u0001���>w����\u0011\u000f>\u0001���!|y�,\r��&�ͤ\u001e��\u001a \u0003�4H͝H��&ɯ������͐$������6\u0001������������ͩ\"��\f͎H\u0011\u0000\u0000!��{\"r\u0011\u0004\u0000!��{\"r>\n���������>\u0001���!\u0003L��\fͱ\"���������������������������\u000f�,\u001d�����\u000f�\u0003>\u0007(\u0002>\u0003͠\u001d�1���!�H�\b\u000f��H�H I>\u0001����\u0011\u000f>\bͤ\u000e>\u0001ͬI�����e \b��ʧ(\u001e\u0018\u0016����\u0001��� \u0006�\u000f(\u0006\u0018\u0006�� \u0002\u0018\u0006>\u0002ͬI�����(\t�$J>\u0002ͬI�!���Z\t��I�����< {����e :!������\u0001���G��� \u0013����ʯ������ˆxˇ\u0018\u0011�\u000f��ʯ������ˎxˏ���7�!������\u0001���G��� \u0013�����ˆ�������xˇ\u0018\u0011�\u000f���ˎ�������xˏ���7�!���Z\t��I�����=!�I�\b\u000f�!�|�,\r\u0018!����\u0007!��(\u0003!������\u0001 \u0004��\u0018\u0002�ί����J\u001d!���Z\t��I�ɷI�I����e \r�����������������\u0001 \r�������������������������ɯ�������G(\u0004>\u0001\u0018\u0012�W(\u0004>\u0005\u0018\n�O(\u0004>\u0003\u0018\u0002>\u0007W������G���Oz�\u0019\u0018��Jz�����{�������J����W���_��\u0010� \t;J\u0018�>\u0005\u0018��\u0001(\f�\u0002(\b�\u00058\n�\u00100\u0006͖JͯJ�!�J_\u0016\u0000\u0019~�\u00005678333349:;<=>��\u000e'�\"���\"���w�����G \u0004�W(\t����\b��������\b��������\u0003��\u0005��\u0001 \u0003\u001d\u001d�\u0015\u0015������0\u000b����\u000f8\u0004>��ɯ�1���!\rK�\b\u000f�\u0011K,K>\u0001����\u0011\u000f>\u0001���!�|�,\r!���Z\t���2 (\u0007>\u0001���\u0018\u0006����(\u0005ͥ$7�!���Z\t��1���!VK�\b\u000f�\\KjK�K>\u0001����\u0011\u000f>\u0001ͤK��2 (\u000b>\u0001���>\u0002ͤK�����(\t��K>\u0002ͤK�!���Z\t�����< \u0005ͥ$7�!���Z\t�����=!�K�\b\u000f�!�|�,\r\u0018\u0007�����J\u001d!���Z\t�ɯK�K���G���O>\u0005�\u0019\u0018z��W���{��_�����\u0010�\t�!\u0011�~�(\u0005###\u0018�>4\"���\"���w�1���!\u000eL�\b\u000f�\u0012L>L>\u000eͤ\u000e>\u0001����\u0011\u000f>\u0001�������O \u0005!�|\u0018\u0003!�|�,\r!���Z\t���2 (\u0007>\u0001���\u0018\u0006����(\u0005ͥ$7�!���Z\t��1���!hL�\b\u000f�nL�L�L>\u0001����\u0011\u000f!�|�,\r>\u0002�������!���Z\t����L�ʹM(\u0004ͮM�����\u00148\u0011�ZM>\u0002��������\"N\u0018\u0015����\n8\u000e���� \b�7M>\u0001���!���Z\t����L���ʧ(\u000f����̀M�\u0000N>\u0001���!���Z\t����\u001e \u0010�2 (\u0007>\u0001���\u0018\u0004>���ͮM�!������\u0001 \u0007~�?��w��\u0002 \u0007~��� w��\u0003 \u0007~���\bw�~���\u0002w�����\u000f�\u0002 \u0004>\u0006\u0018\u0012�\u0004 \u0004>\b\u0018\n�\u0006 \u0004>\u0002\u0018\u0002>\u0004͠\u001d�!������\u0001 \u0005~�?w��\u0002 \u0005~��w��\u0003 \u0005~��w�~��w�!������\u0001 \u0007~�?�@w��\u0002 \u0007~���\u0010w��\u0003 \u0007~���\u0004w�~���\u0001w��\tM�7���M�����\u000f�\u0002\u000f!�M�\b\u000f�!���F��N�!���N��V�!���V��^�!���^��F��M�M�M�M����\n0\u0004>��ɯ�\u0011UU!��{\"r!��{\"r\u0011\u0001\u0000!��{\"r!��{\"r�>N�\u0011\u0000\u0000!��{\"r!��{\"r!��{\"r!��{\"r�����\u0001 \u0004>\b\u0018\u0012�\u0002 \u0004>\u0002\u0018\n�\u0003 \u0004>\u0006\u0018\u0002>\u0004͠\u001d�1���!jN�\b\u000f�nN�N>\u0001����\u0011\u000f>\u0001���͉N�,\r!���Z\t������\u000f=\u000f!�N�\b\u000fɧ|Q}�|�}ͶN����\u0006 \u0005ͥ$7�!���Z\t�����=!�N�\b\u000f��N�N\u001bO�N�N�N����\f \u000f����\u0001!RO(\u0012!^O\u0018\r����\u0003!jO(\u0003!vO�BO�����\f \u000f����\u0001!VO(\u0012!bO\u0018\r����\u0003!nO(\u0003!zO�BO�����\f \u000f����\u0001!ZO(\u0012!fO\u0018\r����\u0003!rO(\u0003!~O�BO��� �H �\u0012!�>\u0001����\u0004\u0004\u0001\u0001\f\u0004\u0001\u0001\u0014\u0004\u0001\u0001\u0004\u0004\u0001\u0001\u0004\f\u0001\u0001\u0004\u0014\u0001\u0001\u0001\u0001\u0004\u0004\u0001\u0001\u0004\f\u0001\u0001\u0004\u0014\u0001\u0001\u0004\u0004\u0001\u0001\f\u0004\u0001\u0001\u0014\u00041���!�O�\b\u000f��O�O�O\u0000P������>\u0001������;$(\u0016>\u0003����J\u001d͍\"��#�J$�������\"(\n>\u000bͤ\u000e��#7��V#������ \u0016�J\u001d͍\"�J$�j\"����<���\u0018\u000b���< \u0005͖\u00197�!���|\u001d�����< \u0005͖\u00197�!���|\u001d��1���!\u001eP�\b\u000f�$P1P1P������>\u0001��������� \u0016�J\u001d͍\"�J$�j\"����<���\u0018\u000b���< \u0005͖\u00197�!���|\u001d��1���!kP�\b\u000f�oP|P������>\u0001�������\"(\n>\u000bͤ\u000e��#7��V#��1���!�P�\b\u000f��P�P�P\u0006Q������>\u0001������;$(\u0013>\u0003����J\u001d͍\"�J$�������\"(\u0005��#7��V#������ \u0016�J\u001d͍\"�J$�j\"����<���\u0018\u000b���< \u0005͖\u00197�!���|\u001d�����< \b͖\u0019��#7�!���|\u001d��1���!'Q�\b\u000f�1Q�Q�Q�Q�Q������>�����KQ�eQ�\u0011\u000f>\u0001��Q�\u0006\u0001����\u001b(\f�\u001d(\b�\u001c\u0006A(\u0002\u0006!x��������\u001b\u0007_\u0016\u0000!{Q\u0019*���~����w\u0005w\u0001\u0011\u0007\u0011\u0003�vR��^\u001a \t�bS>\u0003��Q��E\u001b(\u0006>\u0004��Q�̀R��&���&��vR��k\u001a \r>\u0001��Q����������&�ͩ\u001e \u0006>\u0002��Q���ʧ(\u000f�t\u001b(\n͒\u001b8\u000e>\u0001���͹'>\u0001��Q��=\"��&����=!9R�\b\u000f�ͬ'����������ͮ\u001d��\u001d�QR�,\r\u0018\u001aͮ\u001d��\u001d\u0018\u0003�aR�AR�,\r\u0018\u0007�����G\u001d��&�#R.R\u001bR\u0000R!�x����\u001b��\u001c�!�x�!�x����\u001b��\u001c�!�x�����\u001d0\u0007��\u001d�NS�ͮ\u001d�XS�ͤ\u001e�>\u0002��Q�͈R�͕R�����\u000f�,\u001d��\u0018S�����\u001d0\u0004��R�ͤR�����\u001d���(\u0004�\u0006\u0018\u0002�\u0006W���G����\u000f�\u0001���O \nx���7Gy�\u0018\u0004x�\u000f�_��\u0010�`\u0019��\u0018S�����\u001b��� \u0004�\u0006\u0018\u0002�\u0006_���G����\u000f�\u0007���O \nx���7Gy�\u0018\u0004x�\u000f�W��\u0010�`\u0019�����\u000f�\u0001 \u0004>\u0005\u0018\u0012�\u0003 \u0004>\u0007\u0018\n�\u0005 \u0004>\u0001\u0018\u0002>\u0003͠\u001d������\u001d0\u0007����,\u001d�>���\u0001�\u0010\u0011\u0001\u0000�#\"�\u0001�\u0010\u0011\u0001\u0000�0\"�͐$������6\u0001������������������������ͩ\"��\fͺSͫS�\u0004T������!_N��\fͱ\"������������\u001d>\f8\u0002>\r������S��S�����\u001d0\u000f�\u001b��� \u0004��\u0018\t��\u0018\u0005����\u0000��������\u001d0\t����\u0000��������o��� \u0004�\b\u0018\u0002�\b��������\u001b_\u0016\u0000!\u0015T\u0019~����\u0001\u0005\u0003\u00071���!$T�\b\u000f�,TKTuTyT������>����>!���>\u0007����\u0011\u000f>\u0001��T���\u001aU�����W \u0005>\u0004��T�aU�\u0001 \tx���>\u0003��T�(\u0003�iV��&���&��\u001aU�����W(\u001c������7�}V�ZV>\u0001��T\u0011\u0000\u0000!��{\"r�͍V(\u0003��\u001d��V(\u0005ͮ\u001d\u0018\n����\u000f�\u0005�0U��&����=!\u0012U�\b\u000f��������vW���\u0007\u0007\u0007��\u001d!��5\u0018\u001c>����>\u0005͠\u001dͮ\u001d��\u001d!��5\u0018\u0006�0U��\u001d!Mx�,\r\u0018\u0007�����h\u001d��&��T\u0007U�T�Tͤ\u001e \u0005>\u0002��T�^\u001a \u0003��V>�������\u0002 \b\u0001UU\u0011\u0001\u0000\u0018\u001e\u0001��\u0011\u0001\u0000\u0018\u0016\u0001��\u0011\u0001\u0000\u0018\u000e\u0001G!\u0011\u0002\u0000\u0018\u0006\u0001ff\u0011\u0002\u0000�#\"��zU0\u0011��U���U \bͨU \u0003>\u0001�>\u0002�����o���_(\u0002�3���G����\u000f�\u0007{ \u000b���7Ox�==\u0018\u0005�\u000f�<<������<O!��*�`\u0019̾U(\u000e\r(\u0007\u0018�~�`\u0019�>\u0001�����<�G���(��\u0001����G�������8\u0006�o \t\u0018\u0003�o�>��ɯ�!��}���|������G���O����\u000f�\u0019\u0018>\b�_���<<G���5V��\r\u0005(\u0006{�\b_\u0018���ȧ�!��*��~����\u0010�EV�`\u0019�>\u0001������!��*fo�w#}���|��������G����0\u0002/<�\u0002����� ����o>\u0007 \u0002>\u0003͠\u001d��G \b�\u0005>\u00038\u0002>\u0007͠\u001d���V(\u0015����\u000f�\u00038\u0004�\b82���\u000f0,\u0018&���G��ʀ���G�������>\u0001��\u0017����G���������>��ɯ�����\u0001�!�����������o��� \u0003�O��_ɯ������͐$������6\u0001������������������ͩ\"��\f�ZW\u0011\u0000�!��{\"r\u0011\u0003\u0000!��{\"r>\t�������������o>\u0007 \u0002>\u0003���!\u0002K��\fͱ\"��������������������o��� \u0004��\u0018\u0002����������\u000f�\u0007>\b(\u0002>\u0002͠\u001d�1���!�W�\b\u000f��W�W�W�W������>����>\u0001���͵W�\u0011\u000f>\u0001�\fX�)Y(\u0004>\u0005\u0018\u0002>\u0007����ͤ\u001e \u0005>\u0002�\fX�^\u001a \u0003͜X�E\u001b(\u0005>\u0003�\fX�eX��&���&���ʧ(\u000f�t\u001b(\n͒\u001b8\n>\u0001���>\u0001�\fX�=\"��&����=!PX�\b\u000f������������)Y \u0005ͮ\u001d\u0018\u0012��\u001d\u0018\r�)Y \u0005�2Y\u0018\u0003�9Y�VX�,\r\u0018\u0007�����h\u001d��&�0XEX\u0017X����\u00140\u0004!�x�!�x�����\u000f�\u0001 \u0007��&8\u000f>\u0001�,\u001d�����\u000f�\u0001 \u0004>\u0005\u0018\u0012�\u0003 \u0004>\u0007\u0018\n�\u0005 \u0004>\u0001\u0018\u0002>\u0003͠\u001dɯ������͐$������6\u0001������������������ͩ\"��\f��X�\u0006Y\u0011\u0000�!��{\"r\u0011\u0003\u0000!��{\"r>\t����������\u0018Y!\u0002K��\fͱ\"���������������������\b��������\b����!����Ⱦ>\u00038\u0002>\u0007��������\u0012��\u0014��@Y�#\"��@Y�0\"�����\u00140\u0007\u0001�\u0010\u0011\u0001\u0000�\u0001��\u0011\u0001\u0000�1���!`Y�\b\u000f�jY�Y�Y�Y�Y>\u0001���>w���>\u0005����\u0011\u000f>\u0001��Y�(Z��C\u001c '͗\u001c \"!��4~�\u00038\u000f����\u000f�,\u001d \u0005>\u0004��Y�UZ(\u0012>\u0003��Y�����������1Z��&���&�!��4~�\n8\u0010�UZ(\u0003�^Z�1Z>\u0001��Y��&���}\u001c(\u0005>\u0001��Y��&�����=! Z�\b\u000f�����ͮ\u001dͮ\u001d\u0018\u0012�1Z!�x�,\r\u0018\u0007�����G\u001d��&�\nZ\u0015Z�Y\u001cZͤ\u001e�>\u0002��Y\u0001��\u0011\u0000\u0000����\u000f�O \u0007�0\"ͮ\u001d��#\"��\u001d�����,\u001d�����\u000f�,\u001d����O����\u000f���y�\u0004˟͠\u001d�1���!~Z�\b\u000f��Z�Z�Z�Z>\u0001�������\u0017>\u0003(\u0002>\u0007���>\u0001����\u0011\u000f>\u0001��Zͤ\u001e \u0005>\u0002��Z�E\u001b(\u0005>\u0003��Z�X[��&���&���ʧ(\u000f�t\u001b(\n͒\u001b8\u0016>\u0001���������������>\u0001��Z�=\"��&����=!4[�\b\u000f������������ȯ�����������\u001d�I[�,\r\u0018\u0012��[�:[�,\r\u0018\u0007�����G\u001d��&�\u001e[)[�Z����\u0017 \u0004!�x�!�x�����\u0017 \u0004!�x�!�x��_[�j[�����\u000f�,\u001d�\u0018H����\u0017��� \u000b�\u000fG���<<�\u0018\u000b���7G���==�W���G����\u000f�\u0001���O \nx���7Gy�\u0018\u0004x�\u000f�_��\u0010�`\u0019�����\u000f�\u0001 \u0004>\u0005\u0018\u0002>\u0001͠\u001d�\u0001�\u0010\u0011\u0001\u0000�0\"�1���!�[�\b\u000f��[\u0001\\\u0018\\\u001c\\:\\������>����>\u0001���>\u0007����\u0011\u000f>\u0001�]\\͵\\�����W \u0005>\u0003�]\\�K]��&���&�͵\\�����W(\u000f������7͠\u001d>\u0001�]\\��&���\\�����\u001e \u0005��\\\u0018\u000f�< \u000b>\u0001������͜\\��&����=!�\\�\b\u000f�>\u0005͠\u001d\u0018\u0007�������ͮ\u001d��\u001d\u0018\u0003͜\\!�x�,\r\u0018\u0007�����h\u001d��&�~\\�\\h\\o\\����\u0019 \b\u0001UU\u0011\u0001\u0000\u0018\u0006\u0001\u0000\u0000\u0011\u0002\u0000�#\"���\\���\u001a�>\u0004�]\\ͤ\u001e \u0005>\u0002�]\\�͐$������6\u0001������������������ͩ\"��\f�/]\u0011\u0000�!��{\"r\u0011\u0003\u0000!��{\"r>\t�������������o>\u0007(\u0002>\u0003���!\u0002K��\fͱ\"��������������������o��� \u0004��\u0018\u0002�������R]�]]�����\u000f�,\u001d�\u00184����\u000fG���<<�_���G����\u000f�\u0007���O \nx���7Gy�\u0018\u0004x�\u000f�W��\u0010�`\u0019����� ����o(\u0004>\u0003\u0018\u0002>\u0007͠\u001d�1���!�]�\b\u000f��]�]�]\u0015^#^>����>\u0001����\u0011\u000f>\u0001�-^�p^�����W \u0005>\u0002�-^�^\u001a \u0003�~_��&��p^�����W(\u0014�����0\u0005>\u0001�-^ͻ^>\u0003�-^�^\u001a \u0003�~_��&��p^��y^͓^��&���&�>\u0002�'�����=![^�\b\u000f�>\u0005͠\u001dͮ\u001d��\u001d\u0018\u0003�c^!(y�,\r\u0018\u0007�����r\u001d��&�=^8^E^P^\u0001\u0000\u0000\u0011\u0002\u0000�#\"��\u001d�Ͳ\u001e�>\u0004�-^����\u000f�,\u001d�����\u000f�\u0007>\u0003(\u0002>\u0007͠\u001d�!��*fo\u0011-\u0000��\u000f \u0004�\t`��\u0011Z\u0000��\u000f��\t`��^��������ͩ\"��\f>\"���!�B��\fͱ\"��͐$������6\u0003�������������������\u000b_�;_� _�\u000b_�S_� _�\u000b_�Z_� _��ͩ\"��\f���������������>\t���������!\u0002K��\fͱ\"�������>\u0001���\u0011\u0000�!��{\"r\u0011\u0003\u0000!��{\"r�>\u0002���\u0018\u0005>\b���\u0011\u0000�!��{\"r!��{\"r\u0011\u0003\u0000!��{\"r!��{\"rɯ������͐$������6\u0002������������������Ͷ_��_��_Ͷ_�\u0000`��_��ͩ\"��\f\u0011\u0000�!��{\"r\u0011\u0003\u0000!��{\"r����\b����>\t���������>\u0005���!\u0002K��\fͱ\"�����������\u0004��������\u0004����͐$������6\u0002�������������������:`�s`�S`�:`̈́`�S`��ͩ\"��\f\u0011\u0000\u0000!��{\"r\u0011\u0004\u0000!��{\"r�>\n���������>\u0001���!\u0003L��\fͱ\"�������������������\u0014����������������\u0014����1���!�`�\b\u000f��`�`\u0000a\u0004a>����>\u0001���>w���>\u0005����\u0011\u000f>\u0003�-a�Ya�͖a(\u0005͠\u001d\u0018 �C\u001c \u001b͗\u001c \u0016����\u00038\n͏a \u0005>\u0003�-a�}\u001c(\n��������na��&���&��Ya�����W(\u001a������7�O \u0002>\u0007͠\u001d>\u0005���>\u0001�-a��&����=!Sa�\b\u000f�>\u0005͠\u001d�na!�{�,\r\u0018\u0007�����h\u001d��&�=aHa8aͤ\u001e \u0005>\u0002�-a��\u001a�͋a>���\u0001\u0000\u0000\u0011\u0001\u0000����\u000f�O \u0007�0\"ͮ\u001d��#\"��\u001d�͜X�����,\u001d�����O����G�������8\b�\u000f�\u0007�>\u0007��\u000f�\u0003�>\u0003�1���!�a�\b\u000f��a�a\u0001b\u0005b>����>\u0001���>W����\u0011\u000f>\u0001�-bͤ\u001e \u0005>\u0002�-b�E\u001b(\u0005>\u0003�-b�\u0002\u001d�sb��&���&���ʧ(\u000f�t\u001b(\n͒\u001b8\u0011>\u0001���͹'����>\u0001�-b�=\"��&����=!mb�\b\u000f�ͬ'����������<���ͮ\u001d��\u001d!�x�,\r\u0018\u0012�sb!�x�,\r\u0018\u0007�����G\u001d��&�Wbbb8b\u0001UU\u0011\u0001\u0000����\u000f�O \u0007�0\"ͮ\u001d��#\"��\u001d�1���!�b�\b\u000f��b�b�b�b>����>�����\u0011\u000f!2y�,\r>\u0001��bͤ\u001e \u0005>\u0003��b����\u00148\b�!c>\u0002��b��&�ͤ\u001e \u0005>\u0003��b����\u00148\b�@c>\u0001��b��&���&�>\u0002�'�����=!\u001bc�\b\u000f�����\u0018\u0007�����r\u001d��&�\nc\nc\u0010c͐$������6\u0002�wc�_c̓c�wc�ec̓c��͐$������6\u0002�wc�kc̓c�wc�qc̓c��>�����>�����>�����>�����ͩ\"��\f�|����\u0011\u0000\u0000!��{\"r\u0011\u0004\u0000!��{\"r>\u000b���������>\u0007���!\u0003L��\fͱ\"�������1���������!�c�\b\u000f��c�c�c>����<���>\u0001���>f���>\u0005����\u0011\u000f>\u0001�\u0003dͤ\u001e \u0005>\u0002�\u0003d��d\u0018\u0000��&���&����=!!d�\b\u000f�!�{�,\r\u0018\u0007�����h\u001d��&�\u000ed\u0016d����\n�͐$������6\u0002��������������������������cd͸d�}d�cd��d�}d��ͩ\"��\f����o��� \u0004��\u0018\u0002������\u0011\u0000�!��{\"r\u0011\u0003\u0000!��{\"r>\t�������������o>\u0007(\u0002>\u0003���!\u0002K��\fͱ\"��������������������\u0003�������� ���������8\u0007����\u0005('����\u000f�\u0002 \u0004>\u0004\u0018\u0012�\u0004 \u0004>\u0002\u0018\n�\u0006 \u0004>\b\u0018\u0002>\u0006͠\u001d>\u0001�������\n(*����\u000f�\u0002 \u0004>\b\u0018\u0012�\u0004 \u0004>\u0006\u0018\n�\u0006 \u0004>\u0004\u0018\u0002>\u0002͠\u001d>\u0001�����d��ȧ�%d�����1���!Pe�\b\u000f�Veme�e>����>\u0001���>\u0007����\u0011\u000f>\u0001Ìeͤ\u001e \u0005>\u0002Ìe����(\u0007����ͻe��&���&����=!�e�\b\u000f�ͱe!�{�,\r\u0018\u0007�����h\u001d��&ɗe�e\u0001UU\u0011\u0001\u0000�#\"�͐$������6\u0003��������������������e�\u001af�\nf��e�&f�\nf��e�/f�\nf��ͩ\"��\f�af>\t����������!\u0002K��\fͱ\"��������;f�Nf>\u0006�����Nf>\u0005�����;f�Nf>\u0004����\u0011\u0000�!��{\"r\u0011\u0003\u0000!��{\"r�\u0011\u0000�!��{\"r\u0011\u0003\u0000!��{\"r�������������o��� \u0004��\u0018\u0002������1���!�f�\b\u000f��f�f�f1g������>����>\u0001���>\u0007�������\u0011\u000f>\u0001�5gͤ\u001e \u0005>\u0003�5g����\u0005 \u0003�~g����\u000fG�\u0007��� \u0004�_\u0018\u0002�O(\u000b>\u0004�˟���͠\u001d����\n \n>\u0005͠\u001d>\u0002�5g��&�ͤ\u001e \u0005>\u0003�5g����W(\b>\u0001͠\u001d͠g���G����(\u00020\u000fx������͠\u001d>\u0001�5g��&���&����=!]g�\b\u000f��cg!�{�,\r\u0018\u0007�����r\u001d���������&�@g@gKg\u0001\u0000\u0000\u0011\u0002\u0000����O \u0007�0\"ͮ\u001d��#\"��\u001d���g͐$������6\u0002��g��g��g��g�\u0000h��g����g͐$������6\u0002��g�\fh��g��g�\u0018h��g���������������ͩ\"��\f�Jh>\t����������!\u0002K��\fͱ\"��������$h�7h>\u0004�����$h�7h>\u0006�����$h�7h>\u0002�����$h�7h>\b����\u0011\u0000�!��{\"r\u0011\u0003\u0000!��{\"r�\u0011\u0000�!��{\"r\u0011\u0003\u0000!��{\"r��������������1���!bh�\b\u000f�lh�h�h�h\u0000i����=���>\u0001���>w����\u0011\u000f>\u0001�Hiͤ\u001e \u0005>\u0002�Hi͖a(\u001cG!��4~�\tx8\u0011͠\u001d���� �������\u0018#����W \bͨi>\u0003�Hiͅj \u000f����\u000f�,\u001d(\u0005>\u0004�Hi��&���&�ͤ\u001e \u0005>\u0002�Hi����W(\u000f������7͠\u001d>\u0001�Hi��&�ͤ\u001e \u0005>\u0002�Hi!������o \u0004�^\u0018\u0002�N (����o \n!��5!��5\u0018\b!��4!��4������7͠\u001d>\u0001�Hi��&����=!�i�\b\u000f�>\u0001͠\u001dͮ\u001d͞i!�{�,\r\u0018\">\u0005͠\u001dͮ\u001d��\u001d\u0018\u0006��\u001d͔i!�{�,\r\u0018\u0007�����r\u001d��&�si�ifiSi\u0001UU\u0011\u0001\u0000�#\"�\u0001UU\u0011\u0001\u0000�0\"�͐$����\u0001�6\u0003����������������\u0000���i�\u0007j��i��i�\u001cj��i��i�.j��i��ͩ\"��\f�ij>\t����\u0001�����!\u0002K��\fͱ\"�\u0001������Cj�Vj����o>\b(\u0002>\u0002�����Cj����o>\u0007(\u0002>\u0003�����Cj�Vj����o>\u0006(\u0002>\u0004����\u0011\u0000�!��{\"r\u0011\u0003\u0000!��{\"r�\u0011\u0000�!��{\"r\u0011\u0003\u0000!��{\"r��\u0000����������o��� \u0004��\u0018\u0002���������G����\u000f�\u0007��� \u000b���7Ox�==\u0018\u0005�\u000f�<<��0\u0002������\u000f�\u0003>\u0007(\u0002>\u0003͠\u001d���� ���>���1�(��\u0004(\t���G���\u0018\u0017����d(\t���G���\u0018\u0007���G����\u0002�x�\u0003����!\u0000k�\b\u000f�\u000ek�k�k\u0002l\u001dl�l\u001dl!��\u0001\u000f\u0000��\n��\u000b��\u0002\u000e!��\u0001\t\u0000�\u0001\u000e�7k�\u0011\u000f��s>\u0001�=n���(��\u0004(\u0017>\u0001���������������>\u0001�������������\u00070\u000e����d(\u0013>\u0001���\u0018\u001c����d(\u0015>\u0001���>����>\u0010���>\u0001����>����>����>!����ͧm��\u0002��0(\u001c�o(\t!����>\u0007\u0018\u0007!��ˮ>\u0003͠\u001d>\u0002�=n�\u000ft��n���1n�ͧm��\u0002��0 \u0005>\u0001�=n��p�\u0003��� \u0006�O(\u000b\u0018\u0004�_(\u0005ͮ\u001d\u0018\u0003�iq�\u000ft��n�����< \r>\u0012ͤ\u000e�\u0010v�yu7�!���Z\t���\u0015u(\u0005>\u0003�=n��\u001e(\u0005>\u0003�=n��m����W(\t�1n�>\u0001�=n��ʧ(\u0005>\u0005�=n����G(\u0003��\u001d�\u0002��G(\u0005��u\u0018$����\u0001�\u001e�(\u0003�\u001fɧ \u0014��u����\u0001>\u0001 \u0005�\u001e�\u0018\u0003�\u001f��\u0002��0(\u001c��p�\u0002�� ���(\u0006�_ \u000b\u0018\u0004�O \u0005�iq\u0018\u0003ͮ\u001d�\u000ft��n���\u0015u(\u0005>\u0003�=n�1n���\u001e(\u0005>\u0003�=n��m \u0005�������m��ʧ \u0005>\u0001�=n�\u000ft�'m�\u001dm͎m�\u0002��0(\u000b��p�:m>\u0002�=n��ɧ \n����\u000f�,\u001d(\u0003�}m��n��!��\u0011��\u000e\b�����\u0007\u0007_\u0016\u0000!t�\u0019~�\u000f͠\u001d��pq!\u0004�y\"p!\u0006�{\"r���\u0007\u0007_\u0016\u0000!t�\u0019~�\u000f�O!��\u0011\u0004�(\u0017G����\u000f�(\u000e�,\u0010�����/�����\t\u0010�����\u000f�O \u0004��\u001d�ͮ\u001d�!��*V_!��{\"r!��*V_!��{\"r��\u0015u(\u0005>\u0003�=n��\u001e(\u0005>\u0003�=n����W \u0010��ʧ \n>\u0005�Oq>\u0006�=n��m���m��ʧ(\u0005>\u0005�=n>����\u0003��G(\u0005>\u0004�=n>����\u0002��O(\u0005͌o\u0018\u0019����\u0001���(\u0003��ʧ(\t͌qĦq�\u0001p�\u0002��w \u0005� \u0005�ͤp���p��ts��is>\u0003�=n������=!\u0002o�\b\u000f��\u001dm�'m\u0018\u0006ͮ\u001d��\u001d!2x�,\r\u0018[>\u0007ͤ\u000e����\u0001 \u0006��\u001e�\u0018\u0004��\u001f�>\u0001͠\u001d͂q\u0018\u001c����\u0001>\u0001 \u0005�\u001e�\u0018\u0003�\u001f�!��5!��5��\u001d����\u0001 \u0006����\u0018\u0004����!7x�,\r\u0018\u0006!<x�,\r��n������\u0001>\u0001 \u0005���\u0018\u0003��ʯ����k\u001d!����\u0012��!����\u0012�\u000eo�/o����\u0001 \u0007��������������Sn�n�nanKn�n����\u0001(\r���������������������������So���O�����\bO\u0006\u0000���_�����\u0010_\u0016\u0000���͘\u000b���s|�(\u0004!q��}!oo�8\u0005###\u0018�#*fo�\u0010I�0N�PS�pXՐ]հb��g��l��q�\u0000\u0006����\u0001 \u0011��ʧ>\n̤\u000e\u0011��!��\u0018\u0006\u0011��!��>\u0001\u0012*�\b�:�\t�\u0011�o�\u000f\u0010#~�@8\u00066@�Yp�O����\u0001�y\u0006\u0000�\b(\u00198\u0017�\b��>\u0000H\u001e\u0000ͼ\u0006!>��S\u0006��\u0004\u0018�!6�_\u0016\u0000\u0019>\u0000H\u001e\u0000ͼ\u0006�S\u0006�����\u0001 \u000f�������������\u0018\r�����������������\u0001�>\u0012ͤ\u000e>\b\u0006\u0000��>\u0000H\u001e\u0000ͼ\u0006!6��S\u0006��\u0004= �>\u0000\u000e\b\u001e\u0000ͼ\u0006!@��S\u0006�����\u0001!��(\u0003!��6\u0001����\u0001�>\u0000\u000e\u0007\u001e\u0000ͼ\u0006!>��S\u0006!\n�4~�\u0003��\u000b��\u0001�\u000bɇ_\u0016\u0000!@�\u0019>\u0000\u000e\b\u001e\u0000ͼ\u0006�S\u0006�\u0000\u0004����\u0001 \b!��*fo\u0018\u0006!��*fo\u0011\u0000@��\u000f�����\u0001!��(\u0003!��\u0011�p�\u000f\u0010�����\u0001!��(\u0003!��*G:��\u0011�p�2\u0010�����\u0001!��(\u0003!�ʯ\"w��\u0002��o(\u0018!��������\u000f�\u00038\"($�\u00078$(\u001e\u0018\u0018!��ˮ����\u000f�\u00038\u0016(\u0018�\u00078\u0018(\u0012\u0018\f>\b\u0018\u0012>\u0007\u0018\u000e>\u0006\u0018\n>\u0002\u0018\u0006>\u0003\u0018\u0002>\u0004͠\u001d�����\u0002>\u0005 \r����\u000f�\u0005>\u00060\u0002>\u0004͠\u001d��pq�#\"�\u0001��\u0011\u0002\u0000���\u000f�\u0001\u0000\u0000\u0011\u0004\u0000����\u0007\u0007\u0007��\u001d�����\u0001���!��(\u0006���!�ʧ(\u0002��<�����\r�����\f�ͩ\"��\f�\u0001r�\r��\u0001>\u0007!��(\u0005>e!������F \u0006��\u0006\u0001\u0018\u0004��\u0006\u0002x����3r�jr�\r��\u0001���(\u0003������!�H��\fͱ\"��\r��\u0001���(\u0003���������\r��\u0001���(\u0003���G�\f��ox \u0004�\u0004\u0018\u0002�\u0004������s\u0011\u0010\u0000��\u000f0\u000f�\f��o \u0004>\u0003\u0018\u001d>\u0007\u0018\u0019\u0011�\u0000��\u000f8\u0004>\u0001\u0018\r�\f��o \u0004>\u0002\u0018\u0002>\b�����tr͐r��r���s|�(\u0004!\u0000\u0001�}!�r�8\u0005###\u0018�#*fo��͟\u0005}�\u000e�|�\u000f����\u0005}�\u0010�|�\u0011��\u0010\u0000\u00000\u001e\u0000P<\u0000pZ\u0000�z\u0000��\u0000��\u0000��\u0000�\u0000\u0001�/\u0000\u0000\u0011�!!\u0012�{\"r\u0011\u0001\u0000!\u0014�{\"r�Ks!\u0012�*V_!\u0012�{\"r!\u0014�*V_!\u0014�{\"r!\u000e�*V_!\u0017�{\"r��\u0016��\u0019��I\u0010!\u001a�*V_!��{\"r!\u001c�*V_!��{\"r!\u0010�*V_!\u0017�{\"r�I\u0010!\u001a�*V_!��{\"r!\u001c�*V_!��{\"r��\r��\u0001���(\u0003����?�!\u0012�\u0011�r�\u0003\u0010�= ���\u000e'>4\"z\"{w����G���O>\u0005�\u0019\u0018����\u0010���\t \u0005ͭs(\u0012z�(\n>\b�W�8�P\u0018�>���z��W{��_��z���\u0016��\u0007�\u0017�����\u0005g�\u000bo�\u0016ɼ8\u0005�8\u000f\u0018\t�\u0017ɼ8\u0003�8\u0004>��ɯ���!|���}���z���{�����\r�\u0018\u0003����\u0001 \b!��*fo\u0018\u0006!��*fo>\u0006��\u0010�!R�\u000e\n~�� t###\r ������H �� �\u0012!��3t���~�\u0018��\u0019�6\u0000#*W�\u001b�~G�\u001a��!$!\u0019��\\t�\u0018��9!\tu�\b\u000f��\u0011N�\u001a��(\u0011�{t\u0013\u0013\u0013(\u0003\u0013\u0018�>\u0002\u0012�\u0018\u0003>�����վ \n#\u0013\u001a� \u0004#\u0013\u001a����!��4>\fͤ\u000e�����\u0014�<8\b�!��4��<����\n&>\fͤ\u000e�\u0011d\u0000\u0018\b\u0011�\u0001\u0018\u0003\u0011�\u000f!,�*fo�\u00190\u0003!��}�,�|�-�MD�!����'>\u0001�.�>\fͤ\u000e�>\u0000\u000e\u000b\u001e\u0001ͼ\u0006!.��S\u0006������\b���>\u000fͤ\u000eɍt�t�t�t�t�t�(��\u0004 \u0013����\u0001���(\u0003��ʧ��'v���ʧ��\u0011 \u0002������\f(4�\u0004G���������>\fͤ\u000e>\u0001�����������\f(\u0002��>\u0000\u000e\u000b\u001e\u0001ͼ\u0006!4��S\u0006��>����(��\u00030\r����\u0001>\u0001 7>\u0003\u00183��ʧ(\u0004>\u0001\u0018)�'ɧ(\u0004>\u0001\u0018\u001f����\u0001(\r����\u0001>\u0002 \u000f>\u0004\u0018\u000b����\u0001>\u0003 \u0002>\u0005�'������\u0001 \u000b�\u001eɧ�!��4\u0018\t�\u001fɧ�!��4~�-���\u001d����\u0001>\u0001 \u0004�\u001e���\u001f������?�������?�������?��������\u0001 \b�������ɯ�����������\u0001 #����G(\u001a!���F \u0013ͣ\u001f�H �\u0012!�����\u0001���ɯ�����G(\u001a!���F \u0013Ϳ\u001f�V �\u0012!�����\u0001���ɯ�1���!v�\b\u000f��v�v�v�v>\u0001����\u000fw������� \u0005�=w7ɷ��;$(\u0017�\u0001 \u0018>\u0003�����#�J\u001d͍\"�������\"(\u0005��#7��V#������ \u0010�J\u001d͍\"����<���\u0018\u0011���< \u000b�J$�j\"�]w7�!���|\u001d�����< \b�J$�]w7�!���|\u001d���/w�����\u000f\u000f\u000fW�����\u000f\u000f\u000fG>\u0000JXͼ\u0006�S\u0006�����9�_\u0016\u0000!(�\u0019�!R�\u000e\u0000~�(\u0006\f###\u0018����\"���\"���\"y�������\u0007\u0007_\u0016\u0000!R�\u0019�\"\"w�1���!yw�\b\u000f�w�w�w������>\u0001����ɷ����� \u0014<�*���w�u\u001d����<���\u0018\u0016���< \u0010͖\u0019��#��w>\u0002�'�7�!���Z\t��� ��\b��\u000f\u000f\u000fG�!��\b��\u000f\u000f\u000fW>\u0000HZͼ\u0006��!\u0019��S\u0006��\u0014>\u0000HZͼ\u0006!\u0019��S\u0006����W� ����_�!���\u0010�\u000f�\u001ax��\u0007��&x�����\b���� ������\b����!���\u0005��\u0012�\u0016��\u0012�\u0005��\u0012�\u0016��'��8�\u0000<x�v��\u0012ć�Ę�ĩ�\u0000Mx\u0006����\u0000\u0000\u0006��\u0000\u0000\u0000\u0000��Ջ\u0017\u0006��UU\u0001\u0000\u0006��\u0000\u0000\u0000\u0000��Ջ\u0017\u0006��\u0000\u0000\u0002\u0000\u0006��\u0000\u0000\u0000\u0000��Ջ\u0017��Ռ\u0013���\u0000�x�\u000f֌\u0013� �\u0000�x�1֌\u0013�6��;��@�\u0000�x�E֌\u0013�E֒\u0017�J֌\u0013�J֒\u0017�O֌\u0013�O֒\u0017�T��\u0012�e��v��\u0000�x����\u0012��֒\u0017����\u0012��֒\u0017��֙\u0017\u0007��\u0001ʧ�\u0007��\u0002Ը����\u0007��\u0003���\u0007��\u0004���\u0000\u0001y����\u0012��֌\u0013\u0006��\u0000\u0000\u0000\u0000\u0013\f�<�\u0013\u0006����\u0000\u0000\u0006��\u0000\u0000\u0000\u0000\u0007��\u0003�\f�\u0006��\u0000\u0000\u0000\u0000\u0014\f�(\u0006����\u0000\u0000\u0007��\u0007�\f�\u00002y\u0006��(\\\u0000\u0000�\u0015׌\u0013\u0006��(\\\u0000\u0000�\"׌\u0013\u0006����\u0000\u0000\u0006��\u0000\u0000\u0000\u0000\u0007��\u0007\u0013'�<�\u0013\u0006��\u0000\u0000\u0000\u0000\u0006����\u0000\u0000\u0007��\u0005�'�\u0006����\u0000\u0000\u0006����\u0000\u0000\u0007��\u0002�'�\u0006����\u0000\u0000\u0006��\u0000\u0000\u0000\u0000\u0007��\u0003\u0014'�x\u0006��\u0000\u0000\u0000\u0000\u0006����\u0000\u0000\u0007��\u0005�'�\u0006����\u0000\u0000\u0006����\u0000\u0000\u0007��\b�'�\u0006����\u0000\u0000\u0006��\u0000\u0000\u0000\u0000\u0007��\u0007\u0014'�<\u0000�y\u0006��\u0000\u0000\u0000\u0000\u0006����\u0001\u0000\u0007��\u0001�`׌\u0013\u0006����\u0001\u0000\u0006��\u0000\u0000\u0000\u0000\u0007��\u0003\u0014`�#\u0006����\u0001\u0000\u0006����\u0001\u0000\u0007��\u0004�`�\u0006����\u0001\u0000\u0006��\u0000\u0000\u0000\u0000\u0007��\u0003\u0014`�#\u0006��\u0000\u0000\u0000\u0000\u0006����\u0001\u0000\u0007��\u0001�`�\u0006����\u0001\u0000\u0006��\u0000\u0000\u0000\u0000\u0007��\u0007\u0014`�#\u0006����\u0001\u0000\u0006����\u0001\u0000\u0007��\u0006�`�\u0006����\u0001\u0000\u0006��\u0000\u0000\u0000\u0000\u0007��\u0007\u0014`�#\u0000#z\u0006����\u0001\u0000\u0006��\u0000\u0000\u0000\u0000\u0007��\u0007\u0013`�#�\u0013\u0006����\u0001\u0000\u0006����\u0001\u0000\u0007��\u0006�`�\u0006����\u0001\u0000\u0006��\u0000\u0000\u0000\u0000\u0007��\u0007\u0014`�#\u0006��\u0000\u0000\u0000\u0000\u0006����\u0001\u0000\u0007��\u0001�`�\u0006����\u0001\u0000\u0006��\u0000\u0000\u0000\u0000\u0007��\u0003\u0014`�#\u0006����\u0001\u0000\u0006����\u0001\u0000\u0007��\u0004�`�\u0006����\u0001\u0000\u0006��\u0000\u0000\u0000\u0000\u0007��\u0003\u0014`�#\u0006��\u0000\u0000\u0000\u0000\u0006����\u0001\u0000\u0007��\u0001�`�\u0000�z��Ռ\u0013���\u0000�{\u0006��\u0000\u0000\u0002\u0000\u0006��\u0000\u0000\u0002\u0000�i׌\u0013\u0007��\u0007�z׌\u0013\u0007��\u0001�z�\u0007��\u0001�z�\u0007��\u0001�z�\u0001 \u0007��\u0003�z�\u0007��\u0001�z�\u0007��\u0001�z�\u0007��\u0001�z�\u0002 \u0000�{��׌\u0013����\u0012���\u0000�{��׌\u0013°�\u0000�{�#؝\u0017�(��-��2�\u0007����2�\b\r�7؝\u0017�H��Y��j�\u0007����j�\u0004��\b\u0011�7؝\u0017�H��Y��j�\u0004\u0004\u0005�7�\b\u0011�H��Y��j�\u0004���7��H��Y�\b\u0011�j�\u0004\u0006��7��H�\b\u0011�Y��j�\u0004�\u0003�7��H��Y��j�\b\u0010\u0007����j��{��\u0012����\u0012��،\u0013��،\u0013��،\u0013��،\u0013\u0007��\u0001��؝\u0017���\u0007��\u0002������\u0007��\u0003����\u0002�����\u0002�����\u0002�����\u0002�����\u0002�\u0007��\u0004������\u0007��\u0005¾����\u0007��\u0006¾�\u0000�|\u0007��\u0001����\u000f�\u0007��\u0002����\u0014�\u0007��\u0003����\u001d�����\u001d�����\u001d�����\u001d�����\u001d�\u0007��\u0004����\u0014�\u0007��\u0005����\u000f�\u0007��\u0006���\u0000�|\u0007��\u0001�*ٝ\u0017�`�\u0007��\u0002�/��e�\u0007��\u0003�8��n��8��n��8��n��8��n��8��n�\u0007��\u0004�/��e�\u0007��\u0005�*��`�\u0007��\u0006�*�\u0000Q}\u0007��\u0001�Eٝ\u0017�{�\u0007��\u0002�J��\u0007��\u0003�S���S���S���S���S��\u0007��\u0004�J��\u0007��\u0005�E��{�\u0007��\u0006�E�\u0000�}\u0007��\u0001\b\r�#؝\u0017�(��-��2�\u0007��\u0002\u0004\n�\b\r�#��(��-��2�\u0007��\u0003\u0004�\u0005\b\r�#��(��-��2�\u0007��\u0004\u0004\u0007�\b\r�#��(��-��2�\u0007��\u0005\u0004\u0005\f\b\r�#��(��-��2�\u0007��\u0006\u0004\u0002�\b\r�#��(��-��2�\u0007��\u0007\u0004��\b\r�#��(��-��2�\u0007��\b\u0004\u0005\f\b\r�#��(��-��2�\u0007��\t\u0004\u0005�\b\r�#��(��-��2�\u0007��\n\u0004�\f\b\r�#��(��-��2�\u0007��\u000b\u0004��\b\r�#��(��-��2�\u0007��\f\u0004\n\n\b\r�#��(��-��2�\u0007��\r\u0004��\b\r�#��(��-��2�\u0007��\u000e\u0004�\u0007\b\r�#��(��-��2�\u0007��\u000f\u0004\u000e\u0000\b\r�#��(��-��2�\u0007��\u0010\u0004�\u0005\b\r�#��(��-��2�\u0007��\u0000Ϩ�\u0000�}\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f \u0000\u0000\u0000�\u0004\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0004\u0000\u0000\u0000�\u0004\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\b\u0000�\u000f\u0001\u0002��\u0000\u0001;�\u0010\u0014\u0010\u0000\u0000\u0000�uu\u0019\u0004\u0004u�u\u0004\u0004\u0001\u0000�\u0000\u0004\u0004�\u0001\u0001�\u0004\u0004\u0000\u0000`\u0004\u0004\f\u0000\u0000\u0003\u0004\u0004�uu\u0004\u0000\u0000\u0001\u0005�\u0006\u0000\u0000\u0004\u0004`\u0000\u0000\u001e\u0007\b\u0000\u0000�\u0001\u0001\u0004\u0000\u0000\u0003\u0004\u0004F\u0000\u0004\u0001�\u0000\u0000\u0000�uu\u0001\u0000\u0000\u0000\u000f\u0004\u0004\u0002\u0000�\u0000\u0000�\u0004\u0004\u0000\u0000\u0005\u0004\u0000\n\u0004\u0000\u0002\u0004�\u0000\u0001\u0004@\u0000\u0000\u0000P\u0004\u0000\u0000\u0007\u0004\u0004\u0000�\u0000\u0004\u0004\u0000\u0000\u0002\u0010\b\u0000�\u000f\u0002\u0002�p\u0000\u0016΄\u0000\u0002:�8=�\u0018\u0014\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0005\u0006\u0001\u0000\u0000�\u0004\u0000\u000f\u0004\u0007\b\u0001�\u0004\u0000\u0000\u0004\u0000\u0000�\u0004\u0004\u0000\u0000\u0000\fuu�\u0004\u0000\u0000\u0000�uu\u0004\u0000\u0000x\u0004\u0004\u0000\u0000\f\u0004\u0004t\u0000\u0000\u0004\u0000�\u0004\u0000\u0000\u0000\u0000\u0014\u0001\u0000�\u0004\u0000\u0001\u0001@\u0000�\u0004\u0000\u0014\u0001\u0000Q\u0004\u0000\u0004A\u0000\u0002�\u0004\u0000\u0000\u0018\u0004\u0004�\u0000\u0000\u0004\u0004\u0000\u0000\u0003\u0004\u0004\u0006\u0000\u0000�\u0004\u0004\u0000\u0000�\u0004\u0004uu�\u0004\u0004\u0000\u0006\u0010\u0005��\u000f\u0003\u0019�8\u0007\u0019�x\u0016\u0013�(%\u0001<�\u0018\u0014\u0010\u0000\u0000\u0000�\u0004\u0004`\u0000\u0000\u0000f\u0004\u0004\u0000\u0000\u0000�\u0003\u0003\u0000\u0000\u0005\u0006�\u0004\u0000\u0000\u000f\u0004\u0004\u0000\u0000>\u0007\b\u0004\u0000\u0000\u0000�\u0003\u0003\u0000\u0000\u0004\u0004`\u0000\u0000\u000f\u0004\u0004\u0000\u0000\u0000\u0000�\u0003\u0003\u0000\u0000\u0000\u000f\u0004\u0004\u0000\u00000\u0004\u0004�\u0000\u0000�\u0003\u0003\u0000\u0000\u0004\u0004�\u0000\u0000\u000f\u0004\u0004\u0000\u0000�\u0004\u0004\u0000\u0000�\u0001\u0004\u0004\u0000\u0000\u0004&\u0004\u0000\u0000\n\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004E\u0000\u0004\u0000\u0000\u0014\u0004\u0000`\u0004\u0004\u0000\u0000\u0000\u0003\u0010\u0005��\u0007\u0001\u0002�8\u0000\u0002;�\u0010;�p\u0014\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0004\u0000\u000e\u0003\u0000\u0000]\u0004\u0000uu\u0004�\u0000\u0000�\u0003\u0000�\u0004\u0004\u0000\u0000\n\u0001\u0000\u000f\u0004\u0005\u0006\u0004�\u0000\u0000�\u0001\u0000�\u0004\u0007\b\u0000\u0000\u000e\u0001\u0004\u0004l\u0000\u0000\u0004\u0004\u0001\u0000�\u0001\u0000\u0015\u0004\u0000\u0004J\u0000\u0001\u0000\u0000\u0000�\u0002\u0000\u0000\u0000\u0014\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\t\u0004\t�\u0004\t\u0004\t�\u0004\t\u0004\u0004\u0000\u0000\u001a\u001e\u0004\u0000�\u0017\u0003\u0015�(\u0016\u001eT�\u000f\u0006��-\u0000\u0014\u001e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004@\u0000\u0000\u0014\u0004\u0000\u0000\u0001\u0004@\u0000\u0000\u0014\u0004\u0000\u0000\u0001\u0004@\u0000\u0000\u0014\u0004\u0000\u0000\u0001\u0004@\u0000\u0000\u0014\u0004\u0000\u0000\u0001\u0004@\u0000\u0000\u0014\u0004\u0000\u0000\u0000\u0000\u0001\u0004�\u0004\u0000\u0005\u0006\u0000\u0000\u0000\u000f\u0004\u0004\u0007\b�\u0000\u0000\u0000l\u0004\u0004\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\n\u0004\u0000\u0000\u0000�\u0004\u0000\u0000\n\u0004\u0000\u0000\u0000�\u0004\u0000\u0000\n\u0004\u0000\u0000\u0000�\u0004\u0000\u0000\n\u0004\u0000\u0000\u0000�\u0004\u0000\u0018\t\t\f\u0004\u0004\u0000\u0000\u0010\u0016\b\u0000�O\u0002\u001a�P\u000f\u001a�P-\u0002:�@;�P\u0014\u0016\u0000\u0000\u0000\u0000\u0000\u0000\f\u0004\u0004`\u0000\u0000\u0000�\u0004\u0005\u0006\u0003\u0002\u0002\u0000�\u0000\u000f\u0004\u0007\b\u0001�\u0004\u0000\u0000�\u0002\u0002\u0004\u0004\u0000\u0004�\u0001\u0004\u0002\u0004\u0000�\u0004\u0000\u0000\n\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0004\u0000\u0004R\u0001\u0004\u0000�\u0004\u0002\u0002\u0000\u0000\u0005\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001d\u0004\u0004\u0000\u0004*\u0001\u0004\u0000�\u0004\u0000\u0000\u0002\u0002�\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0004\u0000\u0004\u0002\u0000�\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0004\u0004\u0003\u0000\u0000\f\u0004\u0004\u0000\u0000\u0015\u0010\u0004\u0000�\u000f\u0002\u0016�\\\u0000\u0016�L\u0000\u0002>�\u0000;�P\u0014\u0010\u0000\u0000\u0000�\u0004\u0004�\u0000\u0000|\u0003\u0004\u0004\u0002\u0002\f\u0000\u0000\u0007\u0003\u0005\u0006�\u0001\u0001\u0000�\u0000|\u0001\u0007\b\u0004\u0004\u0018\u0000\u0000%\u0004\u0003\u0004�\u0002\u0002\u0000�\u0000�\u0003\u0002\u0000\u0000\u0001\u00010\u0000\u0000\u000f\u0003\u0004\u0000\u0000�\u0004\u0004\u0000\u0000\u0015\u0004\u0000\u0004�\u0003\u0000\u0000\u0002\u00020\u0000\u0000\u001e\u0003\u0003\u0000\u0000�\u0001\u0001\u0000\u0000\u000b\u0004\u0000\u0003�\u0002\u0000\u0000\u0004\u0004j\u0000\u0000\u0004\u0000\u0014\u0003\u0000\u0000\u0003\u0003\u0003�\u0000\u0000\u0005\u0004\u0000<\u0003\u0002\u0000\u0000\u0005\u0004\u0000\u0002\u0003�\u0000\f\u0002\u0002\u0018\u0000\u0000\u0000\u0000\f\u0004\u0004\u0000\u0000\u0018\u0010\u0006\u0000��\u0003\u0005�\u0018%\u0005�0\u0007\u0016�\u001c\u0000\u00019�P\u0014\u0010\u0000\u0000\u0000�\u0004\u0004\u0000\u0006\u0000\u0000\f\u0004\u0004\u0000`\u0000\u0000h\u0004\u0003\u0004\u0006\u0000\u0000\u0003\u0001\u0004�\u0003\u0004`\u0000\u0000;\u0001\u0004\u0003\u0004\u0003F\u0004\u0000\u0000g\u0004\u0004\u0000\u0002\u0004�\u0003\u0000\u0000\u0002\u0004\u00041\u0000\u0000\u0003�\u0004\u0004\u0005\u0006\u0001\u0000\u0000\u0002�\u0004\u0004\u0000\u0000\u001f\u0003\u0004\u0004\u0007\b�\u0001\u0004\u0000\u0000\u0004\u0004�\u0000\u0000\u0003�\u0004\u0004\u0003\u0002\u0000\u0000�\u0004\u0004\u0000\u0000\u0016\u0002\u0000\u0002�\u0000\u0002\u0004\u0000\u0014\u0004\u0000(\u0003\u0000�\u0004\u00003\u0004\u0004\u0002\u0000�\u0004\u0004\u0000\u0000\u0000(\u0004\u0000\u0000\u0000\u0000\u0000\u0000\f\u0004\u0004\u0000\u0000\t\u0016\u0005_�_\u0001\u0003�P\u0000\u0001:�(\u0014\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0004\u0004�\u0002\u0000\u0000\u0004\u0000\u0003\u0004\u0004\u001b\u0002\u0002\u0000\u0000\u0000l\u0004\u0004\u0000\u0000�\u0002\u0002\u0004\u0000\u0000\u0007\u0004\u0004\u0000�\u0000\u0004\u0004\u0000�\u0000x\u0004\u0004\u0000\u0000x\u0001\u0001\u0000\u0000\u0007\u0004\u0001\u0001�\u0000\u0000\u0001\u0001\u0000�\u0000<\u0002\u0001\u0004\u00048\u0001\u0000\u0000\u0001\u0004�\u0004\u0000�\u0000\u0004\u0000\u0000x\u0004\u0004\u0000\u0000\u0005\t\u0000\u0007\u0004\u0004\u0000�\u0000{\u0004\u0004\u0000\u0000\u0005\u0006�\u0000\u0004\u0004\u0000\u0000\u0004\u0000\u0006\u0004\u0004�\u0000\u0000\u0007\b\u0004\u0004\u0000�\u00000\u0004\u00040\u0000\u0000\u0001\u0004�\u0004\u0000\u0000\u0000\u0000\f\u0004\u0004�\u0000\u0000\u0004\u0004�\u0000\u0000�uu\u0000\u0000<\u0004\u0004\u0000\u0000\f\u0004\u0004�\t\t�\u0000\u0000�uu\u0004\u0004\u0000\u0000\n\u0010\u0014\u0000�\u000f\u0001#�P\u0000\u0000\u0014\u0010\u0000\u0000\u0000�\u0004\u0004uu\u0003�`abc\u0003uu�\u0004\u0004uu\u001f\u0004defg�\u0004uu�\u0004\u0004uu\u0003�\u0000hi\u0000\u0003uu�\u0004\u0004\u001f\u0000\u0000jk\u0000�\u0000\u0004\u0004\u0001\u0000�\u0000\u0004\u0004\u0006\u0000\u0000<\u0004\u0002\u0000\u0000�\u0002\u0004\u0000\u0000\u0004�\u0004\u0000\u0000\u0004\u0002�\u0000\u0000\u0002\u0004\u0000\u0000\u001e\u0004\u0004\u0000\u0000<\u0004\u0002\u0000\u0000�\u0002\u0004\u0000\u0000\u0004�\u0004\u0000\u0000\u0000\u001e\u0004\u0004\u0000\u0000\u0000\u0001\u0004�\u0004\u0000\u0000\u0000\u001e\u0004\u0004\u0000\u0000P\u0004\u0000)\u0004\u0000\u0004�\u0004\u0000\u0000\u0000\u001e\u0004\u0004\u0000\u0000\u0000\u0001\u0004�\u0004\u0002\u0002\u0000\u0018\u0004\u0004\u0018\u0003\u0003`\u0004\u0004\u000f\u0010\u0005\u0000�\u0004\u0016�,\u0000\u0016�\f\u0000\u0016�\u001c\u0000\u001aȈ4\u0001>�(\u0014\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000v\u0001\u0004\u0004\u0000\u0000\u0000\u0007\u0001\u0005\u0006�\u0004\u0000\u0000\u0000~\u0001\u0007\b\u0004\u0000\u0000\u0000G\u0004\u0002\u0004\u0004`\u0000\u0000\u0000\n\u0004\u0000\u0000�\u0004\u0004\u0000\u0004`\u0000\u0000\f\u0004\u0004`\u0000\u0000\u0000\u0000\u0000\u0000\f\u0004\u0004(\u0000\u0004\u001c\u0000\u0000\u0004�\u0004\f\u0000\u0000\u0000\u0006\u0004\u0004�\u0000\u0000\u0000`\u0004\u0004\u0000\u0000\b\u001e\b\u0000�O\u0003\u0012`P<\u0013� \u001e\u0013��\u000f\u0001=�H\u0014\u001e\u0000\u0000\u0000�\u0004\u0004�\u0003\u0003\u0004\u0004\fuuo\u0004\u0004\u0003\u0005\u0006\u0003�\u0004\u0004uu�\u0004\u0004\u0000\u0000\u0004�\u0003\u0007\b\u0003\u0000\u0004\u0000?\u0004\u0004\u0003\u0003\u0000\u0000\u000f\u0003\u0002\u0004\u0003�\u0000\u0000\u0003\u0003�\u0004\u0004\u0002\u0002\u0004\u0004�\u0002\u0002\u0004\u0004�\u0002\u0002\u0004\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0004\u0004�\u0000\u0000\f\u0004\u00040\u0000\u0000\u00003\u0004\u0004\u0000\u0000\u0000\u0003\u0004\u0004`\u0000\u0000x\t\t\u0000\u0000\u001e\u0004\u0004\u0000\u0000\u0007\t\t\u0000�\u0000\u0004�\u0004\u0000\u0000x\t\t\u0000\u0000\u001e\u0004\u0004\u0000\u0000\u0007\t\t\u0000�\u0000\u0004�\u0004\u0000\u0000x\t\t\u0000\u0000;\u0004\u0004u\u0000\u0000\u0007\t\t\u0000�\u0000\u0004uX\u0004\u0000\u0000x\u0004\u0004\u0000\u0000l\u0004\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0004\u0004\u0001\u0000�\u00000\u0004\u00040\u0000\u0000\u0000�\u0004\u0004\u0000\u0000\u0001\u0002@\u0000\n\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0004\u0004\u0000\u0000\u0011\u0010\u0004\u0000�\u000f\u0004\u001f�<\u0000\u0017�d\u0000\u001d�L\u001e\u001d�t\u000f\u0001;� \u0014\u0010\u0000\u0000\u0000�\u0004\u0004\u0001\u0004\u0000\u0006\u0000\u0000�\u0001\u0000\u0004\u0000\u0001\u0004�\u0004\u0000\u0000\u0001\u0000�\u0004\u0000\u001e\u0004\u0004\u0000\u0000�\u0004\u0000\u0004\u0000\u0001\u0004�\u0004\u0000\u0000\u0004\u0000�\u0004\u0000\u0004\u0004�\u0000\u0000\u0004\u0004\u0000\u0000\n\u0004\u0000Q\u0004\u0000\u0004�\u0004\u0000\u0000\u0004\u0000�\u0004\u0000\u0004\u0000\u001e\u0004\u0004\u0000\u0000�\u0004\u0000\u0004\u0000Q\u0004\u0000\u0004�\u0004\u0000\u0000\u0004\u0004\u0000\u0000�\u0004\u0000\u0004\u0000f\u0004\u0004\u0000\u0000�\u0004\u0000\u0004\u0000U\u0004\u0000\u0001\u0000�\u0004\u0000\u0004\u0000�\u0004\u0000\u0004\u0000Z\u0001\u0000\u0004\u0000\n\u0004\u0000U\u0004\u0000\u0001\u0000�\u0004\u0000\u0004\u0000\u0004�\u0004\u0000\u0000\u0004\u0004:\u0000\u0000\u0004\u0000�\u0004\u0000|\u0004\u0005\u0006\u0000\u0000�\u0004\u0000\u0004\u0000\u0007\u0004\u0007\b�\u0000\u0000\u0004\u0004\u0000\u0000\u001b\u0010\u0006\u0000�_\u0004\u0006� \u000f\u0016֌\u0000\u0016�|\u0000\u0016��\u0000\u00019�\u0010\u0014\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0003\u0000\u0000\u0005\u0001\u0000\u0000\u0000V\u0003\u0000\u0004\u0004�\u0002\u0004\u0000\u0000�\u0004\u0004\u0003\u0004;\u0000\u0000\u0002\u0000\u0004@\u0000U\u0002\u0000\u0004\u0000\u0014\u0004\u0000\u0005\u0003\u0000E\u0004\u0000\u0004F\u0000\u0004\u0004]\u0003\u0000\u0000\u0004\u0000D\u0004\u0000U\u0004\u0000\u0001\u0000Q\u0004\u0000\u0004E\u0000\u0004\u0000T\u0003\u0000\u0004T\u0000\u0004\u0000W\u0004\u0000\u0001\u0004\u00044\u0000\u0000\u0004E\u0000\u0004\u0000�\u0004\u0003\u0000\u0000\u0002\u0003\u0004�\u0000\u0000\u0004\t\tu\u0004\u0000\u0000\u0002\u0000\u0004\u0002\u0005\u0006\u0000\u0000\u0004�\t\t\u0004\u0000\u0000\u0005\u0004\u0007�\b\u0000\u0000\u0004\u0004\u0000\u0000\u001d\u0010\b\u0000�O\u0004!�@\u0000\u001f�\\\u0000\u001f�|\u0000\u0006�(\u0000\u0000\u0014\u0010\u0000\u0000\u0000�\u0004\u00048\u0003\u0000\u0000�\u0004\u0004\u0000\u0001�\u0000\u0003�\u0000\u0004\u0004~\u0000\u0002\u0003\u0000\u0000\u0003�\u0000\u0003\u0000�uu\u0000\u0000\u0003�\u0004\u0004\u0002\u0004\u0003\u0000�\u0000\u0004\u0004�\u0000\u0000\u0003\u0004\u0000\u0000<\u0002\u0004\u0000\u0000�\u0003\u0003\u0004\u0004\u0000\u0003�\u0004\u0000\u0000\f\u0004\u0004~\u0005\u0006\u0003\u0004\u0000\u0000\u0000�uu\u0004\u0007\b\u0003�\u0004\u0000\u0000\f\u0004\u0004\u001e\u0002\u0002\u0000\u0000\u0000�\u0004\u0004�\u0000\u0000\u0006\u0004\u0004�uu\u0000\u0000\u0000luu\u0004\u0004�\u0000\u0000\u0006\u0004\u0004�uu\u0000\u0000\u0000l\u0003\u0003\u0004\u0004�\u0000\u0000\u0006\u0004\u0004�uu\u0000\u0000\u0000luu\u0004\u0004\u0000\u0000\u000e\u0014\u0006\u0000�O\u0002\u001d�\u001c\u0000\u001e��\u001e\u00019��\u0014\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0002\u0000\u0000\u0000<\u0004\u0004\u0000\u0000�\u0004\u0004\u0000\u0000\u0005\u0004\u0000\u0002\u0004�\u0000�\u0004\u0000\u0014\u0004\u0000\u0016\u0004\u0000\u0004�\u0000\u0004\u0000�\u0004\u0000\u0004_\u0000\u0004\u0004\u0000\u0000\u0004�\u0004\u0000\u0000\u0004\u0000)\u0004\u0000\u0004�\u0004\u0000\u0000\u0004\u0004\u0000\u0000R\u0004\u0000\u0004�\u0000\u0004\u0004\u0000\u0000\u0004�\u0004\u0000\u0000\u0004\u0000(\u0004\u0000\u0000R\u0004\u0000\u0004�\u0000\u0002\u0002\u0000\u0000}\u0002\u0002\u0000\u0000\u0004\u0000\u0014\u0004\u0000\u0000�\u0004\u0000\u0004K\u0000\u0004\u0000\u0004J\u0000\u0004\u0000\n\u0004\u0000y\u0002\u0004\u0000\u0000\u0004@\u0000P\u0004\u0000(\u0004\u0000\u000f\u0001\u0001\u0004\u0004�\u0000\u0000\u0002\u0002\u0001\u0001�\u0000\u0000\u0001�\u0001\u0002\u0005\u0006\u0004\u0004�\u0000\u0000\u0002\u0001\u0001\u0000\u0000?\u0001\u0001\u0002\u0000\u0007\b�\u0000\u0000\u0002�\u0001\u0001\u0000\u0000\u0004\u0004\u0000\u0000\u0016\u0010\u0004\u0000�\u0017\u0003 �H\u0000\u0005��\u0000!�0\u0000\u0000\u0014\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000a\u0004\u0004\u0000�\u0000\u0003\u0004\u0004\u0018\u0000\u0000\u0015\u0004\u0000\u0004�\u0004\u0005\u0006\u0004\u0004\u0000�\u0000\u000f\u0004\u0007\b\u0004�\u0004\u0000\u0000\u0000�\u0004\u0004\u0000�\u0000\u0000�\u0004\u0004\u0000\u0000\u0000\r\u0004\u0004\u0000�\u0000\u0004\u0000\u0000�\u0004\u0004\u0000\u0000\u0000\r\u0004\u0004\u0000�\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\n\u0001\u0000\u0000\u0000�\u0001\u0000\u0004\u0004\u0000\u0000\u0007\u001e\b'�g\u0003\u0012�(\u000f\u0016�L\u0000\u0016^|\u0000\u0000\u0014\u001e\u0000\u0000\u0000\u0000�\u0003\u0000\u0003\u0004\u0004\u000e\u0003\u0000\u0000\u0000(\u0004\u0000�\u0003\u0000\u0002\u0004�\u0000\u0002\u0000\u0000-\u0004\u0000\u0004\u0000a\u0004\u0004\u0000�\u0000\u0004�\u0000\u0004\u0000\u0005\u0006\u0004�\u0000\u0000\u0004\u0004\u0000\u0000*\u0004\u0000\u0004�\u0000\u0007\b\u0004\u0000\u0000\u0002\u0004�\u0000\u0004\u0004\u0002�\u0000\u0000\u0003|\u0000\u0004\u0004\u0000\u0000\u0000\u0014\u0002\u0000\u0000x\u0004\u0004\u0000\u0000\u0000\u0006\u0004\u0004`\u0000\u0000\u0005\u0004\u0000�\u0004\u0004\u0000\u0004\u0002\u0000�\u0000�\u0004\u0001\u0000\u0000\u0004\u0004\u0000\u0000y\u0004\u0002\u0000\u0000\u0004�\u0004\u0000\u0000\u0002\u0004�\u0004\u0000\u0000\u0004\u0004\u0000\u00009\t\u0004\u0004\u0000�\u0000\u0004\u0004\u0000s\u0004\u0000\u0000\u0004\u0004�\u0000\u0004\u0000\u0000f\u0004\u0004\u0000\u0000}\t\u0004\u0004\u0000\u0000\u0004�\u0004\u0000\u0000\u0004�\u0004\u0000\u0000\u0004\u0004\u0000�\u0000\u0004\u0004\u0000\u0000\u0000e\u0004\u0004\u0000\u0004�\u0000\u0000\u0004\u0004\u0000\u0000\u0015\u0004\u0000\u0004�\u0004\u0000\u0000\u0004�\u0004\u0000\u0000\u0004�\u0000\u0004\u0004\u0000�\u0000\u0004\u0004\u0000\u0004`\u0000\u0000\u0003\u0004\u0004�\u0000\u0000\u0004\u0004\u0000\u0000\u0000{\u0004\u0004\u0000\u0000\u0004\u0004�\u0000\u0000\u0006\u0004\u0004\\\u0000\u0004\u0000\u0000\u0000\u0019\u0004\u0004\u0000�\u0000\u0000x\u0004\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0004\u0004\u0000\u0000\u0017\u001e\u0004\u0000��\u0004\u0005(�\u0000\u001fd4\u0000\u001f�l\u0000\u001f�L\u0000\u0000\u0014\u001e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0004\u0004�\u0000\u0000\u0000\u0014\u0004\u0000\u0000\u0001\u0004@\u0000\u0000\u0014\u0004\u0000\u0000\u0001\u0004@\u0000\u0000\u0014\u0004\u0000\u0000\u0001\u0004�\u0004\u0000\u0000\u0004\u0004\u0000�\u0000\u0014\u0004\u0000(\u0004\u0000\u0001\u0004@\u0000\u0001\t�\t\u0004\u0004\u0000\u0000\u00000\u0004\u0004�\u0000\u0000\u0004\u0004\u0000\u0000\u0001\u0004�\u0003\u0005\u0006\u0004\u0000\u0000\u0004\u0004�\u0000\u0000\u000f\u0003\u0007\b\u0004�\u0000\u0000\u0000�\u0003\u0004\u0004\u0000\u0000(\u0004\u0000\u001c\u0004\u0002\u0001�\u0000\u0000\u0004\u0004\u0000�\u0000\u0004�\u0003\u0004\u0000\u0000x\u0004\u0004\u0000\u0000\u000f\u0002\u0004\u0000\u0000\r\u0004\u0004\u0000�\u0000�\u0004\u0004\u0000\u0000�\u0004\u0004\u0000\u0000\n\u0004\u00001\u0004\u0004\u0000�\u0000\u0004\u0004g\u0000\u0000\u0004\u0004\u0000�\u0000\u0014\u0004\u0000*\u0004\u0000\u0001�\u0000\u0004B\u0000\u0004�\u0000\u0001\u0000�\t\t\u0004\u0000\u0000*\u0004\u0000\u0001�\u0000\u0004\u0004�\u0000\u0000\u0004�\u0000\u0001\u0000�\u0004\u0004\u0000\u0000z\u0004\u0004\u0000\u0000\u0001�\u0000\u0004\u0004�\u0000\u0000(\u0001\u0000�\u0004\u0004\u0000\u0000\u0002\u0001�\u0000\u0004\u0004\u0000\u0000\u0014\u0010\u0014\u0000�\u000f\u0003$�t\u0000&�`\u001e'�`\u0000\u0000\u0014\u0010\u0000\u0000\u0000�\u0004\u0004\u0000\f\u0000\u0000\u0005\u0001\u0000^\u0002\u0000\u0004tt�\u0000\u0000U\u0001\u0000\u0002\u0000�\u0004uu\u0000\u0000\u0005\u0002\u0001\\\u0004\u0000\u0004\u0004�\u0000\u0000\u0000�duu\u0002\u0000\u0000\u0000\u000fduu\u0002�\u0000\u0000Q\u0004\u0000l�m\u0004\u0004\u0000\u0000\u0000\u001fnouu\u0002�\u0000\u0000\u0001p�quu\u0002\u0000\u0000P\u0004\u0000\u001ers\u0004\u0004�\u0000\u0000\u0000�duu\u0002\u0000\u0000\u0000\u000fduu\u0002�\u0000\u0000P\u0004\u0000�\u0004\u0004\u0000\u0000\u0000\u001e\u0004\u0004uu�\u0000\u0000\u0003\u0004\u0004ltt\u0004\u0004\u0000\u0000\u001c\u0010\u0004\u0000�\u001f\u0004\u0006�0-\u0006�x\u0016\u0006�P\u0007\u001b�|\u0000\u0000\u0014\u0010\u0000\u0000\u0000\u0000�\u0004\u0001\u0004\u0003\u0000\u0000\u0002\u0004�\u0000\u0003\u0005\u0006�\u0001\u0000\u0000�\u0004\u0000~\u0002\u0007\b\u0004\u0000\u0000'\u0004\u0004\u0000\u0000�\u0004\u0000\u0004\u0004`\u0000\u0000�\u0004\u0004\u0000\u0000\u0000�\u0004\u0000\u0004\u0004�\u0000\u0000\u0004\u0000\u0003\u0004\u0004\u0006\u0000\u0000\u0002\u0004�\u0000\u0004\u0004t\u0000\u0000\u0004\u0000\f\u0004\u0004\f\u0000\u0000\u0005\u0004\u0000�\u0004\u0004\u0000\u0000P\u0004\u0000\u0006\u0004\u00040\u0000\u0000\u0001\u0004r\u0000\u0004\u0004\u0000@\u0000\u0001\u0004�\u0004\u0000\u0000\u0000K\u0004\u0004\u0000\u0000\u0000\u0001\u0004�\u0004\u0000\u0000\u0000\u0018\u0004\u0004\u0000\u0000\f\u0010\b\u0000�W\u0001\u0012�\u0018\u0000\u00019�\b\u0014\u0010\u0000\u0000\u0000�\u0004\u0004\u0000\f\u0000\u00003\u0004\u0004\u0005\u0006�\u0004\u0001\u0000\u0000\u0003\u0004\u0004=\u0007\b\u0000\u0003\u0000\u00004\u0004\u0001\u0004X\u0003\u0000\u0000\u0001\u0003G\u0000\u0002\u0004\u0000�\u0000\u001c\u0002\u0004\u0004\u0018\u0000\u0000\u0003\u0004\u0004`\u0000\u0000\u00006\u0004\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0004\u0000\u0002\u0004�\u0000\u0000\u0000\n\u0004\u0000\u0000\u0000�\t\t\u0000\f\u0004\u0004\u0000\u0000\r\u0010\u0006\u0000�\u0007\u0003\u001b�<\u000f\u001c�D\u001e\u001c�<-\u0001>�x\u0014\u0010\u0000\u0000\u0000�\u0004\u0004\u0000�\u0003\u0004\u0000\u0000\u0004�\u0004*\u0000\u0003\u0004�\u0000\u0000\u0003\u0001\u0001�\u0003\u0004\u0004\u0000\u0000\u0006\u0002\u0003�\u0000\u0000\u0001\u0001\u0003\u0005\u0006\u0004�\u0000\u0000\u0004\u0004\u0000\u0000o\u0004\u0003\u0000\u0000\u0004\u0004�\u0003\u0007\b\u0004\u0000\u0000\u0004�\u0004\u0003�\u0004\u0003\u0004�\u0000\u0000)\u0003\u0000\u0004�\u0003\u0000\u0000\u0002\u0002�\u0000\u0004\u0001\u0000\u0000\u0000(\u0002\u0000�\u0002\u0000\u0002\u0002�\u0000�\u0004\u0004\u0003\u0000\u0000\f\u0004\u0004\u001b\u0000\u0000\u0004\u0004\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0004\u0000P\u0004\u0000\f\u0004\u0004\u0000\u0000\u000b\u0010\b\u0000�\u000f\u0004\u0016�\u001c\u0000\u0016�<\u0000\u0016�\\\u0000\u0016�|\u0000\u0000\u0014\u0010\u0000\u0000\u0000@\u0004\u0000l\u0001\u0001\u0000\u0000\u0015\u0003\u0000\u0003W\u0000\u0003\u0001\u0005\u0006�\u0000\u0000\u0003U\u0000\u0003\u0000\u0003\u0004\u0007\b\u0004\u0004\u0000\u0000\u0004\u0004\u0002\u0000\u0004\u0004\u0002�\u0000\u0004\u0004\u0002\u0000\u0004\u0004�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004U\u0000\u0004\u0000\u0004U\u0000\u0004\u0000\u0004@\u0000\u0000\u0000\u0005\u0004\u0000P\u0004\u0000\u0000U\u0004\u0000\u0004\u0000\u000f\u0004\u0004\u0000\tT\u0004\t\u0000\u0006\u0004\u0004�\u0000\u0000\u0004\u0000\u0004@\u0000\u0000\u0000\u0000\u0000\u0000\f\u0004\u0004\u0000\u0000\u0013\u001e\u0004'�\u0017\u0004 �`\u0000 x�\u0000\u001f��\u0000\u0016�\u001c\u0000\u0002;�\b9�h\u0014\u001e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0004\u0002\u0002\u0000�\u0000\u0000P\u0004\u0000\u0000\u0005\u0004\u0000\u0000\u0000P\u0004\u0000\u0000\u0005\u0004\u0000<\t\t\u0000\u0000\u0001\u0004\u0013\u0000\u0004\u0004�\u0000\u0000\u0005\u0004\u0000\u0000\u0000P\u0004\u0000\u0000\u0005\u0004\u0000\u0005\u0004\u0000\u0000Z\u0004\u0000\u0004\u0000\u0001\u0004E\u0000\u0004\u0000\u0000\u0000P\u0004\u0000<\t\t\u0000\u0000\u0005\u0004\u0000\u0006\u0004\u0004�\u0000\u0000v\u0004\t\t\u0000\u0000\u0000.\u0004\u0000\u0004\u00040\u0000\u0000\n\u0001\u0000P\u0004\u0000\u0000�\u0001\u0000\u0004\u0000l\u0004\u0004\u0000\u0000\n\u0001\u0000P\u0004\u0000\u0000�\u0001\u0000\u0004\u0000\u0000\n\u0001\u0000P\u0004\u0000\u0000�\u0002\u0000\u0004\u0000m\u0004\u0004\t\t\u0004�\u0000\u0000P\u0004\u0000�\u0004\u0002\u0004\t\t\u0000\u0000g\t\t\u0004\u0000\u0000\u000f\u0002\u0005\u0006\u0004�\u0004\u0000\u0000\u0004\u00040\t\tx\u0007\b\u0004\u0004\u0000\u0000\u0012\u0010\u0006\u0000�\u000f\u0004\u0016�4\u0000\u0016�d\u0000 �H\u0000 �`\u0000\u0000\u0014\u0010\u0000\u0000\u0000�\u0004\u0004�\u0000\u0002\u0000\u0004�\u0004\u0000\u0005\u0006\u0000�\u0000\u0004\u0000\u0002\u0000\fuu�\u0000\u0007\b\u0000\u0004\u0000(\u0004\u0000o\u0004\u0004\u0000\u0003\u0004\u0004�\u0000\u0000\u0004\u0000�\u0004\u0000\u0003\u0003�\u0000\u0004\u0000\u0000\u0000=\u0004\u0004\u0000\u0003\u0000(\u0004\u0000)\u0004\u0000\u0004P\u0003\u0000\u0000\u0015\u0004\u0002\u0000�\u0004\u0000\u0004\u0000)\u0004\u0000\u0004@\u0000\u0000\u0016\u0004\u0000\u0004�\u0000\u0004\u0000�\u0004\u0000\u0004P\u0002\u0000\u0000\u001e\u0004\u0004\u0000\u0000R\u0004\u0000\u0004�\u0000\u0004\u0004�\u0000\u0000\u0000muu\u0000\u0000\u0004@\u0000H\u0004\u0004�\u0000\u0000\u0001u�u\u0004\u0004\u0000\u0000\u0004\u0010\n\u0000׏\u0004\u0012�X\u000f\u0016�4\u0000\u0016�L\u0000\u0016�d\u0000\u0000\u0014\u0010\u0000\u0000\u0000�\u0004\u0004\u0001\u0001\u0000\u0000\u0000\u0003\u0001\u0001�\u0000\u0000\u0000�\u0005\u0006\u0001\u0004\u0000\u0000\u0000\u000f\u0007\b\u0001\u0004�\u0000\u0000\u0000�\u0004\u0004\u0000\u0000\u0000�\t\t\u0000\u0000\u0000\f\u0004\u0004�\u0000\u0000\u0000�\u0004\u0004\u0000\u0000(\u0004\u0000�\u0004\u0000\u0004\u0004�\u0000\u0000\u0000�\u0004\u0004\u0000\u0000\u0000\u0000\u0000P\u0004\u0000\u0000\u0000\u0000�\u0004\u0004\u0000\u0000\u0000�\u0004\u0004�\u0000\u0000\f\u0004\u0004�uu\t\t\u0000�uu\u0004\u0004\u0000\u0000\u0019\u0010\b��\u0007\u0003\u0006�\u0018-\u0016��\u0000\u0016�l\u0000\u0001;�P\u0014\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0001\u0000\u0000\u000e\u0001\u0001\u0000\u0015\u0000\u0004\u0000\u0003\u0001\u0001\b\u0000O\u0000\u0001\u0001\u0000\u0000k\u0001\u0001\t\u0001\u0004�\u0000\u0001\u0001\u0000\u0001<\u0000\u0000\u0001\u0001\u0019\u0000\u0000\u0004�\u0001\u0001-\t\u0001\u0004\u0000�\u0000\u0001\u0001)\t\u0001\u0004�\u0004\u0000\u0000�\u0001\t\u0001�\t\u0001\u0004\u0005\u0006\u0000\u0000\\\u0004\u0000\u0001\u0001\u0001\u0004�\u0007\b\u0004\u0000\u0000�\u0001\u0001\t\u0004\u0004\u0000\u0000\u0005\u0010\u0005\u0000ח\u0003\u0013�P\u001e\u0013�(\u000f\u0013�x-\u00029��<��\u0014\u0010\u0000\u0000\u0000�\u0004\u0004\u0000\f\u0000\u0000\u000f\u0004\u0005\u0006\u0004�\u0000\u0000\u0000�\u0004\u0007\b\u0004\u0000\u0000\u0000\r\u0004\u0002\u0004�\u0000\u0000\u0000�\u0004\u0000\u0004\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0014\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0014\u0004\u0000\u0000\u0000�\t\t\u0000\f\u0004\u0004\u0000\u0000\u001e\u0010\u0014\u0000�O\u0003%�H\u0000(�\b-)��\u0016\u0000\u0014\u0010\u0000\u0000\u0000�\u0004\u0004\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0004\u0004\u0000\u0000\u0014\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0004\u0004\u0000\u0000\u0001*��\u0000\u0001+��\u0000\u0001,��\u0000\u0001-��\u0000\u0001.��\u0000\u0001/��\u0000\u00010��\u0000\u0002*�|\u0000+��\u0000\u0002*�|\u0000,��\u0000\u0002*�|\u0000-��\u0000\u0002+�|\u0000.��\u0000\u0002+�|\u0000/��\u0000\u0002+�|\u00000��\u0000\u0003+�l\u000f+�|\u001e+��-\u00012�|\u0000\u0000\b\u0000\u0000�\u0002\u0006\u000e\u001e�>B<�\u0000\u0002���\u0000?��\u0000�|��\u0000>\u0000��\u0000\u0000��>\u0002��\u0000\u0000\u0000\u0002\u0001��?�|�\u0000�|��\u0000>��\u0000\u0001�������\u0004��\u0000\u0002���\u0000?\u001f�\u000f\u0004\u0003\u0003\u0000\u0000�\u0003\u000f\u001f?�@?�\u0000�~��\u0000����� ��\u0000\u0000���\u0000�\u0000\u0000��� \u0000�\u0000\u0000��>\u0000��\u0000\u0001�\u0000* 8\u0017�\u0002\u0001\u0004\u0003\u000f\u0007\u0010\u000f�?\u001f?�\u0001\u0000�\u0002��\u0002��|�\u0000J|�����\u0000�\u0000���\u0000�\u0000��� \u0000���|�����\u0000�\u0000\u0001��\u0001�\u0000˂|�\u0002�����\b\u0000���|�����\u0000�\u0000\u0001��\u0001�\u0000\u0000˂|�\u0002�����\b\u0000˂|��~��? \u0000�\u0000���(\u0000�\u0000������\b\u0000��\u0001\u0000��\u0000��\u0000\u0000��\u0000�\u0003\u0001\u0004\u0000\b\u0010�?��\u0000���\u0004\u0000\b\u0010����\u0000��|�\u0000���|�\u0000���\u0000���� \u001f\u001f\u0000���`\u0000�\u0000��� ��\u0000���\u0000�����|�\u0000���\u0000\u0000�\u0001�\u0000\u0001���\u0004\u0000\u0002���|�\u0000�\u001f\u000f\f\u0000\u0003\u0000\u0000���(\u0000�\u0001�\u0000\u0001���\u0004\u0000\u0002���|�\u0000�������\u0000\u0000��\u0000��\u0000��\u0000\u0000��|�\u0000���|�\u0000�\u0001\u0002\u00012\u0004\u0003��\u0000\u0000�2@�_��Ù\u0005��T���\u0005��U����E���U����U����U��ӓQ���Q���U����U����E���U����\u0011��Q���E���Q���U����\u0011��D��� �!��D���)HsT�C�\u000f�Hp\u0010\u0000 �x\u0000��` �@��\u0000�\u0001\u0000 \u0001�D��\u0000�\u0010�8��|\u0002�\r������U����UǻE]UE���U��əQ���Q���E���U����\u0015���T���\u0005��Q���E���Q���A��U����E���A��A��P��\u0005��P��U����E���Q���@�\u0005��T9\u0011\u0001Q)9�T���Q���P��\u0005��Q���Q���P��U����Q���Q���U����U����P��\u0001�@�\u0005��@�U����E9)\u0001\u0015\u00119�U9\u0011��U�\u00119�A��A��U����UϏ��������X�(�ߑ�\u0010�\u0014�\f�\u0000\u0000���\u0000�\u0002\u0001\u0005\u0002�\u0006\u0000\u0004\u0000�\u0013�<�@��\u0000�\u0000�Q\u000eq.�\u0006�\u0001��\u0000\u0000��?�\u001f�?�'��\u001b�,�\u001c�\u000f�?� �2����\u0013\u0013\u000f\u000f������>����o��<����\u000b���������������������������\u0000\u0001�������\u001fx\u000f\u0007�\u000f\u0010�'8_`��_����\u001f�+�\u0005��\u0000�g�\u0001\u0000�}�T��\u0015�\u0002�\u0000@��U�UU��\u0000@��U�UU��\u0000��������U��T�\u0000�����\u0017��P���\u0000�U��U�����UU����UU���\u0000\u0000UU\u0000\u0000�KK\u0016\u0016KK\u0016\u0016�KK\u0016\u0016KK\u0016\u0016������������\u0004�A�\u0004�A��\u0004�A�\u0004�A���@o��@o���@o��@o���\u0002�\t�\u0002�\t��\u0002�\t�\u0002�\t� ߂ ߂� ߂ ߂���_�_��_�_���hh��hh���hh��hh��\u0000\u0001�@\u0000\u0007�88��\u0000\u001f�PP..�\u0000\u0000@@\u0018\u001811�>>\\\\\"\"\b\b�\n\n��\u0006\u0006  �\u0000\u0000��\u0004\u0004PP�\u0000\u0000''��88?\u001e\u001eGG\u0010\u0010�����\u000b\u000b\u0007\u0007�\u0005\u0005::��\u001e\u001e�\u0018\u0007IF.���Pd�9�Z��\u0006�\u0002\u0001\u0004\u0003\u000f\u0007\u0010\u000f�?\u001f?�\u0000\u0000�\u0003�\u0000��\u0000��\u0000\u0000��\u0002��\u0002��\u0000\u0000ʂ|����\u0000\u0000��|�����\u0000\u0000�\b\u0007\u0004\u0003\u0003\u0001\u0001\u0000�\u0000�\u0007�\u0000��\u0000��\u001f\u001f\u0000\u0000�� ���\b�������\u0000\u0000�\u0002\u0006\u000e\u001e�>~��\u0000\u0002�\u0016*\u0014�\u0000\u0004\b�\u0003\u0000\u0002\u0001\u0003\u0002�\u0003\u0000\u0000��|\u0000��\u0000��\u0000\u0000�\u0002�\u0004��\b�������\u0000\u0000��@? \u001f�\u001f\u000f\u000f\u0003\u0003\u0000\u0000��\u0001(��(��\u0000\u0000�\u0010\b\t\u0007\u0004\u0000>\u0001�\u0011\u000e\b\u0007\u0004\u0003\u0002\u0001��\u0000\u001f\u0001�\u0002�\b��\u0000��\u0010��@��\u0000\u0000���\u0000\u0000��\u0007\u0000\u0000��\u000f�\u0003\u0000\u0017\u0017��\u0000\n\u001f��z\u0001�\u0000����\u0011�4�a���cc5upp�##\u0000\u0000^^�}}__�������00���\u0018\u0018�����\u0000\u0000\b\b\n\n�����tt��@@�''\u0005\u0005\u001c\u001c\b\b�\\\\99ss���\u000f\u0000\u0007\u0004\u0005�\u0000\u0000  ����\u0000\n?���U��\u0000�UU���U\u0000�U�\u0000�\n�\u0000��\u0000�\u0001\u0002�\u0016��\u0012�\u0019�8�:���$�\u0000����\u0000G�����\u001f\u001f\b\bpp\b\u000e�bcHx\u0001?$���\u0003\u0003��\u0000�G_\u000b�?�������~�������f�\u0002�,�P�b∈���\u0000\u0000��\u0000\u0000\u000f��(?�?\u0000\u001f\u000f\r\u0007\b���9�=�~�yo��_� &\u0000\u0004\u0000\u0001\u0001���\u0001\u000f?�\u001e\u001fbc����������}���{{\f\f������������\f\f�����oo���\u0005\u0005\u001d\u001f���?�������\u0000�@�\u0000ǀ�}�\u0000\u0007@_�\u0007�8\u0003��\u0007��\u0000\u0000�\b\u0000\f\u000f\u0010�\u001f ?@�\u0000\u0000�\u0002̃\u0004�\b�\u0000\u0000������\u0001�\u0000�\u0000�\u0001�\n�T\u0002�B\u0000\u0000\u0007\u0003`��@\u0017�\u0007�\u000f �\u0000\u0000�\u0002�\u0001�\u0000\u0001�\u0006�\u0000\u0000DO���A\u0006�\u0000�¨��\u0004�\u0000@\\�� \u0010�\u0000\u0001�\u0001\u0002\u0003\u0004���\u0000���̏\u0010� ̼@�\u0000��L\u0001�\u0002�\u0000\u0000���\u0000���\u001f\u0000>?U\u001f\u000f\u0007\u0003L\u0000\u0001\u0002�\u0003��\u0007��\u0000\u0000�\f�\u0001�\u0000\u0000<A�y��\u0004�\u0000\u0000�\b��\u0007\b\u000f\u0010�\u001e <@ȇ\u0000\u0007\b\u0000�����\u0000��\u0014�(̏P\u001e���\u0000��\u000f�\u0000\u0007\u000fD\u001f>�\u000f�\u001e��<@x��=\u0002?\u0000\u0000��\b�\u0010̞ <@Ȟ\u0000\u001e\u0000�x�\u0000\u0000\u0000�<@\u0000\u0000\u0000�\u000f\u0000\u0000D}\u0000\u0000��\u0000\u0004\u0001�>\u0000<@�x��\u0000�x�\u0000\u0000\u0000�\u001e\u0000\u0000��>��\u0000\u0000���\u0000�\u0000\u0000\u000f\u0015\u0006�/\u0000?\u0017/?\u0007�\u0000\u0000�Uf��\u0000��\u0000\u0000�P`��\u0000������/\u0007?\u0017/?\u0007�/?\u0017/?\u0007����������������/\u0007?\u0017/\u0010\u0015\u0006�\u000f\u0000\u0000���\u0000Uf��\u0000\u0000������\u0010P`��\u0000\u0000�����΀̯������j\u0000\u0000q\"�#\"\u0000�*\u0000\u0018����\u0000�~\u000f\u000f\u0007�\u0003G\u000f\u000f\u0007�\u000f~���΀̯������j\u0000\u0000�Ȫ��\u0000�*\u0000�Ȫ��\u0000�~\u000f\u000f\u0007�\u0003G\u000f\u000f\u0007�\u000f`\u0007\u0000\u0000�\u0003\u0002}~�\u0000�}~���\u0000�\u0003\u0002}:~�\u0000�}~:���\u0000�\u0017\u0016/.]^���u~����\u0000�\u0017\u0016o*]^���u~�����\u0000�\u0003\u000f\u0003\u001c\f0\u0010�` \u0000�X�(��\u0000��hp48�2<�\u0000�:{���X\u0000` 0\u0010�\u0016\u000f-\u0013R �@��:�\u0000b|����p�H�\u0004�\u0002�\u0018$^\u0000~��\u0000��f<Z$�\u0000P�b��\u0000�b�\u0000��\u0014|b��\u0000�`�\u0000��\u0014~\u0018��\u0000�\u0018�\u0000��\u0015|b|��\u0000�b�\u0000��7�\u0002\u001c�~��\u0002�~���å�f�~߁f~۽��@�\u0000U����U����u�߇��]�����u�χ��]�����}�χǃ�}�χ����χǃÁ�ǃχ����ýߡǻ�ߣ����k���ǃ�ߏ���\u0000\u0000\u000f\u0015\u0006�/\u0000?\u0017/?\u0007�\u0000\u0000�Uf��\u0000��\u0000\u0000�P`��\u0000������/\u0007?\u0017/?\u0007�/?\u0017/?\u0007����������������/\u0007?\u0017/\u0010\u0015\u0006�\u000f\u0000\u0000���\u0000Uf��\u0000\u0000������\u0010P`��\u0000\u0000���\u0000@�U����~���΀̯������j\u0000\u0000q\"�#\"\u0000�*\u0000\u0018����\u0000�~\u000f\u000f\u0007�\u0003G\u000f\u000f\u0007�\u000fU����U����\u0000\u0000\u0000\u0000\u0000\u0000\u0005��U�׻�\u0000\u0000\u0000\u0000\u0001�@�\u0000\u0011���f\u0000�B�\u0004f\b�n\u0018�$�Bf\u0000��Ù\u0005��T���\u0005��U����E���U����U����U��ӓQ���Q���U����U����E���U����\u0011��Q���E���Q���U����\u0011��D��\u0000\u0000\u0000\u0000\u0001�T���\u0000\u0000Q���U����UǻE]UE���U��əQ���Q���E���U����\u0015���T���\u0005��Q���E���Q���A��U����E���A��A��P��\u0005��P��U����E���Q���@�\u0005��T9\u0011\u0001Q)9�T���Q���P��\u0005��Q���Q���P��U����Q���Q���U����U����P��\u0001�@�\u0005��@�U����E9)\u0001\u0015\u00119�U9\u0011��U�\u00119�A��A��U����UϏ��~���΀̯������j\u0000\u0000�Ȫ��\u0000�*\u0000�Ȫ��\u0000�~\u000f\u000f\u0007�\u0003G\u000f\u000f\u0007�\u000f@�\u0000�\u0000\u0000<�\u0014�A��\u0014�A�\u0000\u0000��h�l�g�C��@�A�a�\u0000��\u0016�69�����:}ji~�\u0000�\u0000<�(ׂ�U(}��\u0000\u0000�\u001f)\u0016_6i �6_)\u0016\u001f\u0000�W.� R����Ҳ��\u001d)\u0018�������/�����\u0001Ǹ�x��\u0000�h�l�\u0004��l��h�\u0000�}\u0001W0r\u0002s\"�S\u0001\u0000)\u0019?\u0000����\u001c���t�޴�\u0000dx�\u0000�\u0014\f\u000f\u0000\u0000\u0000����\u0000\u0000\u0000\u0000�\u0019%\u0018g�Z�\u0000\u0000\u0007\u0005\u0002\u001d��\n\u001d���ǂ��Z���\\��\u001e�n��:ǂI\u0000�M�\u0014�\u0017�\u0015�\u001f���n��\u001e��\\�Z�\u001a�Z�\u0017�\u001d��\u001c���m���G��\u0000g\u0018=\u0000\u0019�\u0000���%�\u0017��\n�\u001d\u0002\u0005\u0007\u0000\u0000�f��$m���?m��$f���\u0000U��U\u0000���U�\u0000`\u000b�c4\u00199�E\u0001.\f}\b\\\u0014��\u0000���\u0000(���\u0000�T�\u000048�N\n/\b\u001e\u0003\r\u0006�\u0017\u0000'\u0006.\f\u001c\u0000���� �h�\u001c�>\u0000*\u001c%\u001a?\u0000�c4\u00199�E\u0001.\f}\b�$��\u0000���\u0000(���\u0000�T�\u000068��\u0012_\u0010s\u00005�\b\r\u0005\u0007\u0003\u0003\u0000���� X��\u0010���� �@�\u0000�c4\u00199�E\u0001.\f}\b�\u0004��\u0000���\u0000(���\u0000�T�\u00005:��\"� �\u0001c\u0000�\u0005\u0002\u0003\u0000\u0001���� ��\u0000�0 p`��\u0000�c4\u00199�E\u0001.\f}\b�$��\u0000���\u0000(���\u0000�T�\u000068��\u0012_\u0010w\u00027\u0000�\u000b\t\u0001\u000b\u0003\u0007\u0000���� �h�\u0000�H��`�\u0000\u0000�\u0003\u0004\t9�D.\f}\b\\\u0014��\u0000p`�\u0000\u0018���pZ$�\u0000\u0014\u0018�N\n/\b\u001d\u0002\u000b\u0004�\u0017\u0000'\u0006.\f\u001c\u0000����\u0000� �\u0010�>\u0000*\u001c%\u001a?\u0000�\u0003\u0004\t9�D.\f}\b�$��\u0000p`�\u0000\u0018���pZ$�\u0000\u0016\u0018��\u0012_\u0010s\u00005�\b\r\u0005\u0007\u0003\u0003\u0000����\u0000� \u0000���� �@�\u0000�\u0003\u0004\t9�D.\f}\b�\u0004��\u0000p`�\u0000\u0018���pZ$�\u0000\u0015\u001a��\"� �\u0000c�\u0005\u0002\u0003\u0000\u0001����\u0000� �\u0000�0 p`��\u0000�\u0003\u0004\t9�D.\f}\b�$��\u0000p`�\u0000\u0018���pZ$�\u0000\u0016\u0018��\u0012_\u0010u\u00027\u0000�\u000b\t\u0001\u000b\u0003\u0007\u0000����\u0000� �\u0000�H��`�\u0000\u0000����\u0000\u000f@����@``\u0000@ ��\u0000@���� 00\u0000 \u0010@�`\u0000@ ����\u0010\u0010\b0\u0000�`@����\u0000\u0000\u0004\u0004\n\b\u0014�\u0010( P@����\u0000\u0000\u0002\u0002�\u000e\u0001<\u0000p����\u0000\u0000�\u0003\u0005\u001e!p����\u0000\u0000?\u0007\t~����\u0000\u0000\u000f����\u0000\u0000\u0018<\u00188\u0018\u0000\u0000\u000f\u0018\u0018$<<\u0018\u0018\u0000\u0000\u0007\u0018\u0018<4\u0000\u0018\u0000\u001f\u0018\u0018<$f=\u0018<\u0000\u0018\u0000<<~f�B�?f�<~\u0000<p0x8|<~�8|0x\u0000p\u0000�\u0018$B���\u0000\u0000/\u0001\u0002\u0001\u0004\u0002�\u0000\u0000/���P`�\u0005\u0003\u0002\u0001\u0001\u0000\u0000\u0000���`��\u0000\u0000\u0000\u0002\u0007�\b\u0007\u000b\u0012\u000e-\u001f�\u0000\u0000�� ���DxTX�+\u001b.\u001f\u0011\u000f\r\u0003�\u0002\u0001\u0001\u0000\u0000�����P`��� ��\u0000\u0000�\u0003\u0004\u0003\u000b\u0007\n\u0006�4\fB>��f��\u0000`���Lp�B|��ef\u0005\u0006��`V6Y?\"\u001e�\u001b\u0007\u0004\u0003\u0003\u0000\u0000�%&Z|B$8�(0��\u0010��\u0000�\u0000\u0003\u0006\bT X�\u0015 \u0010\u0018P\u0002\u0001U�@b U\b\u0002\u0003\u0000Q\u0003\u0002\u0000U\b0��@\u0000�\f\u001c\b<\u0018�\u0000�\u0000\u0007\u001a\u0001;\u0006�\u0001??\u0000\u0000�\u0001�_C\u0000���?��\r\u000f\u0000�\u0003�\f��H�D��\u0010���\u0000�\u00008\u00108\u0010�(8\u0000\u0010\u0000�?N>�\u0000�l�G?s\fm35\u001b��\u0000r|�\u0000�6����0�̬��_Ho�\u0003�\u0002\u0002�\u0000\u0000\u0001\u0001\u0000��\u0012���\u0003@@ـ��\u0000\u0000�\u001f\b\u000f\u0001\u0003\u0000\u0000\u0000��\u0010���\u0000\u0000\u0000\u0010\u0018\u0000$\u0018J-�Z�$\u0018\u0018\u0000\u0000\bo\u0004\u0018$�J,�Z<$\u001b\u0018 \u0000\u0000<ffZJ,�Z<fZ<f\u0000\u0000o \u0018$\u001bJ,�Z<$�\u0018\u0004\u0000��\u0000�V�\u0000R\f�?\u0010\u0015\n\u000f\u0000\u0000�\u0017\u0016o*]^���u~�����\u0000�\u000f\u0014\u0003;\u0006�\u0001_^\u0000>\r\u000f\u0000���X��~\u0000l�ذ�\u0000�\u0013\u000f;\u0007G8�}��\u0001�}G88\u0000������\u001c]��ݶ��\u001c\u001c\u0000�\u0013\u000f;\u0007G8�u߻m]G88\u0000������\u0014]����\u0014\u001c\u0000����CG$�ݹ?��\r\u000f\u0000�?M;_0�K��]s\fm35\u001b��\u0000���\f���u��0�̬��$\u00104\u0018,\b$\u0000\u00104\u0018,\b$\u0000�\u0000�\"3�Df�\u0000\u0000\u0000\u0000�Z$\b,\u0018Z\u0000��Z��\u0000�~��\u0000i������˶��i��\u0000�\b\u0018\u0004\f\b\u0004�\b\u0018\u0010�\u0000\u0000Pp���\u0003�\u0000\u0000�f�B�\u0004f\b�n\u0018�$�Bf\u0000�\u0000\u0001�\u001b\u0001%\u0018{\u001d�B�\u0000\u0000��؀�\u0018޸�B��Z{\u001d%\u0018\u001b\u0001�\u0001\u0000\u0000��Z޸�\u0018؀��\u0000\u0000\u000b\u000f\u001c\u000b�>\u0017;\n/\u001d'\u001a�\u0000\u0000����`Р�@�\u001f\u0002\u000b\u0005\r\u0006\u0007\u0000�\u0001\u0000��X���P|��8��\u0000\u0000�\u0001\u0003\u0001\u0007\u0000\n\u0006?\u0005\u0002\u000b\u0001\u001f\n��\u0000@��\u0000��?�@Ѐ�P�\u001f\n\u000b\u0001\u0005\u0002\n\u0006?\u0007\u0000\u0003\u0001\u0001\u0000��PЀ�@��?�\u0000@��\u0000�\u0000�n�\u0000\u0012\f~\u0000�|�\u0007\u0000\u001b<\u0003{\u0006�\u0001W;?\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0003\u000f\u0017�?�q�\u0000\u0000��@�0��8�\u001c�\u0000i~�~\u0000�n�\u0000�^��`_61\u000e\u001f\u0000�\u0000\u0001�}����U�T\u0000\u0000����@��?��,<\u0000�����\u0003�U?�\u0001k,<\u0000�\u0000���k��U��*\u0000\u0000�~�n�\u0000�f��\u000e�l�p�\u0000�\u0001\u0007\u000f\u0017�??_ /\u00107\u0018�\u0019\u000e\u000e\u0007\u0007\u0001\u0001\u0000�<Z<~\u0000�Z�~\u0000�D�\"f\u0000�8T8o(�Z��:�T� �P��\u0000�6�\u0010�\u0014?�\u0010�6�\u0000��P� �T�:��Zo(T88\u0000�\u0001�\u0001i\u0006s.�2\u000f\u0012)\u0007T\u001b��\u0000S�&��\f_��}�����\u0000��l��<����?h�����\u0000��@�$�\\�X�@�\u0018�W~\u00016\u0018%\b�\u001d\f\u0000\u0001\u0003\u0001��\u0006?�=C\u0015+����`���\u0018����\u0006}����$�\u0000���\u0018���\u0000�\u0010���\u00000�@��\u0007\u0002\u0006\u0000\b\u0010�\u0000�8\u0010p `\u0000@�\u0000�\u001c\b\u000e\u0004\u0006\u0000\u0002�\u0000��@`\u0000\u0010\b�\u0000�?[;�\u0000�q��AW8=\u0003\u0003\u0000�����\u0000������8|��\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0007�\u0003�p��u�\u0003\u0013\u000e\u0016\f�\u0002\u0000�x�\u0014\u0018���^��\u001c�(�\u0017\f\u0013\u000e�\u0003�p��u�\u0003\u0007\u0000\u0000��h�\u001cB�|\u0000���x��\u0000\u0002�\u0001\u0002\u00077�Z\u0014w-�\u0000�|��\u0000�`��\u0000�R,ʴ�\u0000����\u0000J>�_�`�J67\u0000\u0003\u0001\u0000�������\u0006����\u0000@��\u0000�\u0000\u0001\u0005\b�\n\u0014\u0015\u000e\n\u00075\u0002�<\u0000�<<����Z�\u0000�\u0018���_1[8�A�{?�A[8_1��Z<��\u0000j��v��\u0018<åZ�\u000f\u0000\u0018\u0007/\u0017?�h\u0000�@�\u0016W��\u00000��������\\�^�\u000e�\u0000\u0000+���p�}\u0016*\u0014\u0015\u001d\u0002�\u000e\u0000\u001a\u0002/\u001f'�NH��>�_\u001e>_.\u000f\u001c/�䘔(jt?�,�\f�h�?\u0000?�@0��k�Zy6?\u0000�����\u0000��<eۦ�\u0000�����\u0002\f�7ڻV�l�\u0000�$$44\u0018<�\b\u0000\u0018\b�\u0006\u0000\u000f\u0010\u0010\b\b�\u0000\u0000@@C�#''/\u0017C��\u0000\u0000\u0002\u0002��D��Ԩ�\u0002��\u0000\u0000\u000f\b\b\u0010\u0010�\u0004\u0005\u0002\u000f\b\u001d\u00197�\u000bw3w�r���������_���1���$������3�� �@�\u0010��L�P�@�\"��d�\")\u0006;�\u0007\u0019\u0004\u001b\u000b\u0000\u000f���l�����_�\\�8Ǹ���0�?�\u000e�\u0018�\b�\u0005��R�T��l0��p�0�`��P�\u0000\u0007\u0003\u0001@\u0000���P�\u0018��S�C�\u0010o\u0003\u001c\u0000\u0007�\u0005�\u000b�\u001b5����\b��8\u0000��@�� �@\u0000�@\u0000�88||��?||88\u0000\u0000<88||<88\u0000\u0000\f880\u0000\u0000\u000f\u0010\u001088�\u0010\u0010\u0000\u0000\u0003\u0010\u0010�\u0000\u0000|88||�=8|\u00008\u0000\u001c88|4\u00008\u0000\u000e\u001088�\u0010\u0000\u0000\u0007\u0010\u00108�\u0000\u0010\u0000\u0001\u0010@\u0000\u0001\u0003�\u0003\u000f\u0007\u000f\u001f�\u0000\u0000\u0003\u0003\u000f�\u000f\u001f\f\u001c\u00199\u001b;�\u0000\u0000\u0003\u0003\u000f\u000f\u001f�\u001c<\u001880p�\u0003\u0003\u000f\u000f\u001c\u001c00�``���\u0000\u0000\u000f\u0005\u000e\b\u001f�\u0000\u0000\u0018\f0�\u001c8\f0�9�3�\u0000\u0000\u000f��\u0018��\u0000\u0000\u0003\u0003\u0007�\u0006\u000f\u0000\u0007\u0003\u0000\u0000�\u0007\b\u00003@� ��8�`��8\u0000��\u001c�\f�\u001c8\u000ep�N�\u001ey\u0000?\u0002M�p�\u0000<\u0003\u0003\u0007�\u0006�\u0000�\u0003�\u0004��\u0000\u0000@� ��0�`��8\u0000�\u0010\u0001\u000e\f\u001f\u0018?�\u0001\u001e\u000f\u0000\u0000\u0003\u0000�\u0001�\u0000\u0000�A�\u001f��q\u0000��\u0000�\b�\u0010������\u0018��\u000e\u0000<\u0000\u0011�\u0000\u0000\u0000\u000f\u0001\u000e\u000f\u0010�\u0000\u0000\u001f\u0018�\u0011�2�\u0000\u0000\u000f� �d�\u0000\u00008C\u0002��\u0004\u0003\u0007\u0018\u0000\u0000�\u0007\b\u00003@����8�`��#\u0000$��AB�\u001c &X�z�>Y\u0000>B�p�\u0000<�\u0007\u0001�\u0001\u0006\u0003�\u0000`_8L@��\u0010��\u000b`��&\u0000\u0000}\u0010\u0001\u000e\u000e8!�\u0003�\u000f�\u0000 \u001c_�\u001c�A�\u001e��a\u0000�\u000e\u0000\b\u0010����2��D�\b\u0000\u001c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�<<ff\u000f<<\u0000\u0000�\u0018\u001888\u0018\u0018\u000f<<\u0000\u0000�~~ff\u0006\u0006<<�``~~\u0000\u0000�~~ff\u0006\u0006\u001c\u001c�\u0006\u0006ff~~\u0000\u0000�\f\f\u001c\u001c,,ll�~~\f\f\u0000\u0000�~~``||�\u0006\u0006ff~~\u0000\u0000�~~ff``||�ff~~\u0000\u0000�~~ff\u0006\u0006\f\f3\u0018\u0018\u0000\u0000�~~ff<<�ff~~\u0000\u0000�~~ff~~�\u0006\u0006ff||\u0000\u0000�\u000e\u000e\u001e\u001e66ff�~~ff\u0000\u0000�~~ff||�ff~~\u0000\u0000�~~ffdd``?ff~~\u0000\u0000�xxllff\u000f~~\u0000\u0000�~~``||�``~~\u0000\u0000�~~``||�``\u0000\u0000�~~ff``nn�ffzz\u0000\u0000�ff~~�ff\u0000\u0000�<<\u0018\u0018\u000f<<\u0000\u0000�\u000e\u000e\u0006\u0006�ffddxx\u0000\u0000�ffllxx�llff\u0000\u0000�``\u000f~~\u0000\u0000������������\u0000\u0000�ffvv~~�nnff\u0000\u0000�~~ff\u000f~~\u0000\u0000�~~ffll�xx``\u0000\u0000�~~ff�~~nn~~\u0003\u0003�~~ff~~�llff\u0000\u0000�>>ff``~~�\u0006\u0006ff||\u0000\u0000�~~\u0018\u0018\u0003\u0000\u0000�ff\u000f~~\u0000\u0000�ff�llxxpp\u0000\u0000�������?����\u0000\u0000�����||88�||����\u0000\u0000�ff<<�\u0018\u0018\u0000\u0000�~~\u000e\u000e\f\f\u0018\u0018�00pp~~\u0000\u0000\u00003``\u0000\u0000\u0003~~�\u0000\u00003\u0018\u0018\u0000\u0000�\u0018\u0018\u0000\u0000�\u0018\u0018�\u0010\u0010\u0000\u0000\u0018\u0018\u0000\u0000�~~ff\f\f�\u0018\u0018\u0000\u0000\u0018\u0018\u0000\u0000�||ll``00�nnll||\u0000\u0000�88DD�������DD88\u0000\u0000\u000fDD((�\u0010\u0010((DD\u0000\u0000P\u0003\u0000\u000f\u0010\u0010\b\b�\u0000\u0000@@C�#''/\u0017C��\u0000\u0000\u0002\u0002��D��Ԩ�\u0002��\u0000\u0000\u000f\b\b\u0010\u0010�\u0004\u0005\u0002\u000f\b\u001d\u00197�\u000bw3w�r���������_���1���$������3�� �@�\u0010��L�P�@�\"��d�\")\u0006;�\u0007\u0019\u0004\u001b\u000b\u0000\u000f���l�����_�\\�8Ǹ���0�?�\u000e�\u0018�\b�\u0005��R�T��l0��p�0�`��P�\u0000\u0007\u0003\u0001@\u0000���P�\u0018��S�C�\u0010o\u0003\u001c\u0000\u0007�\u0005�\u000b�\u001b5����\b��8\u0000��@�� �@\u0000�@\u0000�88||��?||88\u0000\u0000<88||<88\u0000\u0000\f880\u0000\u0000\u000f\u0010\u001088�\u0010\u0010\u0000\u0000\u0003\u0010\u0010�\u0000\u0000|88||�=8|\u00008\u0000\u001c88|4\u00008\u0000\u000e\u001088�\u0010\u0000\u0000\u0007\u0010\u00108�\u0000\u0010\u0000\u0001\u0010@\u0000\u0001\u0003�\u0003\u000f\u0007\u000f\u001f�\u0000\u0000\u0003\u0003\u000f�\u000f\u001f\f\u001c\u00199\u001b;�\u0000\u0000\u0003\u0003\u000f\u000f\u001f�\u001c<\u001880p�\u0003\u0003\u000f\u000f\u001c\u001c00�``���\u0000\u0000\u000f\u0005\u000e\b\u001f�\u0000\u0000\u0018\f0�\u001c8\f0�9�3�\u0000\u0000\u000f��\u0018��\u0000\u0000\u0003\u0003\u0007�\u0006\u000f\u0000\u0007\u0003\u0000\u0000�\u0007\b\u00003@� ��8�`��8\u0000��\u001c�\f�\u001c8\u000ep�N�\u001ey\u0000?\u0002M�p�\u0000<\u0003\u0003\u0007�\u0006�\u0000�\u0003�\u0004��\u0000\u0000@� ��0�`��8\u0000�\u0010\u0001\u000e\f\u001f\u0018?�\u0001\u001e\u000f\u0000\u0000\u0003\u0000�\u0001�\u0000\u0000�A�\u001f��q\u0000��\u0000�\b�\u0010������\u0018��\u000e\u0000<\u0000\u0011�\u0000\u0000\u0000\u000f\u0001\u000e\u000f\u0010�\u0000\u0000\u001f\u0018�\u0011�2�\u0000\u0000\u000f� �d�\u0000\u00008C\u0002��\u0004\u0003\u0007\u0018\u0000\u0000�\u0007\b\u00003@����8�`��#\u0000$��AB�\u001c &X�z�>Y\u0000>B�p�\u0000<�\u0007\u0001�\u0001\u0006\u0003�\u0000`_8L@��\u0010��\u000b`��&\u0000\u0000}\u0010\u0001\u000e\u000e8!�\u0003�\u000f�\u0000 \u001c_�\u001c�A�\u001e��a\u0000�\u000e\u0000\b\u0010����2��D�\b\u0000\u001c\u0000�\u0001��\u0018U\u0010\u0000\u0018\u0000U\u000e\u001e6fQ~f\u0000Q~f|Ef~\u0000U~fd`\u0015f~\u0000Txlf\u0005~\u0000Q~`|E`~\u0000Q~`|A`\u0000U~f`nEfz\u0000Af~Af\u0000P<\u0018\u0005<\u0000P\u000e\u0006Ufdx\u0000EflxQlf\u0000@`\u0005~\u0000T���Q��\u0000Tfv~Qnf\u0000P~f\u0005~\u0000Q~flQx`\u0000P~fU~n~\u0003Q~f~Qlf\u0000U>f`~U\u0006f|\u0000P~\u0018\u0001\u0000@f\u0005~\u0000@fUlxp\u0000E���\u0015��\u0000U��|8U|��\u0000Af<A\u0018\u0000\u0014\u0012\u0000\u0000\u0000�\u001f\u001f\u0000\u0000\u0000\u0000\u0001�������\u001f\u001f\u0000?���������\u001f\u001f\u0003���������\u001f\u001f\u0000?���������\u001f\u001f\u0003`a�bcdefg\u001f\u001f\u0000\u001fhijkl�m\u001f\u001f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000{xxyyzz\u0003yyxx\u001f|}~|�|{|�}~||({|({|�}~||{|}�~|{|z}~||{\u0014\u000e\u0000\u0000\u0000�\u001f\u001f\u0000\u0000\u0000\u0000\u0001�������\u001f\u001f\u0000?���������\u001f\u001f\u0003���������\u001f\u001f\u0000?���������\u001f\u001f\u0003`a�bcdefg\u001f\u001f\u0000\u001fhijkl�m\u001f\u001f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000{xxyyzz\u0003yyxx\u001f|}~|�|{|�}~||\u0014\u0012\u0000\u0000\u0000�\u001f\u001f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001f�������\u001f\u001f\u0003���������\u001f\u001f\u0000?���������\u001f\u001f\u0003���������\u001f\u001f\u0000?`abcde�fg\u001f\u001f\u0001h�ijklm\u001f\u001f\u0000\u0000\u0000���\u0000\f��\u0000\u0000�nn\u0000\foo\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u000f�./�\u0000����������\u0000\u0000\u001f�;<������������\u0000\u0000=�>[\\�����������\u0000\u0000\u001f]^_���\u0000\u0000��������\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0012\u0000\u0000\u0000\u0000\u0000\u0001\u0005�\u0001\u0002\u0003\u0004�\u0003\u0004\u0002�\u0003\u0004\u0006\u0007\b\u0000\u0000?\u0005\u0010\u0011\u0012\u0013\u0014�\u0000\u0015\u0012\u0013\u0014\u0012\u0016�\u0017\u0000\u0000\u0005 !�\"\"\f\r\u0000\"�\f\r\"#$\u0000\u0000�����\u0000\u0000���\u0000�,�����,�\u0000\u0000\t\u0003\u0003�\u000e\b\u0006\u0000\u0006\u0007\b�\n\u0003\u0003\u000b\u0000�\u0000\u0018\u0019\u001a\u0012\u0000\u0012\u0016\u0017\u001b\u001c\u001d\u0000�\u0015\u0000%�&'-\u0005\"\"#$�()*\u0000\"\u0000?��,��������,\u001e�\u0000��\u0000pq�rs\u001f�������\u001ftuvw\u0000\u0000pqrs\u001f���������\u001ft�uvw\u0000\u0000pqr�s\u001f���������\u001ftuvw\u0000�\u0000pqrs\u001f���������\u001ft�uvw\u0000\u0000pqr�s\u001f`abcde�fg\u001ftuvw\u0000�\u0000pqrs\u001fh�ijklm\u001ftu�vw\u0000\u0000\u0000\u0000\u0007@NC�S\u0000\u00001990\u0000�\u0000LICE�NSED\u0000BY\u0000�NITENDO����͚x;x(\u0010��x�\ry(\b!\u001e\u0000>\u000b�-\t�\u0019'!�q\u0011\u0000��J\b!�T\u0011\u0000��J\b!\u0019Z\u0011\u0000��J\b!ut\u0011\u0000��J\b>\n̓\u000e!Mv��x����͔\b����\u000b \r!��4~�\u001e �>��ɯ����\u0006���\u0006>\u0000\u000e\u0005\u001e\u0002ͼ\u0006!���S\u0006>\u0000\u000e\n\u001e\u0002ͼ\u0006!���S\u0006���\f!-y��\f����͔\b����\u000b \u0007��ʧ(�ɯ�1���� \u001f>\u0001���!2z�,\r>\u0010���>����>\u0001���>\u0003�������(\u0015�� \u0007>\u0001���7�!vy��\f����!���Z\t��1���� !�������\u0010���>\u0001���>\u0001�����y!�z�,\rͮy���< \u00027�!���Z\t������\u00068\u0006(\b>\b\u0018\u0006>\u0002\u0018\u0002>\u0001�������=\u0007\u0007\u0007_\u0016\u0000!�y\u0019\u0011��\u000e\b��\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u00000\u0000\u0000\u0000�\u0000\u0000\u0000@\u0000\u0000\u0000�\u0000\u0000\u0000=\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000 \u0000\u0000\u0000�\u0000\u000003\u0000\u0000\u0000�\u0000\u0000\u0011a\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000��\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0006��\u0000`\u0000\u0000��z�\u0017\u0007��\u0001\u0013�z0�\u0017\u0007��\u0002\u0013�z �\u0017\u0007��\u0003��z�\u0017\u0007��\u0004��z�\u0017\u0007��\u0005��z�\u0017\u0007��\u0006��z�\u0017\u0007��\u0007��z�\u0017\u0007��\b��z�\u0017\u0007��\t\u0013�z �\u0017\u0007��\n\u0013�z0�\u0017\u0007��\u000b��z�\u0017\u0006��\u0000\u0000\u0000\u0000\u0013�zd�\u0017\u0007�����z�\u0017�<{�\u0017�A{�\u0017�F{�\u0017�K{�\u0017�P{�\u0017�Z{�\u0017�U{�\u0017�Z{�\u0017�_{�\u0017�d{�\u0017�i{�\u0017\u0007����i{�\u0017\u0010��\u0000\u0000��\u0001\u0000�\u0000\u0002\u0000�\b\u0003\u0000��\u0004\u0000��\u0005\u0000�\u0000\u0006\u0000�\b\u0007\u0000\u0000�\b\u0000\u0000�\t\u0000\u0000\u0000\n\u0000\u0000\b\u000b\u0000\b�\f\u0000\b�\r\u0000\b\u0000\u000e\u0000\b\b\u000f\u0000\u0001��\u0010\u0000\u0001��\u0011\u0000\u0001��\u0012\u0000\u0001��\u0013\u0000\u0001��\u0014\u0000\u0001��\u0015\u0000\u0001��\u0016\u0000\u0001��\u0017\u0000\u0001��\u0018\u0000\u0001��\u0019\u0000��\u0000��\u0001��\u0002�͚x͂{͚{���\u0006!:u��\u0006>\u0000\u000e\u0000\u001e\u0012ͼ\u0006!�u��\u0006>\r̓\u000e!�{��\f!\u0014|��\f͔\b�\u0002˧(�ͺ{�\u0019'��{>\b�!\t>\u0001�\u0000�7�>\u0000\u000e\u0002\u001e\nͼ\u0006!���S\u0006�\u0013���� \u0017>\u0001���>P���>����!Y|�,\r\u0018\u0015�\u0001 \u0011�\u0001�G\u0007\u0007�!Y|_\u0016\u0000\u0019�,\r!���Z\t��\u0013���� \u001b>\u0001���>P���>��������!r|�,\r\u0018\u001b���< \u0007���!\u0001�4����\u0001 \u0007>\u0001�\u0002�7�!���Z\t���\u0017}�\u0017�H}�\u0017�y}�\u0017��}�\u0017��}�\u0017\u0007\u0004�\u0002\u0007\u0003�\u0003\u0011�|\b\u0011�\u0004~�\u0017�\u0015~�&~�7~\u0010z|\u0003�\u0007���\u0010v|\u0004�\u0007\u0004�\u0002\u0007\u0003�\u0003\u0011�|\b\u0011�\u0004~�\u0017�\u0015~�&~�7~\u0010�|\u0003�\u0007���\u0010�|\u0004�\b\u0010\u0007\u0004�\u0002\u0007\u0003�\u0003\u0011�|�\u0004~�\u0017�\u0015~�&~�7~\u0010�|\u0003�\u0010�|\u0004�\u0007��\u0001�7~�{\u0004O\u001e\u0006�\u0018\u0006{\u0007_\u0016\u0000!\u000b}\u0019*�\u0004�~�\b��LpR{X�L�ZqH|\f��\u001e\u0000��\u001f\u0000�\u0000 \u0000��!\u0000��\"\u0000��#\u0000�\u0000$\u0000�\b%\u0000\u0000�&\u0000\u0000�'\u0000\u0000\u0000(\u0000\u0000\b)\u0000\f��\u001e\u0000��+\u0000�\u0000,\u0000��!\u0000��\"\u0000��#\u0000�\u00000\u0000�\b%\u0000\u0000�&\u0000\u0000�3\u0000\u0000\u0000(\u0000\u0000\b)\u0000\f��\u001e\u0000��+\u0000�\u0000,\u0000��!\u0000��.\u0000��#\u0000�\u00000\u0000�\b1\u0000\u0000�&\u0000\u0000�3\u0000\u0000\u00004\u0000\u0000\b)\u0000\u000b��*\u0000��+\u0000�\u0000,\u0000��!\u0000��.\u0000��/\u0000�\u00000\u0000�\b1\u0000\u0000�&\u0000\u0000�3\u0000\u0000\u00004\u0000\u000b��*\u0000��+\u0000�\u0000,\u0000��-\u0000��.\u0000��/\u0000�\u00000\u0000�\b1\u0000\u0000�2\u0000\u0000�3\u0000\u0000\u00004\u0000\u0004��\u001a\u0000�\u0000\u001a \u0000�\u001a@\u0000\u0000\u001a`\u0004��\u001b\u0000�\u0000\u001b \u0000�\u001b@\u0000\u0000\u001b`\u0004��\u001c\u0000�\u0000\u001c \u0000�\u001c@\u0000\u0000\u001c`\u0004��\u001d\u0000�\u0000\u001d \u0000�\u001d@\u0000\u0000\u001d`!��6\u0005�\u0002�~�\u0002��\u0001�n~͊~>\u0001̓\u000e͠~ͮ~�(ɧ(��!Yc\u0011\u0000��J\b!�T\u0011\u0000��J\b!\u0019Z\u0011\u0000��J\b�͖~!K\u0000>\u000b�-\t���\u0006!�v��\u0006�ͤ~���\u0006!5w��\u0006ɯ������<�(��f��'>U�\u0001͔\b���\u00078M\u00078b\u0007\u0007\u00078v\u00078B\u00078p\u00078m�\u0001�# \u0019��\u0002>d�\u0001�\u0001�� �>����>\u0004�(�\u0018f!��*fo#}���|���\u0011�\u0002��\u000f8���(�\u0018I>\u0001ͤ\u000e͕(!(�4~�\u0005 �>\u0001�(�\u0018�>\u0001ͤ\u000e͆(!(�5~�¿~>\u0004�(�ÿ~>\u0002ͤ\u000e!\u0007\u0000�\u0016\t�(��\u0004 \u0006��¿~�\u0019'�>\u0000\u000e\u0007\u001e\nͼ\u0006!���S\u0006>\u0000\u000e\u0007\u001e\u000bͼ\u0006!z��S\u0006>\u0000\u000e\u0007\u001e\fͼ\u0006!���S\u0006>\u0000\u000e\n\u001e\fͼ\u0006!���S\u0006>\u0000\u000e\u0007\u001e\rͼ\u0006!���S\u0006>\u0000\u000e\n\u001e\rͼ\u0006!���S\u0006��!��6\u0007>#��\u000e��N ��\u0001�U(\u0004>���!\u0005\u0000�\u0016\t�!��6\u0007>���\u000e��N ��\u0001�d�����������!\u0000\u0000\u0006\u0000\u0016\b)\u00070\u0001\t\u0015 ��]T!\u0000\u0000\u0006\u0010��\u0013�\u0012�\u0015�\u0014}�0\u0004|�(\u0007\u001c}�o0\u0001%\u0005 ���|�}/o|/g#�!&�>�2�26w!t@\u0001\u0010\u0014*��(\u0001�\f\u0005 �\u0001�\u0001!0ޯ\"\u000by� �>��\u0006>\u0004�\u0007���\u0004��Ɉ�\b\u0000\u0000��\b\u0000\u0000�\u0000\u0000\u0000\u0000�\u0000\b\u0000\u0000o&\u0000)\u0011�J\u0019*fo��������!0�>�\u0006\u0010�ZA<�� ��!0�\u0001/\u0000>\u0004�\u001a\"\u0013\u001a\u0013w\t�= �!������!����!\u000f�˾!?�˾!o�˾!��˾!��>�\"6\u0000#\"\">\u000f\"\"\"\"����%����o&\u0000)\u0011yJ\u0019*fo���������\u001a\u0013O\u0006\u0000!0��\t�0%�x\u0001�\u0000\t���G����\u0010G����ZA��\u001a\"\u0013\u001a\u0013w\u0001^�\t˶�\u00010\u0000\t�\u0004x�\u00048�!������!���������\u0011SJ\u000e\u001e\u001a\"\u0013\r �x\"�\u0005G�w�}�\to|�\u0000g\u000e\b\u001a\"\u0013\r ����������>\u000b��!��˾�!0�\u0001\u0000���A͕B!��~\u000f�\u0002w�����!��������������>\u000b���!���~(\r����!��\u0001\u0000���A��������>\u0004���}�\u001f_|�\u0000W\u001a\u00070\u000fYP�\u0005B��B�����\u0005B�\u00110\u0000\u0019��= ��*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u0013*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u0013*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c*\u0012\u001c~\u0012�!��*O�\" \u0004~�(\u001f#^{�\u000f�\u0000@�<{\\�7�\u000f�\u0000@|\u0007\u0007\u0007�p��$�������%ɯ������!��ˆ�\u001f��g(\u0018!\r�5 \u0012���\u001f��yI�jH!\u000e�>\u0001\"w!\u000e�5�zE!\u000f�5̳F�SD��D�:E�\u001f��@�\u000e��\b��\u0011G�\u001f��\u0003(\u0007�\u0000�\u0001= ���ߡ�����\u001f��\u0003�\u00020\u000f��߷(\t�\u001e�<O�/���\u001f��\u0003�\u0002 3!���~\u000e\u0001(\u0002\u000e\u0002y�($y/�w�/��o&\u0000))))\u0001�L\t��\u001a>��\u001a\u00010\u0010*�\f\u0005 �!\u0012�*��O~�\u0007�\u000f\u000f\u000fO�\n��\u000f���\u0001�\u0000@�\u001e��\u0002O|�7��G�\u001f��\u0003�\u0002��C!����Cxw/\u000f� �`�\u001c��C#x�(Cw�>��#\u0018;�\u001f��\u0003ƴo&�x�w>\u0000(\u0004x�>�����9D�\u001e��\u0003O�\u001f��\u0003�\u0002 \n�&\u000f\u000f\u000f/��\u0018\u0003���G�\u000eJ�\u001a��x��G�\u0006�W���O��\u0007y0\u0006�\u0000�/����8\u0002>���Oz�\u000f��\"�!\u0002�*OF�\u001a�րo�g�\b�\u000f����\u0000J\t�!\u0016�~�(c5 `.\u0010*fo*�� \"*_*O\u0006��\u0013��\b�\u0013�W\u000f\u000f\u000f�\u001f�0\u0003\t\u0018�z�\u0007�\u0013�\u0018��\u0016�^#*W�\u000fO�\u0015�����\u0015�{�\u0014��z(\u0011*\u0001\u0012�\u0002z�7�\u0007W\u0003\n���\u0002}�\u0010�|�\u0011�!\u0015�:�\u000fW:_:n�\u0007gD\u0019|��\b(\n!�\u0007�Z(\u0003!\u0000\u0000\u0001\u0012�}\u0002\u0003|�\u0007g\n���\u0002�!\u001c�~�(-5 *.\u0018*fo*�� \u0007*O\u0006�\t\u0018�W�\u0001\u001c�\u0002\u000b*\u0002\u000b�z(\u0002*\u0002}�\u0018�|�\u0019�!\u001a�*N�G\u001f�\u00070\b\u0006\u0000�y \u0002\u0006�x�\u001a���\u001f��\u0003�\u0003�!\u0007�:� \u0007+:F+2p�:րO�G:W:_:ng\t|� \u0002}�(\u0004�� \u0007>��\u0006�kb}�\u0002�|�\u0003���\u000b޷�!\u0000�*fo~��()!\u001f��^(\"˞�\u0017އ!�J�&J~�(\u0012_\u0007�W\u0019]T!\u0010�s#r!\u0016�6\u0001�=G�\u001f�O�0� y )�\u0003�!pL�&Jx��&J��jI�}�\u0000�|�\u0001�!\u001f����\u000f��\r���F�\u0003�\u0003x ,�\u0007G!\u0006�~���2~�(SO��߷�!\u0014ޯ\"\"w�\u001f��w(cy�!>��#\u0018ZͭI��I}�\u0004�|�\u0005��\u0007޷(\"�� \u0003�\u000f�O�\u0002ޕo�\u0003ޜg�͗F��| \u0002/<ƀ�\u0006���߷�!\u001f����\u0017އ!�J�&J#D}!\u0010�\u0011�\u0007͏F##6\u0001�\u001dއ!�J�&JD}!\u0018�\u0011�\u0000͏F6\u0001�\"x\"{\"z\"���3@�\u0010@�z� \u0007{�(\u0006���>�}��>\u0001��\u001f��\u0010 \r!.�~�(\u00065+:V\u0018M�IG���UGW�\u001f��\u0010z \u001a�,��\u000f�\u000e \u0011��IG�_�7�\u000f<�.�{�\u000f�\u000f�\u000f(\u000b�Eo>J�\u0000g~\u0018\u0005��IG�G�\u001f��\u0010x \u0003�-��\u000f�O�\u000b��� \u0017\u0006\u0000�\b�!\u0000\u0000\t� 0�)))))|� \u0001<�\u000e��\b�\u000f���z�7�\u000f´E�!\u0000�^#V\u001a\u0013r+s�\u0001�F���8\u001b��82��8Ao��!$I�\u001fJ:V+^�=�IG�!\b���0\n�ЇO~���w�\u000f���\u0002��\u000e\u0018����\b�IG�\u000fO!\n�~���w����7\u0007��O!\b�~�\u001f�w!\u000b�6��!\u001f��f 1�V \u000b˾!\b�~��w��˾~�\u0003o���7���Oo>��\u0000g��!����!����\u0018�!\u0000�^#V\u001br+s��!������\u0006��\t���\u000b���\u0007���\u0017���\u001d��O�\u001f��\u0003�\u0003�y�\u0006��\u0006\u0001\u0018\u0006\u0006\u0010\u0018\u0002\u0006\u0011�\b�����\b����jI�͂I�͙IO�yI\r��jH�pIyÂI�yI�jHO�IGG�jI\t}�\u0000�|�\u0001��O�IGG!\u0000�*fo\t\u0018��/��\u001f��\u0003�\u0002 \u000e!��>\u0001�~(\u0002>\u0002�w��!�����G�\b�\u000f���xͭI��I}�\u0002�|�\u0003���O!\f�~怱w�!��N���H��w��7�1��H�7�\u000f�w>\u0001����_���(\u0011\u0007�/�W�G��@z(\u0003x����pG\u000f\u000f�\u0010�\u0000��� O!\u001f�~�߱w�O�\u001f��\u0003�\u0003�y�\u0005��\u0015H\u0001\u0019H\u0001�H\u0001\bI\u0001\u001dH\u0001�H\u0001�H\u0001�H\u0001\tH\u0001+H\u0000/H\u00003H\u0000\rH\u0001\u0011H\u0001�G\u0000HH\u0000?H\u0001[H\u0000aH\u0001\u0014I\u0001sH\u0001\u0006H\u0001\u0000H\u0000�G\u0000!\u0000�*fo}͂I|͂I�͙Ig͙Io���!\n�~�\u0010w�7=�\u000f� o&��w���!\n�~�\u0010w�7�\u000f� o&�~��O�\f�\u0007�/G�y�x�\u000f��\fO8\u0007�\fOx�\u0010Gx��G\u0007��\u000f��7G����\u0007��\u00068\u0005\u0007�/�\u0006���yɇ�-o>J�\u0000g*fo���I�\t�O\u0006\u0000\t����\u0007��,�\u001d= ��}/o|�\u0007g#}�\f|�\u0007��Ʌo|�\u0000g��\u001fJ*fo�T\u0007�\u0006z\u0006\u0015\u0006�\u0005]\u0005\t\u0005�\u0004n\u0004*\u0004�\u0003�\u0003\u0001\u0003\u0006\b\t\f\u0010\u0012\u0018 $0H`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u000f�\u0000\u0000\u0002\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��J\u000bM\u0016M<MZM�M�M�M�M�M\u001bN�N�N\u001dO�O�O*P\u001dOyP�J�P�S�T�W�[\\`8d�hcigj\u0019k�kJl�p\u0000�J�J�J�J��J�J\u0004K\u0014K\u001cK,K<KCK�K�K�K�K\u0007L\u0010L#L7L>L@LHLRL\\LfL\u0004\u0000\u0000\u0000\u0000\u0001\b\u0007\u0001\u0000\u0000\u0000\u0000\u000f\u0000\u0000\r\u0005\u0000\u0000��\u0003\u0000�\u0000\u0003x� \u0000�\u000f\u0005\u0000t��\u0000\u0000\u0000\u0005\u0000\u0000��\u0003\u0000�\u0000\u0003x��\u0000�\u000f\u0005\u0000\u0000��\u0002\u0000�\u0000\u0003x�\u0010\u0000�\u000f\u0004\u0000L\u000f\u0000\u0000\u0000A\u0003\u0000��\u0003\u0000�\u0000\u0003\u0000��\u0003\u0000�\u0000\u0003\u0000�]\u0003\u0000�\u0000\u0003\u0000��\u0003\u0000�\u0000\u0003\u0000� \u0003\u0000�\u0000\u0003\u0000��\u0003\u0000�\u0000\u0003\u0000�\u0010\u0003\u0000�\u0000\u0003\u0000��\u0003\u0000�\u0000\u0000\u0001\b\u0004\u0000�\u000f\u0000\u0001\b\u0005\u0000\u0000��\u0000��]1\u0006\u0000��\u0006\u0000�\u0000\u0006\u0000��\u0006\u0000�\u0000\u0006\u0000� \u0006\u0000�\u0000\u0006\u0000��\u0006\u0000�\u0000\u0006\u0000�\u0010\u0006\u0000�\u0000\u0006\u0000��\u0006\u0000�\u0000\u0000\u0001\b9\u0006\u0000��\u0006\u0000�\u0000\u0006\u0000�]\u0006\u0000�\u0000\u0006\u0000��\u0006\u0000�\u0000\u0006\u0000� \u0006\u0000�\u0000\u0006\u0000��\u0006\u0000�\u0000\u0006\u0000�\u0010\u0006\u0000�\u0000\u0006\u0000��\u0006\u0000�\u0000\u0000\u0001\b\u0005\u0000���\u0000\u0000�\u0000\b\u0006|�]\u0000\u0000\u0000\u0003\u0000�\u0000\u0003x��\u0000�\u000f\u0011\u0003\u0000��\u0002\u0000�\u0000\u0003\u0000�P\u0002\u0000�\u0000\u0000\u0001\b\u0004\u0000\u0000\u0000\u0000�\u000f\u0000\u0000�\u0000\u0000�\u0000\u0000��\u0012\u0000\u0002\b\u0005�\u0005\b��\u0014\u0000\u0002\f\u0004�\u0004\f��\u0010\u0000\u0002\u0011\u0004�\u0004\u0011��\b\u0000\u0001\u0014\u0002�\u0002\u0014��xLxLxLyL��L�L�L�L�L�H�o\u0001�x�o\u0001��H�o\u0001�(�o\u0001�\b�o\u0001��\b�o\u0001�\u0006o\u0001��H�o\u0001��H�o\u0001�(�\u0007o\u0001���������\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000���̻���wfUD3\"\u0011\u0000�n�٨x�\t��vsE*\b�����̺�vUS333Vg���ݙ���!\u0000'\"gwP��\u0002\u000eM�\u0000���o\u0003�\u0003\u001bM M��\t\u0000��\b\u000f\u0003�\u0001\u0000����\u001f\u0002_\u0002�\u0002�\u001f\u0002_\u0002�\u0002�\u001f\u0002�\u0002?M�\u0000�@��\u001f\u0001\u0001\u001f\u0001\u0001\u001f\u0001\u0001\u001f\u0001\u0001\u001f\u0001\u0001�\u0003_MdM��\t\u0000��\u0007\u000f\u0003�\u0001\u0000��\u0000�\u0004�@�\u0003ҏ\u0004�\u001f\u0004ҏ\u0004�\u001f\u0004�\u0002�M�\u0000���\u0003���\u0006�\b�\u0006�\u0006�\u0006�\u0004�\u0006�\u0002�M�\u0000�@��o\u0001�o\u0001�\u0007o\u0001�\u0003o\u0001�\u0003�M�M��\t\u0000��\u0007\u000f\u0004�\u0001\u0000��\u0000����\u0005�\t�_\t�\b�M�\u0000�\u0000�o\u0002� �o\u0002�@o\u0002�\u0010o\u0007�\u0000��o\u000f�\b�M�\u0000�\bo\u0001�o\u0001� �o\u0002�@o\u0004�`o\u0003��\u0006\u0000�\u0006�\u0001\u0000��Po\u0002�`o\u0003�\u0002\u001eN�\u0000����\b_\u0001�?\u0001�\u001f\u0001�\bo\u0001�O\u0001�/\u0001�\b\u0001�_\u0001�?\u0001�\b�\u0001�o\u0001�O\u0001�\b�\u0001�\u0001�_\u0001�\b�\u0001ڏ\u0001�o\u0001�\b�\u0001ڟ\u0001�\u0001�\b�\u0001گ\u0001ݏ\u0001��\b\u001f\u0001�ڿ\u0001ݟ\u0001��\b/\u0001���\u0001ݯ\u0001��\b?\u0001�\u001f\u0001�ݿ\u0001��\bO\u0001�/\u0001���\u0001�\u0000\u0000��\b_\u0001�?\u0001�\u001f\u0001�\bo\u0001�O\u0001�/\u0001���\b�N�\u0003�P�o\u0001\u000f\u0001�0o\u0001�\u0000o\u0001��O\u0001�\u0000O\u0001\u000f\u0001�\u0000O\u0001�\u0003�N�N�\u0002�@�\u0003��\"\u0000�\b�\u001d\u0000�\u0005�\u0018\u0000��r\u000f\u0001�@�\u0003��\u000b\u0000�\b�\u0006\u0000�\u0005�\u0001\u0000��O\u0002�\u0002�\u0002�?\u0002�\n\"O]O\u000f\u0004�\u0000����\b_\u0001�\u001f\u0001�ߟ\u0001O\u0001��\u0005_\u0001�\u0006\u001f\u0001��\u0007�\u0001O\u0001��Y\u0000�V\u0000�\b�Q\u0000�\u0004�L\u0000�\u0003�G\u0000��\u0003�\u0000�o\u0001�\u0010o\u0001� o\u0001�0o\u0001�\u0000�\u0007o\u0001�\u0010o\u0001� o\u0001�0o\u0001\u000f\u0004�%\u0000�\"\u0000��\u001e\u0000�\b�\u0019\u0000�\u0006�\u0014\u0000�\u0004�\u000f\u0000�\u0002�\n\u0000���\u000b�\u0006�\u001f\u0006��0o\u0002�@o\u0002�Po\u0002�\n�O�O�\u0000�@��\u0006o\u0001�o\u0001�o\u0003���\f��\u0000� �\u0006o\u0001�o\u0001�o\u0003�\u0000��o\f�\u0003�O\bP�d�\u0000��\u001f\u0001�\u0000\u0001�@�\u001f\u0001�\u0000\u0001�\b�\u0006�\u0004��d\u000f\u0001�\u0000��\u001f\u0001�\u0000\u0001�@�\u001f\u0001�\u0000\u0001�x�\b�\u0004�\u0006�\u0004�\n/PPP��\u000f\b�ڟ\u0002_\u0002\u001f\u0002џ\u0001_\u0001\u001f\u0001П\u0001_\u0001\u001f\u0001�\u0001_\u0001\u001f\u0001��\u0003�\u0015\u0000�\u0012\u0000�H�o\u0002�Xo\u0002�ho\u0018��oD��\u0000�(o\u0002�8�\bo\u0001\u000f\u0001�\u000f�P�P�P�P��PqQ�R�S�\u0006�\u0000����\u0002���\u0004��p��\u0004�\u0000�\u0004��p����\u0005�\u0006��\u0001�@�\u0000�\u0000���\b�@�\u0000��p��������������\b�\u001f\u0000�����U\u0000�`\u0000�c\u0000?r�J\u0000�`\u0000ԏ�����\\\u0000�\b�j\u001aӪ��\u0018ӊj\u001fT5Ee�j�\u001b�h_�eU\u0015ӪԪ���\u0018�h�ӊ�?T�\u0015Ե��ӊ�?`\u0015ӵ����2Bb����\u0012:\u001aeE��:\u001aӸ�Ө����:\u001ah�Ԏ\u0002b�\u0002�b�\u0002��\u0012Բ���bR\u00122\u0012��\u0002�\u0012\u0005�:�?\u0018��9����P\u0000�y\u0000��\u0000��\u0000�D\u0000�A\u0000�j\u0000��\u0000�\u000b�\u000f\n�\u0007\u0002���������?2�\u0013����\u0000����\u0007�~�����2������\u0000�\u001d���������\u0000��2b��\u0012Rb��\u0012�2b��\u0012Rb��\u0012R\u0012ԢbR\u0012Ӣb�R\u0012ӢbR\u0012Ңb��B���2B���2�B���2B���2�2Բ�B2Ӳ��b2Ӳ�B2Ҳ���b��\u0012B���\u0012B�b��\u0012B���\u0012B�ՂB\u0012Ԣ�B\u0012Ӣ�bB\u0012Ӣ�B\u0012Ң��b���2B���2�b���2B���2b2Բ�B2Ӳ��b2Ӳ�B2Ҳ�\u0002��2b���2bӂ��2b���2b�b2Բ�b2Ӳ�Ԩ��?\u001c��\u0015e���>\u0002\u00122\u00025\u00122\u0002b�bR2R\u0012���b2R\u0002Ԃ\u0005����\u0018������F\u0000�Z\u0000�W\u0000�y\u0000�v\u0000�7\u0000�4\u0000�T\u0000�E\u0000�g\u0000�d\u0000�n\u0000�k\u0000�6\u0000�X\u0000�b\u0000�k\u0000�C\u0000�L\u0000�o\u0000��\u0000��\u001e\u0015\u001e\u0002\u001e\u0005\u0012��b����`�bR\u0012�b����`��\u00122��c����`��Bb��c����`Ԃ2Ӳ��c����`�Bb���n\u0015n\u0002n\u0005b�\u0012Bb��g����`�2b���g����`�\u0012Բ���h����`�B��\u0012�h����`ԂbB��>\u0002Ң�55Ң�5��Rb\u0012҂�2\u0012Ң�\u0012�b��5�78�� �\u0016\u0000�\u0013\u0000�\u0010\u0000�\r\u0000�\n\u0000�\u0007\u0000�\u0011\u0000�\u0018\u0000��\n\u0000�\u0007\u0000�\u0004\u0000�\u0001\u0000�\u001e\"%\u001eB\"\u0002\u001e\u0002�.b\u0002'%�\u0011T\\TmTyT�\u0000�\u0000���\u0000��\u0005�\b��\u0005�@�\u0004�p���\b���������������\f\u0000Կ\u0004�\u001f\u0004���?d��\u001f\u0004?\u0004o\u0004�\u0004o\u0004�\u0004�\u0004�\u001f\u0004ӏ\u0004�\u0004�\u001f\u0004?\u0004o\u0004�\u0004\u001f\u0004?\u0004o\u0004�\u0004o\u0004�\u0004�\u0004�\u001f\u0004������\u0003�������ԯd������M���?d�� ��o\u0002��o^�\u0000�H�o\u0001�(�o\u0001�\b�o\u0001��T�U�VWW�\u0006�\u0000���p��\u0004�\u0000�\u0004��p����\n��\u0006��\u0004���\u0004��p��\u0004�@�\u0004��p��\u0007�@�\u0000�p���\u0006���\u0000�\u0000������������\r\u0000�\n\u0000�����~\u0000��������\u001e\u0000�B\u0000�\u0018\u0000�H\u0000����\b�L\u0000�L\u0000�Q\u0000�F\u0000�Q\u0000�\u0005�����\u0005>\u0005\u001e\u0005����������{�5���\u001c�\u0004�\u0004�q���8��h�;�f�\u00188����\\�8E5\u001f\u000e\u000f\nj�M8�HhӸԿx�hHh?x��\u00188�8��5ӵ�\u0018Ӆ��eE5��\u00185Ee���eE5E\u00185Ee������eH5H�e�\u0002�r��2rӢ�2r�Ӣ�2r���\u00122���\u0013\u0000��\u0000�\r\u0000��\u0000������\u0000��������(\u0000�^\u0000�[\u0000�\u001f\u0000�]\u0000�a\u0000�����.\u00005�:\u0000�\\\u0000�^\u0000�!\u00005�-\u0000��6\u0000�3\u0000�0\u0000�-\u0000�*\u0000�'\u0000�$\u0000�!\u0000�\u001e\u0000��-\u0000�*\u0000�'\u0000�$\u0000�!\u0000��\"\u0000�\u001f\u0000�\u001c\u0000�\u0019\u0000�ԂՂԎ\u0005�b�b�n\u0005�b�b��5e���E�5�E���e�5��\u00185JeE5\u0015ӵ��eE5��\u00158eE5\u0015ӵ���\u00155�JjHԅeE5\u0015ӵ��eB�B��\u0012B҂�\u0012B�\u0012B��rҢ�2r�2r��\u0012�2r��\u00122Rr������!\u0000�y\u0000�\u001b\u0000�x\u0000�V\u0000�O\u0000�4\u0000�r\u0000�J\u0000�C\u0000�z\u0000����\"\u0000�#\u0000�%\u0000�\u0019\u0000�\u001a\u0000�%\u0000�(\u0000�)\u0000�\n\u0000�'\u0000�2\u0000�\u0001\u0000�Ҏe�neNe�n5�e҅Ӆ�n5�he�Ҿe�Ҟe��~%�%�5ӵҵӵ�ҞEӕҕ��%~%��~%�%��\u0015�\u0015�5�5�E�E�\u0015�\u0015��\u001ee>5�85�� �'\u0000�$\u0000�!\u0000�\u001e\u0000�\u001b\u0000�\u0018\u0000�\u0015\u0000�\u0012\u0000�\u000f\u0000�\u0019\u0000�\u0016\u0000�\u0013\u0000�\u0016\u0000����\n\u0000�\u0007\u0000�\u0004\u0000�\u0001\u0000�\u0018\u0015%\u0018(�\u0015.\u0015.b��W�X!Z%[�\u0006�\u0000���p��\t���\u0000�\u0004�\u0000��\u0004�@�\u0004��p��\u0004�\u0000�\u0004��p��\u0000��\u0000�\u0000��\u0001���\u0000���������������\b�J\u0000������\u0000��\u0000��\u0000��\u0000��\u0000��\u0000��\u0000��\u0000����\b�&\u0000������\u0000��\u0000����,\u0000_<�.\u0000�/\u0000�\u001c�/\u0000�1\u0000�l�1\u0000�����.\u0000l�/\u0000����-\u0000Ӽ�,\u0000�ӯ8\u000f\u0010���h���ZҪ����\u0018��*�j��\u0018(��\u001aӺ��h���*\u001a��h���h�\u0010�ӚZҚ��*Ȩ�ӊZҊ��\u001aȨ��*�\u0018Ӹ�ӭ\bHh��\b��\u0018Ӹ����\u0000�!���p��\u0000��\u0000�\b\u0001�\u0014\u0001�\u0002\u0001�\u0013\u0001��\u0000��\u0000��\u0000�\u0002\u0001�\n\u0001�p\u0000�����p�\u0011\u0001�j�\f\u0001�p�\u0007\u0001�j�\u0002\u0001�p��\u0000�j��\u0000�p��\u0000�\u0006\u0001��������?�_\u0010����`�d\u0000�����5��6��\u001f\u001c�`����O\u0000�����)��+��o\u001c����X�:\u0000�s���\u001e��\u000f\b����\u0019�o\u001c�u��X� \u0000�Y���\r�����\u000b�ӿ\u001c�]��X�\b\u0000�A���\u0001���߯\u0003�\b�\u0003��?\u0003��\b�\u0003�߯\u0003�\b?\u0003�߯\u0003��\b�\u0003�?\u0003��\b�\u0003�߯\u0003�\b?\u0003\u0001�\u0003\u000f\u0002��\"Ԓ\"�R\"�R\"�R\"r\"R\"��\u0012Ԃ\u0012�R\u0012�R\u0012�R\u0012�r\u0012R\u0012�r������\u0012�b\"�b\"�b\"�bB\"Bb��Ӣ��2b���2b�b2Բ�b2Ӳ�Ӣ\"R��\"ӂ��\"RӢ�\"R�\"R������<\u0000�9\u0000�u\u0000�r\u0000�}\u0000�z\u0000�i\u0000�f\u0000�q\u0000�|\u0000�\u001e\u0000�\u001b\u0000��\u0000��\u0000�{\u0000��\u0000�u\u0000��\u0000�o\u0000��\u0000����\u0016\u0000�\u001d\u0000�\u0010\u0000�\u0017\u0000�\u001e\u0000�$\u0000�\u0018\u0000�\u001e\u0000��>\":ҥ�\u00155��>\":�\u0015�Ņ�Ҿ\"��e���Ҿ\"�ӕ�E��~\u0015r�r�r�r�~\u0015�Ү\u0015�ӢҢӢҮ\u0015��N\u0015B�B�B�B�N\u0015�҂ӂ҂ӂ҅�ӂ҂ӂ҂ӂ҅�ӂ��b�b�b�b�eb�b�b�b�\"�\"�B�B�b�b��ҢӢҢӢҥ�ӢҢӢҢӢҢӢҢӢ�� �$\u0000�!\u0000�\u001e\u0000�\u001b\u0000�%\u0000�\"\u0000�\u0012\u0000�\u000f\u0000�\f\u0000�\t\u0000� \u0000�\u001d\u0000����$\u0000�!\u0000�\u001e\u0000�\u001b\u0000�� \u0000�\u001d\u0000�\u001a\u0000�\u0017\u0000��\u001d\u0000�\u001a\u0000�\u0017\u0000�\u0014\u0000�\u001e\"\u0015%\u0018%\u001e\u0002�\u001e\u0015\"\u0012\u001e\u0005%\u001e\u0002�\u001eB%\u001e\"%\u001e\u0002��[\u0015^d_�_�\u0003�\u0000���u��\u0002�@�\u0004��e��U��\u0002�\u0000�\u0004��e��\u0002�\u0000�\u0004��e��������������\u0007��\u0000��\u0000��\u0000��\u0000��\u0000��\u0000�{\u0000��\u0000�.\u0000����\b�\b\u0001����\u0007�\u001e\u0000����\b\u0002��\u0001��\u0001��\u0001��\u0001�}\u0001��\u0001��\u0001���\u0002�r\u0000�|\u0000��\u0005\u000f\u0007����\b�y\u0000�q��\u0007\u0002�Y\u0000�t\u0000_\u0005\u000f\u0007�n��\b�s\u0000�Y��\u0007�u\u0000�\u0000�o\u0000��\u0000�i\u0000�s\u0000��\u0000�\u0002�?\u0004\u000f\u000e7��/*���\"��*�\u0004\u000f\b�\u0004\u000f\u0002��$\u0001�\u0004\u000f\b�\u0004\u000f\b�\u0004\u000f\b�\u0004\u000f\u0002�Ԃ��2\"ԯ\u0005\u000f\u0007��ԏ\u0005\u000f\u0007��r2��U�w_\u001e�ԏ\u0005\u000f\u0007�uR2r���Ӈu2r_\u001e�\u0002���2rR/\u0005\u000f\u00075��\"���%�¢�\"��\"��ե�r2����2rR/\u0005\u000f\u00075\"��ե�\u0005\u000f\u0007�\u0005��\u001b�\u0006�'�\u0000a1a1\u0011ӱ�\u0011ӱ�a�a1\u0011ұ�\u001f\u0002ҿ\u0002�\u0002o\u0002�\u0002�\u0002�\u0011ҁ��\u00111ҁ��\u00111ҁ��\u00111ҁ��\u00111ұ�\u0011�\t�\b�\u000f�\u0000�2b���\b�\u000b�\u0015�\u0000Ӳ�b�\u0015Ӳ�b��2\u0012Ӳ�\u0004\u000f\u0002�2\u0012Ӳb�\u0004\u000f\b��\b�\b��\u0000�\u0004\u000f\b��\u001a�\u0001?\u001e�\u0000�ԁa���\u0011Ա�ԁa1a1\u00111\u0011ӱ�\u0011ӱ�a�a�QaQ\u00111ұ�\u0011Ҥ��2e��Rb2\u0002d��Qa��\u0011Tb2Ӣ��2b��Rb����\u001a�\u0004o\u001e�\u0000��_62\u0012�¢�r2Wӥ��\u0012�Rr5�5\u0012�¢�\u001eR��\u0012?\u001eRr��\u001e��rR2���O\u001e��\u000f\u0001�\u0000\u0000������\u0000��\u0000��\u0000��\u0000��\u0000��\u0000��\u0000��\u0000\u0002�K\u0000�{��\u000f\u0005���\u000f\u0001�=\u0000�m��\u000f\u0005\u0002�;��8��5��2��/��6��=��\u000f\u0007��\u0000��\u0000\u0005��\u0000��\u0000\u0005��\u0000��\u0000\u0005��\u0000��\u0000����#��\u0004��\u000e��\u001d���l\u0000�\t���\u000f�\u0002����\n��\b���`\u0000�����B\u0000�b\u0000�<\u0000�d\u0000�6\u0000�V\u0000�e\u0000�\u0002ӏ\u0004\u000f\u000e��ӯ*���Ӫ�_\u0004\u000f\b_\u0004\u000f\u0002�Ӥ\u0001�_\u0004\u000f\b_\u0004\u000f\b_\u0004\u000f\b_\u0004\u000f\u0002�\u0002ӂ��2\"ӯ\u0005\u000f\u0007�����8'��\u001e��X7%Ң�\"��\u001e�Ӣ���r��Ӣ��uR2���Ӆ��2\"ӯ\u0005\u000f\u0007Ţ��uR?\u0005\u000f\u0007��\u0017�¢��ӥr5�?\u0004\u000f\b?\u0004\u000f\u0002�ӥr5Rr1\u0001�ӢrBǥ���1��?\u0000�<\u0000�9\u0000�P\u0000�M\u0000�J\u0000�G\u0000�*\u0000�'\u0000�>\u0000�;\u0000�8\u0000�5\u0000�C\u0000�F\u0000�=\u0000�G\u0000�7\u0000�:\u0000�1\u0000�D\u0000����\n\u0000�\u0007\u0000�\u0004\u0000�\u0001\u0000��Uťr�r�r��r�҅�5\u0015Ң������\u0012Ң��\u0015eU\u0012��52�u5��52�r�52��5�r�������� �B\u0000�L\u0000�N\u0000�F\u0000�O\u0000�3\u0000�0\u0000�-\u0000�*\u0000�'\u0000�$\u0000�!\u0000�\u001e\u0000�\u001b\u0000�\u0018\u0000�\u0015\u0000�\u0012\u0000�\u000f\u0000�\u0019\u0000�\u001b\u0000�\u0013\u0000�\u001c\u0000����\n\u0000�\f\u0000�\u0004\u0000�\u0006\u0000�\u0015%\u0015%�\u0015\u0012\"\u001e\u0002%�\u0015\u0012\".a��`�a�b\u001ed�\u0006�\u0000����\u0004�@�\u0004��p��\u0004���\u0004��p��\b�@�\u0000��p��\u0002�\u0000�\u0004��`�����������]\u0000������\u0001��\u0001��\u0001�M\u0000������\u0001��\u0001�\u0001\u0002������\u0000������\u0000��������\u0000������\u0000�������\u0000������\u0000�������\u0000������\u0000�����l��\b�\u0017\u0000�\u001d\u0000�(\u0000F\u001f@�'\u0000�\b\u0000�\u000e\u0000�%\u0000���\u0016Cf�\u0018Ӄ�ӳ�\u0013�c���\u0016CfC��(i��Ccs����(iK\u0018��Ԇc�ӸԸ�vcvӸԸ���vcv\u0018����vcF8����vcF3�3c��3C3��vcv\u0018ӘC��3c��3c��S��\u0013S��\u0013��\u00133\u00036ӣ�\u00133\u00036ӣ��Ã��3c��\u0013�Ãc3�ӳ3c��3c\u0013�S��\u0013S��\u0013�3c�3c�\u0013�3c�c�ӓ�\u0013cӳ�3�\u0013C�3c���K\u0000�q��~��B\u0000������������\u0000�x�\u000f\b�\b���������\u0000�g�\u000f\b�\b����q����\u0000��\u0000��\u0000�P�\u000f\b�\b�������9��\u000f\u000e���������O\n�2���\u001f\u0000�!��\u000f\u000e�������\n�'����������������(iF\u001fh��OxӸ�Hh�x���Ƹ�vc�Kӿ8�s��Cӳ�CsCs�s���\u0018Ԗ�F�scsc��F#�Ƴӳc��3�c��\u0019Գ�sC\u0013C\u0013ӓ��c��3c��3Ӄ�\u0013S��\u0013S�Ӄ�\u0003�S��\u0003�S�Ӄ҃��3҃�Ӄ҃��3҃�3���n��?\u0000�<\u0000�X\u0000�U\u0000�3\u0000�0\u0000�L\u0000�Y\u0000��\u0000��\u0000��\u0000��\u0000��\u0000��\u0000��\u0000��\u0000��\u0000��\u0000��\u0000��\u0000��\u0000����p�!\u0000�\u001e\u0000�\u001b\u0000�\u0018\u0000�x�\u0013\u0000�\u0010\u0000�\r\u0000�\n\u0000�p��\r\u0000�C\u0000��\u0013�\u0013�\u0013�\u0013��C��Cҳ�cҳӃҳ�cҳ�Cҳs�#S#s#�#s�s�S#ғ�C�C�C�\u0013�C�ғӓC����s�s�sҳ�c�c�c�ҳ�3c�c\u0013S��\u0016Ӄ��3�3�\u00163�҃�3҃�f3҃�3҃�f\u0013�ҳ�3ҳ�f�ң�Sңӆ��҃�3҃�f���3�3�\u00163ң�Sңӆ���c�\u0013c҃�3�ғ�C�ҳ�c��� �\u0006\u0000�\n\u0000���\u0016\u0013(\u0016\u0013(�\u0016\u0013&\u001e#&\u0013�od�e?gzh�\u0006�\u0000���p��\u0004�@�\u0005��p����\u0002��\u0001���\u0000�p���\u0004���\u0005��p�����_����\u000f\u0001�\u0000\u0000����\b�N\u0000b�J\u0000�U\u0000�D\u0000�S\u0000�T\u0000�\u0006\u0000�\u0003\u0000�����V\u0000�����^\u0002������\u0000��\u0000��\u0000��\u0000��\u0000��\u0000��\u0000��\u0000���\u0000��\u0000��\u0000�}\u0000��>\u0001\u0011>\u0002\u00111ӡ�\u0011���a\u0011��a��Ԯ\u0001��\u0001��\u0011Ա�\u000f\u0015��2��a21��Rd�$\u0015���\u00122O\u001b��G���aA1A1\u0011�:�ҵ7���b�\"\u0012ґba�\"\u0012ҒT�D'���\"DҔ��²�\u001b�\u0014��qaA!\u0011A�\b���!�a�\u0011��!�aӸ�ӲR�Ӳ�\u0011\"!\u0012Ӳ�\u0012�Ӳ\"�Ӳ\u0012�ӡ\u0011a��\u0011�a��\u0011o\u0014ӯ\u0002�\u0001��?\u0002O\u0005A!Aa\u0001bA!\u0011�Qa�\u0011ӡ�a���!a\u0001�\u001b��\u000f\u0001�\u0000\u0000������\u0000\u0012��\u0000�\u0004\u0001��\u0000�\u0003\u0001�\u0004\u0001�\u0006\u0000�\u0003\u0000��������\u0001\u0001��\u0000��\u0000��\u0000��\u0000�Q��\u0000��\u0000��\u0000��\u0000��\u0000�a��\u0000ԁ��\u0000��\u0000��\u0000��\u0000��\u0000�1��\u0000�a��\u0000��\u0000��\u0000��\u0000��\u0000ԑ��\u0000��\u0000��\u0000��\u0000��\u0000�A��\u0000��\u0000��\u0000��\u0000��\u0000�A��\u0005���{��x��u��r�����������������\u0000��\u0000��\u0000��\u0000��\u0000�Q�.\u0000�a�\u0019\u0000ԁ�]\u0000�Z\u0000�W\u0000������\u0000��\u0000��\u0000��L\u0000�I\u0000�F\u0000�C\u0000�@\u0000��H\u0000�E\u0000�B\u0000�?\u0000�<\u0000�Ӯ\u0001��\u0002��Q��4��\u0011Ӂ��\u00111��^\u00011Q\u00011�aQ\u000f\u0015��1��1��a�\u0011a�ԁ�\u0011���1�ԁ��a��a�ԑ�!���A�ԑ��A��A��j��\u0015%ӵj�e%E��Q��Q�\u000f\u0011�_\u0002o\u0001�ӯ\u0002�\u0005�\u0011�!\u000f\u0002�\u0002�\u000e�\u0015�Կ\u0005\u000f\u0007ӱ�!\u0001o\u001b�\u000f\u0001�\u0000\u0000�����2\u0000b�.\u0000�>\u0000�(\u0000�<\u0000�\u0006\u0000�\u0003\u0000����?\u0000��\u0000��\u0000��\u0000��\u0000��\u0000��\u0000��\u0000��\u0000��>\u0001ѡ�1\u00012ѡ�1ѡ�1���a\u0011��a���Q�\u0001����\u000f\u0015��2��\u00121�21��\u00122�b�\u0012Ba�ba�\u0012Bb\u0012҂��\u0011\u0012\u0011҂��\u0012҂�2b�҂��2b�Ҳb����b���\"Ғ��!\"!Ғ��\"Ғ�Br�Ғ��Br�B��\"A�BA��\"B�Ҿ\u0002Ӳұ�\u0002�ӢҢ�Ҟ\u0002Ӓґ�\u0002�ӢҢ�Ҟ\u0002Ӓґ�\u0002�ӂ҂~\u0002�r�qrqr�r�r��n\u0002�b�abab�b�b��^\u0002�R�QRQR�R�R��r\"Rq��Br��b��\u0001��aA!Aaұ�� �2\u0000�/\u0000�,\u0000�5\u0000�\u0006\u0000�\u0003\u0000����\u0010\u0000�\r\u0000�\n\u0000�\u0007\u0000�\u0011\u0000�)\u0000��\n\u0000�\u0007\u0000�\u0004\u0000�\u0001\u0000�BRBRN\u0001^\u0001N\u0001R�^\u0011R^\u0011_\u0005_\u0002_\u0005A^\u0011�BRN\u0001RO\u0002_\u0002_\u0005A^\u0011A��h*iMi\\i�\f�\u0000���`��\u0002�@�\u0004��p��\u000f�Z��������������\u0005Ԏ\u0012\u0002h�\u0002�\u0002�\u0002�eB\u00022\u0002\u0012\u0002ӵ�\u0012\u00022\u0002���\u001f�������\u0005�N\u0012\u00028�\u0002b\u0002B\u0002�5\u0012\u0002Ӳ\u0002�\u0002�b\u0002���_������ҝ�T����\u001f��� -/T(��i\u0018j1jfj�\r���\u0004��p��\r�@�\u0004��\u0000��\u000e�\u0002�\u0000���p���������������(�?(/(�o(�(�o(_(ӟ(�\u001f(�(�(��(�O(�(�(?(�ӿ\n�_\n�\n�\n�ӯ\n�O\n�\n�\n��/\n�\n�?\n/\n��\u001f\n\n�/\n\u001f\n��_\n�\n�o\n_\n��O\n�\n�_\nO\n�ԏ\n�/\n�\n�\n��\n�\u001f\n�\n\n���Y���\u001fP��P�OP?PPoP�P�P���J����������������������������������������������������j�j\u0003k\u0018k�\u0006���\u0000��\u0000��\r�\u0003���\u0010�\u0003��������������\u0007�\u0018\u0000�\u0015\u0000�\u0012\u0000�\u000f\u0000�\u001c\u0000�\u0019\u0000�\u0016\u0000�\u0013\u0000����U��5���5���5����5��%ҥ�%ҥ�%ҥ�������\u0018\u0000�\u0015\u0000�\u0012\u0000�\u000f\u0000�\u0015\u0000�\u0012\u0000�\u000f\u0000�\f\u0000���\u0005�u%xu%u�\u0005���U����U�����r��/�;+�ͫ���������Lk�k�k�k�\f�\u0000���`��\u0002�@�\u0004�p����\u0006��\u0001���\u0000�\u0006�p���\u000f�P������������������\u001e\u0002���e��\u0015��������e������\u0002����eE5ӵ�\u00155����_��������\u000e\u0000�\u000b\u0000������������\n\u0000�\u0007\u0000�\u0004\u0000�\u0001\u0000��\u001f\u0004o\u0004�\u0004�\u001f\u0004ԏ\u0004o\u0004���d�ҝ�����\u001f��� .\u001d��k*l>lIl�\r�\u0004���\u0000�\u0004��\u0001�@�\u0000�\u0000��������������\u0007�\u000b\u0000�\b\u0000�\u001d\u0000�2r���R�R����2�2�r�rӂԂ�����҂��2r���2r��������\u0007\u0005�����������2������<(8X|���lwm�n�o�\u0006�\u0000���p��\n���\u0000��p��\n��\u000b��\u0004�\u0000�\u0004��p����\u0002�@�\u0004��p��\u0000���\u0000�\u0000���\u0001�@�\u0000�\u0000�����\b�\u0000���p��������������3\u0000������\u0000��\u0000\u000b�~\u0000��\u0000����\u001c\u0000�����n\u0000�t\u0000\u000b�g\u0000�w\u0000����\u0007�v\u0000����\u0012\u0000�\"\u0000�\f\u0000�#\u00008�&\u0000�\u001c\u0000<���j�ڬ�_T%��c�ޯT���(8(����(���(��,UӯT�T��(8(����9��\\�7�ޥӯ<��|���5U5�xX8����%5Uӯl�Ԫ��?x�\u000bӵ�\u0015%jHhx�E5\u000b��zn\bEӺ�\u0018(Hox�8(�����\r\u0000�\n\u0000������\u0000�������>\u0000�R\u0000�O\u0000�L\u0000�I\u0000�F\u0000�C\u0000�@\u0000�=\u0000�:\u0000�7\u0000�4\u0000�1\u0000�.\u0000�+\u0000�(\u0000�����8\u0000�5\u0000�2\u0000�/\u0000���_\u0004�\u0006_\u0002�0\u0000��_\u0004�\u0006�\u0002�%\u0000���_\u0004�\u0006�\u0002�\u0019\u0000��_\u0004�\u0006�\u0002�\u000e\u0000��?\u0000�<\u0000�9\u0000�6\u0000���_\u0004�\u0006_\u0002گ\u0004�\u0006_\u0002گ\u0004�\u0006�\u0002�_\u0004ԯ\u0002�_\u0004�\u0004_\u0002�گ\u0004��\u0004_\u0002�گ\u0004�\u0006�\u0002��2��2Ԣ2��2Ԣ��ue%Ӹ\bҵ��E��\u0018�%\u0015ԵeE\u0015�h\b�ŵ�e��\u0005�\u0005Kjx�ueE%\u0015ҵ�b��\u0012bҢ�\u0012b�\u0012b��\u0012�b��\u0012�BҲ�B�����B�R���R���R������W\u0000��\u0000�Q\u0000�~\u0000�����\u0000��\u0000�����\u0000����~\u0000��\u0000��\u0000�|��-\u0000�V\u0000�'\u0000�T\u0000����c\u0000�p\u0000�d��r\u0000����T\u0000�|\u0000��\u0000�R���\u0000����\u0013\u0000�\u0014\u0000�\u0015\u0000�\u0016\u0000�\u000b\u0000�\u0016\u0000�\t\u0000�Үe��.e���e��^E>\u0005��~e��^e��U�R\u0002�u�r\u0002ҕӒ\u0002�U�R\u0002�҈�5�8҅x�5�8�u��XŨ�U5��2\u0002�U�2\u0002�u�2\u0002�5�2\u0002��h�\u0015h\u0018�e�҈�5�8҅��X��X��U��NE�E�E�5ӕ�u�u�nU�uN\u0005�E�En\u0005�e�e~\u0005�u�uN\u0005�E�Ene�e�� �i\u0000�f\u0000�c\u0000�m\u0000�p\u0000�g\u0000�r\u0000�z\u0000�w\u0000�t\u0000�x\u0000�n\u0000�k\u0000�h\u0000�u\u0000�<\u0000�9\u0000�6\u0000�3\u0000�V\u0000�S\u0000�P\u0000�T\u0000�J\u0000�G\u0000�D\u0000�X\u0000�^\u0000�[\u0000�X\u0000�U\u0000�_\u0000�\\\u0000�Y\u0000�_\u0000����\n\u0000�\r\u0000�\u0004\u0000�\u0007\u0000�\u0018(\u001e\u0005(�\u001e\u0005%\u0018\u0015%\u0015�\u0018(\u001f\u000b/\u0002/\u000b%\u0015�\u0018%\u0018\u0015%\u0015�\u001e\u0005%\u001e\u0015.\u0002%�\u0018%\u0018\u0015.\"�\u0018%\u0015.\u0005.\u0002%�\u0015>\u0002\u0015>\u0002\u0015>\u0002\u0015>\u0002�\u00155%5\u00155%5�\u00155%5\u0015%.\"��p�p�p�p�\u0004��\u0000\u0000�\u0000\u0001\u0000\u0000�\u0002\u0000\u0000\u0000\u0003\u0000\u0004��\u0004\u0000�\u0000\u0005\u0000\u0000�\u0006\u0000\u0000\u0000\u0007\u0000\u0004��\b\u0000�\u0000\t\u0000\u0000�\n\u0000\u0000\u0000\u000b\u0000\u0004��\f\u0000�\u0000\r\u0000\u0000�\u000e\u0000\u0000\u0000\u000f\u0000\u0001�\u0004(\u0000\u0001�\u0004'\u0000\u0001�\u0004&\u0000\u0001�\u0004%\u0000\u0001�\u0004$\u0000\u0001�\u0004#\u0000\u0001�\u0004\"\u0000\u0001�\u0004!\u0000\u0001�\u0004 \u0000\u0004��\u0010\u0000�\u0000\u0011\u0000\u0000�\u0012\u0000\u0000\u0000\u0013\u0000\u0004��\u0014\u0000�\u0000\u0015\u0000\u0000�\u0016\u0000\u0000\u0000\u0017\u0000\u0004��\u0018\u0000�\u0000\u0019\u0000\u0000�\u001a\u0000\u0000\u0000\u001b\u0000\u0004��\u001c\u0000�\u0000\u001d\u0000\u0000�\u001e\u0000\u0000\u0000\u001f\u0000\u0004�\u0004@\u0000��A\u0000��B\u0000�\u0004C\u0000\u0004�\u0004n\u0000��A\u0000��B\u0000�\u0004C\u0000\u0004�\u0004n\u0000��o\u0000��W\u0000�\u0004C\u0000\u0004��E\u0000�\u0000F\u0000\u0000�G\u0000\u0000\u0000H\u0000\u0004��E\u0000�\u0000F\u0000\u0000�I\u0000\u0000\u0000J\u0000\u0004��X\u0000�\u0000Y\u0000\u0000�G\u0000\u0000\u0000H\u0000\u0004��X\u0000�\u0000Y\u0000\u0000�I\u0000\u0000\u0000J\u0000\u0001��K\u0000\u0001��L\u0000\u0001��M\u0000\u0001��N�\u0001��O\u0000\u0001��O \u0001��P\u0000\u0004��Q\u0000�\u0000R\u0000\u0000�S\u0000\u0000\u0000T\u0000\u0004��Q\u0000�\u0000R\u0000\u0000�U\u0000\u0000\u0000V\u0000\u0004��Q\u0000�\u0000R\u0000\u0000�V \u0000\u0000U \u0004��Q\u0000�\u0000R\u0000\u0000�T \u0000\u0000S \u0001��]\u0000\u0001��^\u0000\u0001��a\u0000\u0004��b\u0000�\u0000c\u0000\u0000�d\u0000\u0000\u0000e\u0000\u0004��f\u0000�\u0000g\u0000\u0000�h\u0000\u0000\u0000i\u0000\u0004��j\u0000�\u0000k\u0000\u0000�l\u0000\u0000\u0000m\u0000\u0004��g �\u0000f \u0000�i \u0000\u0000h \b���\u0000�\u0000�\u0000\u0000��\u0000\u0000��\u0000\u0000��\u0000\u0000\u0000�\u0000\u0000\b�\u0000\u0000\u0010�\u0000\u0002���\u0000\u0000��\u0000\u0003���\u0000���\u0000\u0004��\u0000\u0001���\u0000\u000e���\u0000�\u0000�\u0000���\u0000���\u0000�\u0000�\u0000�\b�\u0000\u0004��\u0000\u0004��\u0000\u0004\u0000�\u0000\u0004\b�\u0000\f��\u0000\f��\u0000\f\u0000�\u0000\f\b�\u0000\u0002���\u0000�\u0000�\u0000\u0004���\u0000�\u0000�\u0000\u0000��\u0000\u0000\u0000�\u0000\u0004���\u0000�\u0000�\u0000\u0000��\u0000\u0000\u0000�\u0000\t���\u0000���\u0000�\u0004� ���\u0000���\u0000�\u0004� \u0004��@\u0004��@\u0004\u0004�`\t���\u0000���\u0000�\u0004�\u0000���\u0000���\u0000�\u0004�\u0000\u0004��\u0000\u0004��\u0000\u0004\u0004�\u0000\t���\u0000���\u0000�\u0004�\u0000���\u0000���\u0000�\u0004�\u0000\u0004�� \u0004��\u0000\u0004\u0004� \n���\u0000���\u0000�\u0004�\u0000���\u0000���\u0000�\u0004�\u0000\u0004��\u0000\u0004��\u0000\u0004\u0004�\u0000\f��\u0000\u0001��*\u0000\u0001��+\u0000\u0001��,\u0000\u0001��-\u0000\u0004��0\u0000�\u00001\u0000\u0000�2\u0000\u0000\u00003\u0000\u0004��4\u0000�\u00005\u0000\u0000�6\u0000\u0000\u00007\u0000\u0004��8\u0000�\u00009\u0000\u0000�:\u0000\u0000\u0000;\u0000\u0004��<\u0000�\u0000=\u0000\u0000�>\u0000\u0000\u0000?\u0000\u0001��)\u0000\u0001��D\u0000\u0001��+\u0000\u0001��M\u0000\u0001��Z\u0000\u0001��[\u0000\u0001��.\u0000\u0001��/\u0000\u0001��p\u0000\u0001��\\\u0000\u0004��\\\u0000�\u0000\\\u0000\u0000�\\\u0000\u0000\u0000\\\u0000\u0001��_\u0000\u0002��_\u0000��_\u0000\u0003��_\u0000��_\u0000��_\u0000\u0001��_\u0000\u0002��_\u0000\u0004�_\u0000\u0003��_\u0000\u0004�_\u0000\f�_\u0000\u0001��_@\u0002��_@��_@\u0003��_@��_@��_@\u0001��_@\u0002��_@\u0004�_@\u0003��_@\u0004�_@\f�_@\u0001��`\u0000\u0002��`\u0000�\u0004`\u0000\u0003��`\u0000�\u0004`\u0000�\f`\u0000\u0001��`\u0000\u0002��`\u0000��`\u0000\u0003��`\u0000��`\u0000��`\u0000\u0001��`@\u0002��`@�\u0004`@\u0003��`@�\u0004`@�\f`@\u0001��`@\u0002��`@��`@\u0003��`@��`@��`@0�1�2�3�4�5�6�7�8�9�\u0000\u0000�\u0000�\t�\u0001�\u0002�\u0003�\u0004�\n�\u000b�\f�\r�\u000e�\u000f�\u0010�\u0011�\u0012�\u0013�\u0014�\u0015�\u0016�\u0017�\u0018�\u0019�\u001a�\u001b�\u0010�\u001c�\u001d�\u001e�\u001f�������������������p�q�r�s�\u000b�t�u�v�w�PASSWORD�0123456789�00000000������TO�PLAY�\"#$%\u0010TO\u0010PLAY������TO�CANCEL�LEVEL�LEFT�LEVEL\u0010\u0010\u0010\u0010MISS�TRY\u0010AGAIN�LEVEL\u0010\u0010\u0010\u0010CLEAR�BONUS�:\u0010\u0010*100=�SCORE�HI-SCORE�GAME\u0010OVER�CONTINUE?�\"#$%\u0010TO\u0010CONTINUE�YOU\u0010LEFT�VS�2P\u0010LEFT�\u0001\u0002\u0003\u000b\u000b\u0004\u0005\u0006�\u0001\u0002\u0003\u000b\u0007\b\t\n�DRAW�YOU  WIN�YOU\u0010LOST�HI�SC�\u0010\u0010\u0010\u0010�:�PAUSE�\u0010\u0010\u0010\u0010\u0010�NORMAL�1P�VS�2P�\u001f\u001f\u001f\u001f\u001f\u001f\u001f\u001f\u001f\u001f\u001f\u001f\u001f\u001f\u001f�CONGRATULATIONS@�GAME�OVER�STAGE��[w`w`wewjwjw�w\u0000x�w\u000fx\u0014x\u0005x\nx\u0019xowowtwywyw~w~w�w�w�w�w�w�w�w�w�w�w�w�w�w�w�w�w�w�w�w�w�w�w�w�w�w�w�w�w�w\u0006\u0001\u0000\u001ex\u0001\u0001\u0001!x\u0002\u0001\u0001!x\u0003\u0001\u0001!x\u0000\u0002\u0000$x\u0000\u0003\u0000$x\u0000\u0002\u0001'x\u0000\u0001\u0001'x\u0000�\u0000*x\u0000\u0001\u000f-x\u0000�\u000f0x\u0000\u0002\u00013x\u0000\u0004\u00013x\u0000�\u000f6x\u0000�\u000f9x\u0000�\u0000<x\u0000�\u0000?x\u0000�\u0000Ex\u0000\b\u0000Ex\u0000\f\u0000Hx\u0000�\u0000lx\u0000�\u00006x\u0000\u000f\u0000Kx\u0000�\u0001ox\u0003\u0002\u0000!x\u0005\u0003\u0000!x\u0000\u0002\u0000'x\u0000\u0002\u0000Nx\u0000\u0005\u0000Qx\u0000\u0005\u0000Tx\u0000\b\u0000Wx\u0000\u0000\u0000Zx\u0000\u0000\u0000*x\u0000\u0000\u0000]x\u0000\u0000\u0000`x\u0000\u0000\u0000cx\u0000\u0000\u0000fx\u0000\u0000\u0000ix\u0000\u0000\u0000-xwV�gV�3�Ăw�\"\"D33DCCDww�CDDD4D33DUU����pw�w$H�w�fw�Uw���̜��\u0011\u0011D3!DD\u0011D\u0011DDD\"D\"DD�DLCw��\u0007\u0000\u0000����A��P��\u0005��@�\u0005��E9)\u0001\u0015\u00119�P��\u0005��T���Q���@�\u0005��P��\u0005��U����U����P��\u0001�\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000���\u0018�\f�F��b�p�x�8��\u0000\u0000��@�|��l��\u0000\u0000\u0002\u0003��\u0000\u0003�\u001c\u0003|\u001b�c����\u0000\u0000��8�&�;�\u001a���\u0000@.AC\u0001���\u0000\u0000,�@���\u0000\u0001\u0000��\u0006�\u000f�\u0007�\u0003��\u0001�\u0000�\u001d�~��0�\u001aw�;����O��`���\u0007\u0002��\u0006\u0005��\u0001�����������\u0001��/�|�*�Q��\u0006�\u0000���\u0000�:�.��\u0003�\u0002�\u0004{��v�|�}Ȁ\u0000\u0000/\u000fp\u000f��\u0001\u0000/�\u0007�\u0001���f�\u0003�\u0001�\u0000��@�a����`��������������\u0001�\u0000�������o�����A�~���\u001c\u0007\b�\u0007�\u0003pOP�\u0001ʵ��(\u001f��\u0000?��z��\u0000�\u0003���\u0001��a��\u000f�\u0007}�<~��\u0001���\u0003����\u0005\u0006\u001d\u001e����������\u000f� �\u000f�\u0000�\u0005�\u0016���\u0007?\u000f��\u0000\u001f���\u0018[��=�8��x��\u0003\u0001\u0000��\u001f 78;<>?�����\u0000�T��\u0019�\u000e�\u000f�\u0007��\u0000�\u0004�\u0000<}��B��\u0001�\u0003��\u0007���\u0000����q���\u000f���\u0000����\u0007�\u0006?�\u0000�\u0002�\u000b��\u0000\u000f�C|�wx�0<���|�?�\u001f�\u0013\u000f\f\u0003\u000b\u0004\u0004\u0003��������Ϭo��/o�� ��\u0006G�ר��4��������\u0002z��\u0004�\b��00��  ���\u0000�\u0001�\u000f��\u001b�\u001ds\f<\u0003��\u0000q�/a�@9���\n�\u0002� �3��9�6�3�\u0000������\u0010�M��\u0001���\u0000�\u0007\u0002\u0001�y����|~�\u0000��/p���x���X�hW��\u0000���kt��\u0017��\b�\u0010�\u0011�\u0000������\u0006�\u0007\u000f�\u0000�\u0013\u000f8\u0007?\u0000�\u0010��\fo�v��\u0000���}��\u0014�l����<3�\u0000#��\u0001��\u0000��44\u0000\u0000�\u001f\u001f\u0000\u0000\u001f\u001f��\u0000\u0018\u0018\u0000\u0000\u0007\u0007?\u001e\u001e``����\u0000\t\u0005�����\u0013\u000b\u0012��\u0000��4w��x�h���\u0000\u0000���??\u0000\u0000\u001f\u001f��\u0000\u0000�����������\u0000\u0001<98\u0001\u0000���0�\u0000��\u0001��\u0000�||\u0000\u0000\u0003\u0003�����\u0000\u0000?��00���>>\u0000\u0000\u000f\u000f�\u0016\u0014\u0005\u0016)\u001e�+\u001c%\u0016����\u0000� �@? ��@� �>>��\u0007\u0007\u0003\u0003�<<��\u0007\u0007\u0003\u0003�\u0000\u0000\u0007\u0007�����\u0000\u0000���\u000f�\u0001\u0000��\u0001\u0000\u000f\u000e�\u0001\u0000\u0005���0��\u0000�\u000f�\u0000��\u0001��\u0001�\u0000\u0000��\u0000\u0000����\u0000\u0000���������������$\u0017������'\u0018�� �'��/�\u0000�/�\u0007\u0006><:��_��~q�{�a^���\u0006�\u0000��`c��\u001f����H���\u001d��D�\b�\u0000m���\u0000�\u0010�\u0000�?�� �\u0003�\u0000�����\r\b��\n\u0003���\u0004\u0004qq�����??�g���$\u0017��$\u00170����'� �!� ?�'� �/�oo\u001e\u0012800�  �������\u0000\u0001��Xy\f\u000f�>?n�����y�\u000f�\u0017�\u0003��\u0007\u000f=�����\u0000��\u0013��\u0005�\r�2�\u0015\u0006��������/�i�`ա��\u000f�\u0003�\u001f\u001c����\u0000\u0000����$W���st$''&��/���'��#�\u0001�\u0000������~�r���G\\��\u0001�\u0007�\u0000\u0000\u0001\u0000�����|���=<�\u0000\u0001\u0003����vb�h�x��~�\u001f�\u0000���,�=�r���\u0018|����\u0000���\u000f��\u0018\u001f�\u0006\u0007\u0001��p�\u0000�OO\\_�����s�;\r\u001e�\u0000�?���_\u000f���������\u0000��\u000f��\u0000\u000f\u001f��\u0000�\u0003������`\u0000����=<\u0001\u0000*����\u0000\u000f\u0015\u0006�/\u0000?\u0017/?\u0007�\u0000\u0000�Uf��\u0000��\u0000\u0000�P`��\u0000������/\u0007?\u0017/?\u0007�/?\u0017/?\u0007����������������/\u0007?\u0017/\u0010\u0015\u0006�\u000f\u0000\u0000���\u0000Uf��\u0000\u0000������\u0010P`��\u0000\u0000\b\u0006\u0000\u0000\u0000�\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017�\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f� !\"#$%&'�()*+,-./�01234567�89:;<=>?\b\u0006\u0000\u0000\u0000�@ABCDEFG�HIJKLMNO�PQRSTUVW�XYZ[\\]^_�`abcdefg�hijklmno���������������������\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��������������������������������\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��������������������������������\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��������������������������������\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000"}


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	
	var Emitter = __webpack_require__(4);
	var debug = __webpack_require__(5)('gameboy');
	
	module.exports = GameBoyCore;
	
	/*
	 * JavaScript GameBoy Color Emulator
	 * Copyright (C) 2010 - 2012 Grant Galitz
	 *
	 * This program is free software; you can redistribute it and/or
	 * modify it under the terms of the GNU General Public License
	 * version 2 as published by the Free Software Foundation.
	 * The full license is available at http://www.gnu.org/licenses/gpl.html
	 *
	 * This program is distributed in the hope that it will be useful,
	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	 * GNU General Public License for more details.
	 *
	 */
	function GameBoyCore(canvas, ROMImage, opts) {
	  if (!(this instanceof GameBoyCore)) return new GameBoyCore(canvas, ROMImage, opts);
	
	  opts = opts || {};
	  this.opts = {};
	  this.opts.bootRom = false !== opts.bootRom;
	  this.opts.gbBootRom = !!opts.gbBootRom;
	  this.opts.mbc1 = !!opts.mbc1;
	  this.opts.prioritizeGb = !!opts.prioritizeGb;
	  this.opts.interval = opts.interval || 8;
	  this.opts.imageSmoothing = false !== opts.imageSmoothing;
	  this.opts.sound = opts.sound;
	  this.opts.volume = opts.volume || 1;
	  this.opts.audioBufferMin = opts.audioBufferMin || 10;
	  this.opts.audioBufferMax = opts.audioBufferMax || 20;
	  this.opts.colorizeGb = false !== opts.colorizeGb;
	  this.opts.typedArrays = false !== opts.typedArrays;
	  this.opts.overrideMbc = !!opts.overrideMbc;
	  this.opts.canvas = opts.canvas;
	  this.opts.channels = opts.channels || [true, true, true, true];
	  this.opts.drawEvents = !!opts.drawEvents;
	
	  //Params, etc...
	  this.canvas = canvas;           //Canvas DOM object for drawing out the graphics to.
	  this.drawContext = null;          // LCD Context
	  this.ROMImage = ROMImage;         //The game's ROM.
	  this.ROMImageIsString = 'string' == typeof ROMImage;
	  //CPU Registers and Flags:
	  this.registerA = 0x01;            //Register A (Accumulator)
	  this.FZero = true;              //Register F  - Result was zero
	  this.FSubtract = false;           //Register F  - Subtraction was executed
	  this.FHalfCarry = true;           //Register F  - Half carry or half borrow
	  this.FCarry = true;             //Register F  - Carry or borrow
	  this.registerB = 0x00;            //Register B
	  this.registerC = 0x13;            //Register C
	  this.registerD = 0x00;            //Register D
	  this.registerE = 0xD8;            //Register E
	  this.registersHL = 0x014D;          //Registers H and L combined
	  this.stackPointer = 0xFFFE;         //Stack Pointer
	  this.programCounter = 0x0100;       //Program Counter
	  //Some CPU Emulation State Variables:
	  this.CPUCyclesTotal = 0;          //Relative CPU clocking to speed set, rounded appropriately.
	  this.CPUCyclesTotalBase = 0;        //Relative CPU clocking to speed set base.
	  this.CPUCyclesTotalCurrent = 0;       //Relative CPU clocking to speed set, the directly used value.
	  this.CPUCyclesTotalRoundoff = 0;      //Clocking per iteration rounding catch.
	  this.baseCPUCyclesPerIteration  = 0;    //CPU clocks per iteration at 1x speed.
	  this.remainingClocks = 0;         //HALT clocking overrun carry over.
	  this.inBootstrap = true;          //Whether we're in the GBC boot ROM.
	  this.usedBootROM = false;         //Updated upon ROM loading...
	  this.usedGBCBootROM = false;        //Did we boot to the GBC boot ROM?
	  this.halt = false;              //Has the CPU been suspended until the next interrupt?
	  this.skipPCIncrement = false;       //Did we trip the DMG Halt bug?
	  this.stopEmulator = 3;            //Has the emulation been paused or a frame has ended?
	  this.IME = true;              //Are interrupts enabled?
	  this.IRQLineMatched = 0;          //CPU IRQ assertion.
	  this.interruptsRequested = 0;       //IF Register
	  this.interruptsEnabled = 0;         //IE Register
	  this.hdmaRunning = false;         //HDMA Transfer Flag - GBC only
	  this.CPUTicks = 0;              //The number of clock cycles emulated.
	  this.doubleSpeedShifter = 0;        //GBC double speed clocking shifter.
	  this.JoyPad = 0xFF;             //Joypad State (two four-bit states actually)
	  this.CPUStopped = false;          //CPU STOP status.
	  //Main RAM, MBC RAM, GBC Main RAM, VRAM, etc.
	  this.memoryReader = [];           //Array of functions mapped to read back memory
	  this.memoryWriter = [];           //Array of functions mapped to write to memory
	  this.memoryHighReader = [];         //Array of functions mapped to read back 0xFFXX memory
	  this.memoryHighWriter = [];         //Array of functions mapped to write to 0xFFXX memory
	  this.ROM = [];                //The full ROM file dumped to an array.
	  this.memory = [];             //Main Core Memory
	  this.MBCRam = [];             //Switchable RAM (Used by games for more RAM) for the main memory range 0xA000 - 0xC000.
	  this.VRAM = [];               //Extra VRAM bank for GBC.
	  this.GBCMemory = [];            //GBC main RAM Banks
	  this.MBC1Mode = false;            //MBC1 Type (4/32, 16/8)
	  this.MBCRAMBanksEnabled = false;      //MBC RAM Access Control.
	  this.currMBCRAMBank = 0;          //MBC Currently Indexed RAM Bank
	  this.currMBCRAMBankPosition = -0xA000;    //MBC Position Adder;
	  this.cGBC = false;              //GameBoy Color detection.
	  this.gbcRamBank = 1;            //Currently Switched GameBoy Color ram bank
	  this.gbcRamBankPosition = -0xD000;      //GBC RAM offset from address start.
	  this.gbcRamBankPositionECHO = -0xF000;    //GBC RAM (ECHO mirroring) offset from address start.
	  this.RAMBanks = [0, 1, 2, 4, 16];     //Used to map the RAM banks to maximum size the MBC used can do.
	  this.ROMBank1offs = 0;            //Offset of the ROM bank switching.
	  this.currentROMBank = 0;          //The parsed current ROM bank selection.
	  this.cartridgeType = 0;           //Cartridge Type
	  this.name = "";               //Name of the game
	  this.gameCode = "";             //Game code (Suffix for older games)
	  this.fromSaveState = false;         //A boolean to see if this was loaded in as a save state.
	  this.savedStateFileName = "";       //When loaded in as a save state, this will not be empty.
	  this.STATTracker = 0;           //Tracker for STAT triggering.
	  this.modeSTAT = 0;              //The scan line mode (for lines 1-144 it's 2-3-0, for 145-154 it's 1)
	  this.spriteCount = 252;           //Mode 3 extra clocking counter (Depends on how many sprites are on the current line.).
	  this.LYCMatchTriggerSTAT = false;     //Should we trigger an interrupt if LY==LYC?
	  this.mode2TriggerSTAT = false;        //Should we trigger an interrupt if in mode 2?
	  this.mode1TriggerSTAT = false;        //Should we trigger an interrupt if in mode 1?
	  this.mode0TriggerSTAT = false;        //Should we trigger an interrupt if in mode 0?
	  this.LCDisOn = false;           //Is the emulated LCD controller on?
	  this.LINECONTROL = [];            //Array of functions to handle each scan line we do (onscreen + offscreen)
	  this.DISPLAYOFFCONTROL = [function (parentObj) {
	    //Array of line 0 function to handle the LCD controller when it's off (Do nothing!).
	  }];
	  this.LCDCONTROL = null;           //Pointer to either LINECONTROL or DISPLAYOFFCONTROL.
	  this.initializeLCDController();       //Compile the LCD controller functions.
	  //RTC (Real Time Clock for MBC3):
	  this.RTCisLatched = false;
	  this.latchedSeconds = 0;          //RTC latched seconds.
	  this.latchedMinutes = 0;          //RTC latched minutes.
	  this.latchedHours = 0;            //RTC latched hours.
	  this.latchedLDays = 0;            //RTC latched lower 8-bits of the day counter.
	  this.latchedHDays = 0;            //RTC latched high-bit of the day counter.
	  this.RTCSeconds = 0;            //RTC seconds counter.
	  this.RTCMinutes = 0;            //RTC minutes counter.
	  this.RTCHours = 0;              //RTC hours counter.
	  this.RTCDays = 0;             //RTC days counter.
	  this.RTCDayOverFlow = false;        //Did the RTC overflow and wrap the day counter?
	  this.RTCHALT = false;           //Is the RTC allowed to clock up?
	  //Gyro:
	  this.highX = 127;
	  this.lowX = 127;
	  this.highY = 127;
	  this.lowY = 127;
	  //Sound variables:
	  this.audioHandle = null;            //XAudioJS handle
	  this.numSamplesTotal = 0;           //Length of the sound buffers.
	  this.dutyLookup = [               //Map the duty values given to ones we can work with.
	    [false, false, false, false, false, false, false, true],
	    [true, false, false, false, false, false, false, true],
	    [true, false, false, false, false, true, true, true],
	    [false, true, true, true, true, true, true, false]
	  ];
	  this.bufferContainAmount = 0;         //Buffer maintenance metric.
	  this.LSFR15Table = null;
	  this.LSFR7Table = null;
	  this.noiseSampleTable = null;
	  this.initializeAudioStartState();
	  this.soundMasterEnabled = false;      //As its name implies
	  this.channel3PCM = null;          //Channel 3 adjusted sample buffer.
	  //Vin Shit:
	  this.VinLeftChannelMasterVolume = 8;    //Computed post-mixing volume.
	  this.VinRightChannelMasterVolume = 8;   //Computed post-mixing volume.
	  //Channel paths enabled:
	  this.leftChannel1 = false;
	  this.leftChannel2 = false;
	  this.leftChannel3 = false;
	  this.leftChannel4 = false;
	  this.rightChannel1 = false;
	  this.rightChannel2 = false;
	  this.rightChannel3 = false;
	  this.rightChannel4 = false;
	  this.audioClocksUntilNextEvent = 1;
	  this.audioClocksUntilNextEventCounter = 1;
	  //Channel output level caches:
	  this.channel1currentSampleLeft = 0;
	  this.channel1currentSampleRight = 0;
	  this.channel2currentSampleLeft = 0;
	  this.channel2currentSampleRight = 0;
	  this.channel3currentSampleLeft = 0;
	  this.channel3currentSampleRight = 0;
	  this.channel4currentSampleLeft = 0;
	  this.channel4currentSampleRight = 0;
	  this.channel1currentSampleLeftSecondary = 0;
	  this.channel1currentSampleRightSecondary = 0;
	  this.channel2currentSampleLeftSecondary = 0;
	  this.channel2currentSampleRightSecondary = 0;
	  this.channel3currentSampleLeftSecondary = 0;
	  this.channel3currentSampleRightSecondary = 0;
	  this.channel4currentSampleLeftSecondary = 0;
	  this.channel4currentSampleRightSecondary = 0;
	  this.channel1currentSampleLeftTrimary = 0;
	  this.channel1currentSampleRightTrimary = 0;
	  this.channel2currentSampleLeftTrimary = 0;
	  this.channel2currentSampleRightTrimary = 0;
	  this.mixerOutputCache = 0;
	  //Pre-multipliers to cache some calculations:
	  this.emulatorSpeed = 1;
	  this.initializeTiming();
	  //Audio generation counters:
	  this.audioTicks = 0;        //Used to sample the audio system every x CPU instructions.
	  this.audioIndex = 0;        //Used to keep alignment on audio generation.
	  this.downsampleInput = 0;
	  this.audioDestinationPosition = 0;  //Used to keep alignment on audio generation.
	  this.rollover = 0;          //Used to keep alignment on the number of samples to output (Realign from counter alias).
	  //Timing Variables
	  this.emulatorTicks = 0;       //Times for how many instructions to execute before ending the loop.
	  this.DIVTicks = 56;         //DIV Ticks Counter (Invisible lower 8-bit)
	  this.LCDTicks = 60;         //Counter for how many instructions have been executed on a scanline so far.
	  this.timerTicks = 0;        //Counter for the TIMA timer.
	  this.TIMAEnabled = false;     //Is TIMA enabled?
	  this.TACClocker = 1024;       //Timer Max Ticks
	  this.serialTimer = 0;       //Serial IRQ Timer
	  this.serialShiftTimer = 0;      //Serial Transfer Shift Timer
	  this.serialShiftTimerAllocated = 0; //Serial Transfer Shift Timer Refill
	  this.IRQEnableDelay = 0;      //Are the interrupts on queue to be enabled?
	  var dateVar = new Date();
	  this.lastIteration = dateVar.getTime();//The last time we iterated the main loop.
	  dateVar = new Date();
	  this.firstIteration = dateVar.getTime();
	  this.iterations = 0;
	  this.actualScanLine = 0;      //Actual scan line...
	  this.lastUnrenderedLine = 0;    //Last rendered scan line...
	  this.queuedScanLines = 0;
	  this.totalLinesPassed = 0;
	  this.haltPostClocks = 0;      //Post-Halt clocking.
	  //ROM Cartridge Components:
	  this.cMBC1 = false;         //Does the cartridge use MBC1?
	  this.cMBC2 = false;         //Does the cartridge use MBC2?
	  this.cMBC3 = false;         //Does the cartridge use MBC3?
	  this.cMBC5 = false;         //Does the cartridge use MBC5?
	  this.cMBC7 = false;         //Does the cartridge use MBC7?
	  this.cSRAM = false;         //Does the cartridge use save RAM?
	  this.cMMMO1 = false;        //...
	  this.cRUMBLE = false;       //Does the cartridge use the RUMBLE addressing (modified MBC5)?
	  this.cCamera = false;       //Is the cartridge actually a GameBoy Camera?
	  this.cTAMA5 = false;        //Does the cartridge use TAMA5? (Tamagotchi Cartridge)
	  this.cHuC3 = false;         //Does the cartridge use HuC3 (Hudson Soft / modified MBC3)?
	  this.cHuC1 = false;         //Does the cartridge use HuC1 (Hudson Soft / modified MBC1)?
	  this.cTIMER = false;        //Does the cartridge have an RTC?
	  this.ROMBanks = [         // 1 Bank = 16 KBytes = 256 Kbits
	    2, 4, 8, 16, 32, 64, 128, 256, 512
	  ];
	  this.ROMBanks[0x52] = 72;
	  this.ROMBanks[0x53] = 80;
	  this.ROMBanks[0x54] = 96;
	  this.numRAMBanks = 0;         //How many RAM banks were actually allocated?
	  ////Graphics Variables
	  this.currVRAMBank = 0;          //Current VRAM bank for GBC.
	  this.backgroundX = 0;         //Register SCX (X-Scroll)
	  this.backgroundY = 0;         //Register SCY (Y-Scroll)
	  this.gfxWindowDisplay = false;      //Is the windows enabled?
	  this.gfxSpriteShow = false;       //Are sprites enabled?
	  this.gfxSpriteNormalHeight = true;    //Are we doing 8x8 or 8x16 sprites?
	  this.bgEnabled = true;          //Is the BG enabled?
	  this.BGPriorityEnabled = true;      //Can we flag the BG for priority over sprites?
	  this.gfxWindowCHRBankPosition = 0;    //The current bank of the character map the window uses.
	  this.gfxBackgroundCHRBankPosition = 0;  //The current bank of the character map the BG uses.
	  this.gfxBackgroundBankOffset = 0x80;  //Fast mapping of the tile numbering/
	  this.windowY = 0;           //Current Y offset of the window.
	  this.windowX = 0;           //Current X offset of the window.
	  this.drewBlank = 0;           //To prevent the repeating of drawing a blank screen.
	  this.drewFrame = false;         //Throttle how many draws we can do to once per iteration.
	  this.midScanlineOffset = -1;      //mid-scanline rendering offset.
	  this.pixelEnd = 0;            //track the x-coord limit for line rendering (mid-scanline usage).
	  this.currentX = 0;            //The x-coord we left off at for mid-scanline rendering.
	  //BG Tile Pointer Caches:
	  this.BGCHRBank1 = null;
	  this.BGCHRBank2 = null;
	  this.BGCHRCurrentBank = null;
	  //Tile Data Cache:
	  this.tileCache = null;
	  //Palettes:
	  this.colors = [0xEFFFDE, 0xADD794, 0x529273, 0x183442];     //"Classic" GameBoy palette colors.
	  this.OBJPalette = null;
	  this.BGPalette = null;
	  this.gbcOBJRawPalette = null;
	  this.gbcBGRawPalette = null;
	  this.gbOBJPalette = null;
	  this.gbBGPalette = null;
	  this.gbcOBJPalette = null;
	  this.gbcBGPalette = null;
	  this.gbBGColorizedPalette = null;
	  this.gbOBJColorizedPalette = null;
	  this.cachedBGPaletteConversion = null;
	  this.cachedOBJPaletteConversion = null;
	  this.updateGBBGPalette = this.updateGBRegularBGPalette;
	  this.updateGBOBJPalette = this.updateGBRegularOBJPalette;
	  this.colorizedGBPalettes = false;
	  this.BGLayerRender = null;      //Reference to the BG rendering function.
	  this.WindowLayerRender = null;    //Reference to the window rendering function.
	  this.SpriteLayerRender = null;    //Reference to the OAM rendering function.
	  this.frameBuffer = [];        //The internal frame-buffer.
	  this.swizzledFrame = null;      //The secondary gfx buffer that holds the converted RGBA values.
	  this.canvasBuffer = null;     //imageData handle
	  this.pixelStart = 0;        //Temp variable for holding the current working framebuffer offset.
	  //Variables used for scaling in JS:
	  this.onscreenWidth = this.offscreenWidth = 160;
	  this.onscreenHeight = this.offscreenHeight = 144;
	  this.offscreenRGBCount = this.onscreenWidth * this.onscreenHeight * 4;
	  this.resizePathClear = true;
	  //Initialize the white noise cache tables ahead of time:
	  this.intializeWhiteNoise();
	}
	
	Emitter(GameBoyCore.prototype);
	
	GameBoyCore.prototype.GBBOOTROM = [   //GB BOOT ROM
	  //Add 256 byte boot rom here if you are going to use it.
	];
	GameBoyCore.prototype.GBCBOOTROM = [  //GBC BOOT ROM
	  //Add 2048 byte boot rom here if you are going to use it.
	];
	GameBoyCore.prototype.ffxxDump = [  //Dump of the post-BOOT I/O register state (From gambatte):
	  0x0F, 0x00, 0x7C, 0xFF, 0x00, 0x00, 0x00, 0xF8,   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,
	  0x80, 0xBF, 0xF3, 0xFF, 0xBF, 0xFF, 0x3F, 0x00,   0xFF, 0xBF, 0x7F, 0xFF, 0x9F, 0xFF, 0xBF, 0xFF,
	  0xFF, 0x00, 0x00, 0xBF, 0x77, 0xF3, 0xF1, 0xFF,   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	  0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,   0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
	  0x91, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC,   0x00, 0x00, 0x00, 0x00, 0xFF, 0x7E, 0xFF, 0xFE,
	  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0xFF,   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,   0xC0, 0xFF, 0xC1, 0x00, 0xFE, 0xFF, 0xFF, 0xFF,
	  0xF8, 0xFF, 0x00, 0x00, 0x00, 0x8F, 0x00, 0x00,   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	  0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,   0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D,
	  0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,   0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99,
	  0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,   0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E,
	  0x45, 0xEC, 0x52, 0xFA, 0x08, 0xB7, 0x07, 0x5D,   0x01, 0xFD, 0xC0, 0xFF, 0x08, 0xFC, 0x00, 0xE5,
	  0x0B, 0xF8, 0xC2, 0xCE, 0xF4, 0xF9, 0x0F, 0x7F,   0x45, 0x6D, 0x3D, 0xFE, 0x46, 0x97, 0x33, 0x5E,
	  0x08, 0xEF, 0xF1, 0xFF, 0x86, 0x83, 0x24, 0x74,   0x12, 0xFC, 0x00, 0x9F, 0xB4, 0xB7, 0x06, 0xD5,
	  0xD0, 0x7A, 0x00, 0x9E, 0x04, 0x5F, 0x41, 0x2F,   0x1D, 0x77, 0x36, 0x75, 0x81, 0xAA, 0x70, 0x3A,
	  0x98, 0xD1, 0x71, 0x02, 0x4D, 0x01, 0xC1, 0xFF,   0x0D, 0x00, 0xD3, 0x05, 0xF9, 0x00, 0x0B, 0x00
	];
	GameBoyCore.prototype.OPCODE = [
	  //NOP
	  //#0x00:
	  function (parentObj) {
	    //Do Nothing...
	  },
	  //LD BC, nn
	  //#0x01:
	  function (parentObj) {
	    parentObj.registerC = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.registerB = parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF);
	    parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	  },
	  //LD (BC), A
	  //#0x02:
	  function (parentObj) {
	    parentObj.memoryWrite((parentObj.registerB << 8) | parentObj.registerC, parentObj.registerA);
	  },
	  //INC BC
	  //#0x03:
	  function (parentObj) {
	    var temp_var = ((parentObj.registerB << 8) | parentObj.registerC) + 1;
	    parentObj.registerB = (temp_var >> 8) & 0xFF;
	    parentObj.registerC = temp_var & 0xFF;
	  },
	  //INC B
	  //#0x04:
	  function (parentObj) {
	    parentObj.registerB = (parentObj.registerB + 1) & 0xFF;
	    parentObj.FZero = (parentObj.registerB == 0);
	    parentObj.FHalfCarry = ((parentObj.registerB & 0xF) == 0);
	    parentObj.FSubtract = false;
	  },
	  //DEC B
	  //#0x05:
	  function (parentObj) {
	    parentObj.registerB = (parentObj.registerB - 1) & 0xFF;
	    parentObj.FZero = (parentObj.registerB == 0);
	    parentObj.FHalfCarry = ((parentObj.registerB & 0xF) == 0xF);
	    parentObj.FSubtract = true;
	  },
	  //LD B, n
	  //#0x06:
	  function (parentObj) {
	    parentObj.registerB = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	  },
	  //RLCA
	  //#0x07:
	  function (parentObj) {
	    parentObj.FCarry = (parentObj.registerA > 0x7F);
	    parentObj.registerA = ((parentObj.registerA << 1) & 0xFF) | (parentObj.registerA >> 7);
	    parentObj.FZero = parentObj.FSubtract = parentObj.FHalfCarry = false;
	  },
	  //LD (nn), SP
	  //#0x08:
	  function (parentObj) {
	    var temp_var = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	    parentObj.memoryWrite(temp_var, parentObj.stackPointer & 0xFF);
	    parentObj.memoryWrite((temp_var + 1) & 0xFFFF, parentObj.stackPointer >> 8);
	  },
	  //ADD HL, BC
	  //#0x09:
	  function (parentObj) {
	    var dirtySum = parentObj.registersHL + ((parentObj.registerB << 8) | parentObj.registerC);
	    parentObj.FHalfCarry = ((parentObj.registersHL & 0xFFF) > (dirtySum & 0xFFF));
	    parentObj.FCarry = (dirtySum > 0xFFFF);
	    parentObj.registersHL = dirtySum & 0xFFFF;
	    parentObj.FSubtract = false;
	  },
	  //LD A, (BC)
	  //#0x0A:
	  function (parentObj) {
	    parentObj.registerA = parentObj.memoryRead((parentObj.registerB << 8) | parentObj.registerC);
	  },
	  //DEC BC
	  //#0x0B:
	  function (parentObj) {
	    var temp_var = (((parentObj.registerB << 8) | parentObj.registerC) - 1) & 0xFFFF;
	    parentObj.registerB = temp_var >> 8;
	    parentObj.registerC = temp_var & 0xFF;
	  },
	  //INC C
	  //#0x0C:
	  function (parentObj) {
	    parentObj.registerC = (parentObj.registerC + 1) & 0xFF;
	    parentObj.FZero = (parentObj.registerC == 0);
	    parentObj.FHalfCarry = ((parentObj.registerC & 0xF) == 0);
	    parentObj.FSubtract = false;
	  },
	  //DEC C
	  //#0x0D:
	  function (parentObj) {
	    parentObj.registerC = (parentObj.registerC - 1) & 0xFF;
	    parentObj.FZero = (parentObj.registerC == 0);
	    parentObj.FHalfCarry = ((parentObj.registerC & 0xF) == 0xF);
	    parentObj.FSubtract = true;
	  },
	  //LD C, n
	  //#0x0E:
	  function (parentObj) {
	    parentObj.registerC = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	  },
	  //RRCA
	  //#0x0F:
	  function (parentObj) {
	    parentObj.registerA = (parentObj.registerA >> 1) | ((parentObj.registerA & 1) << 7);
	    parentObj.FCarry = (parentObj.registerA > 0x7F);
	    parentObj.FZero = parentObj.FSubtract = parentObj.FHalfCarry = false;
	  },
	  //STOP
	  //#0x10:
	  function (parentObj) {
	    if (parentObj.cGBC) {
	      if ((parentObj.memory[0xFF4D] & 0x01) == 0x01) {    //Speed change requested.
	        if (parentObj.memory[0xFF4D] > 0x7F) {        //Go back to single speed mode.
	          debug("Going into single clock speed mode.", 0);
	          parentObj.doubleSpeedShifter = 0;
	          parentObj.memory[0xFF4D] &= 0x7F;       //Clear the double speed mode flag.
	        }
	        else {                        //Go to double speed mode.
	          debug("Going into double clock speed mode.", 0);
	          parentObj.doubleSpeedShifter = 1;
	          parentObj.memory[0xFF4D] |= 0x80;       //Set the double speed mode flag.
	        }
	        parentObj.memory[0xFF4D] &= 0xFE;         //Reset the request bit.
	      }
	      else {
	        parentObj.handleSTOP();
	      }
	    }
	    else {
	      parentObj.handleSTOP();
	    }
	  },
	  //LD DE, nn
	  //#0x11:
	  function (parentObj) {
	    parentObj.registerE = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.registerD = parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF);
	    parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	  },
	  //LD (DE), A
	  //#0x12:
	  function (parentObj) {
	    parentObj.memoryWrite((parentObj.registerD << 8) | parentObj.registerE, parentObj.registerA);
	  },
	  //INC DE
	  //#0x13:
	  function (parentObj) {
	    var temp_var = ((parentObj.registerD << 8) | parentObj.registerE) + 1;
	    parentObj.registerD = (temp_var >> 8) & 0xFF;
	    parentObj.registerE = temp_var & 0xFF;
	  },
	  //INC D
	  //#0x14:
	  function (parentObj) {
	    parentObj.registerD = (parentObj.registerD + 1) & 0xFF;
	    parentObj.FZero = (parentObj.registerD == 0);
	    parentObj.FHalfCarry = ((parentObj.registerD & 0xF) == 0);
	    parentObj.FSubtract = false;
	  },
	  //DEC D
	  //#0x15:
	  function (parentObj) {
	    parentObj.registerD = (parentObj.registerD - 1) & 0xFF;
	    parentObj.FZero = (parentObj.registerD == 0);
	    parentObj.FHalfCarry = ((parentObj.registerD & 0xF) == 0xF);
	    parentObj.FSubtract = true;
	  },
	  //LD D, n
	  //#0x16:
	  function (parentObj) {
	    parentObj.registerD = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	  },
	  //RLA
	  //#0x17:
	  function (parentObj) {
	    var carry_flag = (parentObj.FCarry) ? 1 : 0;
	    parentObj.FCarry = (parentObj.registerA > 0x7F);
	    parentObj.registerA = ((parentObj.registerA << 1) & 0xFF) | carry_flag;
	    parentObj.FZero = parentObj.FSubtract = parentObj.FHalfCarry = false;
	  },
	  //JR n
	  //#0x18:
	  function (parentObj) {
	    parentObj.programCounter = (parentObj.programCounter + ((parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24) >> 24) + 1) & 0xFFFF;
	  },
	  //ADD HL, DE
	  //#0x19:
	  function (parentObj) {
	    var dirtySum = parentObj.registersHL + ((parentObj.registerD << 8) | parentObj.registerE);
	    parentObj.FHalfCarry = ((parentObj.registersHL & 0xFFF) > (dirtySum & 0xFFF));
	    parentObj.FCarry = (dirtySum > 0xFFFF);
	    parentObj.registersHL = dirtySum & 0xFFFF;
	    parentObj.FSubtract = false;
	  },
	  //LD A, (DE)
	  //#0x1A:
	  function (parentObj) {
	    parentObj.registerA = parentObj.memoryRead((parentObj.registerD << 8) | parentObj.registerE);
	  },
	  //DEC DE
	  //#0x1B:
	  function (parentObj) {
	    var temp_var = (((parentObj.registerD << 8) | parentObj.registerE) - 1) & 0xFFFF;
	    parentObj.registerD = temp_var >> 8;
	    parentObj.registerE = temp_var & 0xFF;
	  },
	  //INC E
	  //#0x1C:
	  function (parentObj) {
	    parentObj.registerE = (parentObj.registerE + 1) & 0xFF;
	    parentObj.FZero = (parentObj.registerE == 0);
	    parentObj.FHalfCarry = ((parentObj.registerE & 0xF) == 0);
	    parentObj.FSubtract = false;
	  },
	  //DEC E
	  //#0x1D:
	  function (parentObj) {
	    parentObj.registerE = (parentObj.registerE - 1) & 0xFF;
	    parentObj.FZero = (parentObj.registerE == 0);
	    parentObj.FHalfCarry = ((parentObj.registerE & 0xF) == 0xF);
	    parentObj.FSubtract = true;
	  },
	  //LD E, n
	  //#0x1E:
	  function (parentObj) {
	    parentObj.registerE = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	  },
	  //RRA
	  //#0x1F:
	  function (parentObj) {
	    var carry_flag = (parentObj.FCarry) ? 0x80 : 0;
	    parentObj.FCarry = ((parentObj.registerA & 1) == 1);
	    parentObj.registerA = (parentObj.registerA >> 1) | carry_flag;
	    parentObj.FZero = parentObj.FSubtract = parentObj.FHalfCarry = false;
	  },
	  //JR NZ, n
	  //#0x20:
	  function (parentObj) {
	    if (!parentObj.FZero) {
	      parentObj.programCounter = (parentObj.programCounter + ((parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24) >> 24) + 1) & 0xFFFF;
	      parentObj.CPUTicks += 4;
	    }
	    else {
	      parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	    }
	  },
	  //LD HL, nn
	  //#0x21:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	  },
	  //LDI (HL), A
	  //#0x22:
	  function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerA);
	    parentObj.registersHL = (parentObj.registersHL + 1) & 0xFFFF;
	  },
	  //INC HL
	  //#0x23:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.registersHL + 1) & 0xFFFF;
	  },
	  //INC H
	  //#0x24:
	  function (parentObj) {
	    var H = ((parentObj.registersHL >> 8) + 1) & 0xFF;
	    parentObj.FZero = (H == 0);
	    parentObj.FHalfCarry = ((H & 0xF) == 0);
	    parentObj.FSubtract = false;
	    parentObj.registersHL = (H << 8) | (parentObj.registersHL & 0xFF);
	  },
	  //DEC H
	  //#0x25:
	  function (parentObj) {
	    var H = ((parentObj.registersHL >> 8) - 1) & 0xFF;
	    parentObj.FZero = (H == 0);
	    parentObj.FHalfCarry = ((H & 0xF) == 0xF);
	    parentObj.FSubtract = true;
	    parentObj.registersHL = (H << 8) | (parentObj.registersHL & 0xFF);
	  },
	  //LD H, n
	  //#0x26:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 8) | (parentObj.registersHL & 0xFF);
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	  },
	  //DAA
	  //#0x27:
	  function (parentObj) {
	    if (!parentObj.FSubtract) {
	      if (parentObj.FCarry || parentObj.registerA > 0x99) {
	        parentObj.registerA = (parentObj.registerA + 0x60) & 0xFF;
	        parentObj.FCarry = true;
	      }
	      if (parentObj.FHalfCarry || (parentObj.registerA & 0xF) > 0x9) {
	        parentObj.registerA = (parentObj.registerA + 0x06) & 0xFF;
	        parentObj.FHalfCarry = false;
	      }
	    }
	    else if (parentObj.FCarry && parentObj.FHalfCarry) {
	      parentObj.registerA = (parentObj.registerA + 0x9A) & 0xFF;
	      parentObj.FHalfCarry = false;
	    }
	    else if (parentObj.FCarry) {
	      parentObj.registerA = (parentObj.registerA + 0xA0) & 0xFF;
	    }
	    else if (parentObj.FHalfCarry) {
	      parentObj.registerA = (parentObj.registerA + 0xFA) & 0xFF;
	      parentObj.FHalfCarry = false;
	    }
	    parentObj.FZero = (parentObj.registerA == 0);
	  },
	  //JR Z, n
	  //#0x28:
	  function (parentObj) {
	    if (parentObj.FZero) {
	      parentObj.programCounter = (parentObj.programCounter + ((parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24) >> 24) + 1) & 0xFFFF;
	      parentObj.CPUTicks += 4;
	    }
	    else {
	      parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	    }
	  },
	  //ADD HL, HL
	  //#0x29:
	  function (parentObj) {
	    parentObj.FHalfCarry = ((parentObj.registersHL & 0xFFF) > 0x7FF);
	    parentObj.FCarry = (parentObj.registersHL > 0x7FFF);
	    parentObj.registersHL = (parentObj.registersHL << 1) & 0xFFFF;
	    parentObj.FSubtract = false;
	  },
	  //LDI A, (HL)
	  //#0x2A:
	  function (parentObj) {
	    parentObj.registerA = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	    parentObj.registersHL = (parentObj.registersHL + 1) & 0xFFFF;
	  },
	  //DEC HL
	  //#0x2B:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.registersHL - 1) & 0xFFFF;
	  },
	  //INC L
	  //#0x2C:
	  function (parentObj) {
	    var L = (parentObj.registersHL + 1) & 0xFF;
	    parentObj.FZero = (L == 0);
	    parentObj.FHalfCarry = ((L & 0xF) == 0);
	    parentObj.FSubtract = false;
	    parentObj.registersHL = (parentObj.registersHL & 0xFF00) | L;
	  },
	  //DEC L
	  //#0x2D:
	  function (parentObj) {
	    var L = (parentObj.registersHL - 1) & 0xFF;
	    parentObj.FZero = (L == 0);
	    parentObj.FHalfCarry = ((L & 0xF) == 0xF);
	    parentObj.FSubtract = true;
	    parentObj.registersHL = (parentObj.registersHL & 0xFF00) | L;
	  },
	  //LD L, n
	  //#0x2E:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.registersHL & 0xFF00) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	  },
	  //CPL
	  //#0x2F:
	  function (parentObj) {
	    parentObj.registerA ^= 0xFF;
	    parentObj.FSubtract = parentObj.FHalfCarry = true;
	  },
	  //JR NC, n
	  //#0x30:
	  function (parentObj) {
	    if (!parentObj.FCarry) {
	      parentObj.programCounter = (parentObj.programCounter + ((parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24) >> 24) + 1) & 0xFFFF;
	      parentObj.CPUTicks += 4;
	    }
	    else {
	      parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	    }
	  },
	  //LD SP, nn
	  //#0x31:
	  function (parentObj) {
	    parentObj.stackPointer = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	  },
	  //LDD (HL), A
	  //#0x32:
	  function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerA);
	    parentObj.registersHL = (parentObj.registersHL - 1) & 0xFFFF;
	  },
	  //INC SP
	  //#0x33:
	  function (parentObj) {
	    parentObj.stackPointer = (parentObj.stackPointer + 1) & 0xFFFF;
	  },
	  //INC (HL)
	  //#0x34:
	  function (parentObj) {
	    var temp_var = (parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) + 1) & 0xFF;
	    parentObj.FZero = (temp_var == 0);
	    parentObj.FHalfCarry = ((temp_var & 0xF) == 0);
	    parentObj.FSubtract = false;
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);
	  },
	  //DEC (HL)
	  //#0x35:
	  function (parentObj) {
	    var temp_var = (parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) - 1) & 0xFF;
	    parentObj.FZero = (temp_var == 0);
	    parentObj.FHalfCarry = ((temp_var & 0xF) == 0xF);
	    parentObj.FSubtract = true;
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);
	  },
	  //LD (HL), n
	  //#0x36:
	  function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter));
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	  },
	  //SCF
	  //#0x37:
	  function (parentObj) {
	    parentObj.FCarry = true;
	    parentObj.FSubtract = parentObj.FHalfCarry = false;
	  },
	  //JR C, n
	  //#0x38:
	  function (parentObj) {
	    if (parentObj.FCarry) {
	      parentObj.programCounter = (parentObj.programCounter + ((parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24) >> 24) + 1) & 0xFFFF;
	      parentObj.CPUTicks += 4;
	    }
	    else {
	      parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	    }
	  },
	  //ADD HL, SP
	  //#0x39:
	  function (parentObj) {
	    var dirtySum = parentObj.registersHL + parentObj.stackPointer;
	    parentObj.FHalfCarry = ((parentObj.registersHL & 0xFFF) > (dirtySum & 0xFFF));
	    parentObj.FCarry = (dirtySum > 0xFFFF);
	    parentObj.registersHL = dirtySum & 0xFFFF;
	    parentObj.FSubtract = false;
	  },
	  //LDD A, (HL)
	  //#0x3A:
	  function (parentObj) {
	    parentObj.registerA = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	    parentObj.registersHL = (parentObj.registersHL - 1) & 0xFFFF;
	  },
	  //DEC SP
	  //#0x3B:
	  function (parentObj) {
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	  },
	  //INC A
	  //#0x3C:
	  function (parentObj) {
	    parentObj.registerA = (parentObj.registerA + 1) & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) == 0);
	    parentObj.FSubtract = false;
	  },
	  //DEC A
	  //#0x3D:
	  function (parentObj) {
	    parentObj.registerA = (parentObj.registerA - 1) & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) == 0xF);
	    parentObj.FSubtract = true;
	  },
	  //LD A, n
	  //#0x3E:
	  function (parentObj) {
	    parentObj.registerA = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	  },
	  //CCF
	  //#0x3F:
	  function (parentObj) {
	    parentObj.FCarry = !parentObj.FCarry;
	    parentObj.FSubtract = parentObj.FHalfCarry = false;
	  },
	  //LD B, B
	  //#0x40:
	  function (parentObj) {
	    //Do nothing...
	  },
	  //LD B, C
	  //#0x41:
	  function (parentObj) {
	    parentObj.registerB = parentObj.registerC;
	  },
	  //LD B, D
	  //#0x42:
	  function (parentObj) {
	    parentObj.registerB = parentObj.registerD;
	  },
	  //LD B, E
	  //#0x43:
	  function (parentObj) {
	    parentObj.registerB = parentObj.registerE;
	  },
	  //LD B, H
	  //#0x44:
	  function (parentObj) {
	    parentObj.registerB = parentObj.registersHL >> 8;
	  },
	  //LD B, L
	  //#0x45:
	  function (parentObj) {
	    parentObj.registerB = parentObj.registersHL & 0xFF;
	  },
	  //LD B, (HL)
	  //#0x46:
	  function (parentObj) {
	    parentObj.registerB = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	  },
	  //LD B, A
	  //#0x47:
	  function (parentObj) {
	    parentObj.registerB = parentObj.registerA;
	  },
	  //LD C, B
	  //#0x48:
	  function (parentObj) {
	    parentObj.registerC = parentObj.registerB;
	  },
	  //LD C, C
	  //#0x49:
	  function (parentObj) {
	    //Do nothing...
	  },
	  //LD C, D
	  //#0x4A:
	  function (parentObj) {
	    parentObj.registerC = parentObj.registerD;
	  },
	  //LD C, E
	  //#0x4B:
	  function (parentObj) {
	    parentObj.registerC = parentObj.registerE;
	  },
	  //LD C, H
	  //#0x4C:
	  function (parentObj) {
	    parentObj.registerC = parentObj.registersHL >> 8;
	  },
	  //LD C, L
	  //#0x4D:
	  function (parentObj) {
	    parentObj.registerC = parentObj.registersHL & 0xFF;
	  },
	  //LD C, (HL)
	  //#0x4E:
	  function (parentObj) {
	    parentObj.registerC = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	  },
	  //LD C, A
	  //#0x4F:
	  function (parentObj) {
	    parentObj.registerC = parentObj.registerA;
	  },
	  //LD D, B
	  //#0x50:
	  function (parentObj) {
	    parentObj.registerD = parentObj.registerB;
	  },
	  //LD D, C
	  //#0x51:
	  function (parentObj) {
	    parentObj.registerD = parentObj.registerC;
	  },
	  //LD D, D
	  //#0x52:
	  function (parentObj) {
	    //Do nothing...
	  },
	  //LD D, E
	  //#0x53:
	  function (parentObj) {
	    parentObj.registerD = parentObj.registerE;
	  },
	  //LD D, H
	  //#0x54:
	  function (parentObj) {
	    parentObj.registerD = parentObj.registersHL >> 8;
	  },
	  //LD D, L
	  //#0x55:
	  function (parentObj) {
	    parentObj.registerD = parentObj.registersHL & 0xFF;
	  },
	  //LD D, (HL)
	  //#0x56:
	  function (parentObj) {
	    parentObj.registerD = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	  },
	  //LD D, A
	  //#0x57:
	  function (parentObj) {
	    parentObj.registerD = parentObj.registerA;
	  },
	  //LD E, B
	  //#0x58:
	  function (parentObj) {
	    parentObj.registerE = parentObj.registerB;
	  },
	  //LD E, C
	  //#0x59:
	  function (parentObj) {
	    parentObj.registerE = parentObj.registerC;
	  },
	  //LD E, D
	  //#0x5A:
	  function (parentObj) {
	    parentObj.registerE = parentObj.registerD;
	  },
	  //LD E, E
	  //#0x5B:
	  function (parentObj) {
	    //Do nothing...
	  },
	  //LD E, H
	  //#0x5C:
	  function (parentObj) {
	    parentObj.registerE = parentObj.registersHL >> 8;
	  },
	  //LD E, L
	  //#0x5D:
	  function (parentObj) {
	    parentObj.registerE = parentObj.registersHL & 0xFF;
	  },
	  //LD E, (HL)
	  //#0x5E:
	  function (parentObj) {
	    parentObj.registerE = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	  },
	  //LD E, A
	  //#0x5F:
	  function (parentObj) {
	    parentObj.registerE = parentObj.registerA;
	  },
	  //LD H, B
	  //#0x60:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.registerB << 8) | (parentObj.registersHL & 0xFF);
	  },
	  //LD H, C
	  //#0x61:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.registerC << 8) | (parentObj.registersHL & 0xFF);
	  },
	  //LD H, D
	  //#0x62:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.registerD << 8) | (parentObj.registersHL & 0xFF);
	  },
	  //LD H, E
	  //#0x63:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.registerE << 8) | (parentObj.registersHL & 0xFF);
	  },
	  //LD H, H
	  //#0x64:
	  function (parentObj) {
	    //Do nothing...
	  },
	  //LD H, L
	  //#0x65:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.registersHL & 0xFF) * 0x101;
	  },
	  //LD H, (HL)
	  //#0x66:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) << 8) | (parentObj.registersHL & 0xFF);
	  },
	  //LD H, A
	  //#0x67:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.registerA << 8) | (parentObj.registersHL & 0xFF);
	  },
	  //LD L, B
	  //#0x68:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.registersHL & 0xFF00) | parentObj.registerB;
	  },
	  //LD L, C
	  //#0x69:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.registersHL & 0xFF00) | parentObj.registerC;
	  },
	  //LD L, D
	  //#0x6A:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.registersHL & 0xFF00) | parentObj.registerD;
	  },
	  //LD L, E
	  //#0x6B:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.registersHL & 0xFF00) | parentObj.registerE;
	  },
	  //LD L, H
	  //#0x6C:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.registersHL & 0xFF00) | (parentObj.registersHL >> 8);
	  },
	  //LD L, L
	  //#0x6D:
	  function (parentObj) {
	    //Do nothing...
	  },
	  //LD L, (HL)
	  //#0x6E:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.registersHL & 0xFF00) | parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	  },
	  //LD L, A
	  //#0x6F:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.registersHL & 0xFF00) | parentObj.registerA;
	  },
	  //LD (HL), B
	  //#0x70:
	  function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerB);
	  },
	  //LD (HL), C
	  //#0x71:
	  function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerC);
	  },
	  //LD (HL), D
	  //#0x72:
	  function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerD);
	  },
	  //LD (HL), E
	  //#0x73:
	  function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerE);
	  },
	  //LD (HL), H
	  //#0x74:
	  function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registersHL >> 8);
	  },
	  //LD (HL), L
	  //#0x75:
	  function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registersHL & 0xFF);
	  },
	  //HALT
	  //#0x76:
	  function (parentObj) {
	    //See if there's already an IRQ match:
	    if ((parentObj.interruptsEnabled & parentObj.interruptsRequested & 0x1F) > 0) {
	      if (!parentObj.cGBC && !parentObj.usedBootROM) {
	        //HALT bug in the DMG CPU model (Program Counter fails to increment for one instruction after HALT):
	        parentObj.skipPCIncrement = true;
	      }
	      else {
	        //CGB gets around the HALT PC bug by doubling the hidden NOP.
	        parentObj.CPUTicks += 4;
	      }
	    }
	    else {
	      //CPU is stalled until the next IRQ match:
	      parentObj.calculateHALTPeriod();
	    }
	  },
	  //LD (HL), A
	  //#0x77:
	  function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerA);
	  },
	  //LD A, B
	  //#0x78:
	  function (parentObj) {
	    parentObj.registerA = parentObj.registerB;
	  },
	  //LD A, C
	  //#0x79:
	  function (parentObj) {
	    parentObj.registerA = parentObj.registerC;
	  },
	  //LD A, D
	  //#0x7A:
	  function (parentObj) {
	    parentObj.registerA = parentObj.registerD;
	  },
	  //LD A, E
	  //#0x7B:
	  function (parentObj) {
	    parentObj.registerA = parentObj.registerE;
	  },
	  //LD A, H
	  //#0x7C:
	  function (parentObj) {
	    parentObj.registerA = parentObj.registersHL >> 8;
	  },
	  //LD A, L
	  //#0x7D:
	  function (parentObj) {
	    parentObj.registerA = parentObj.registersHL & 0xFF;
	  },
	  //LD, A, (HL)
	  //#0x7E:
	  function (parentObj) {
	    parentObj.registerA = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	  },
	  //LD A, A
	  //#0x7F:
	  function (parentObj) {
	    //Do Nothing...
	  },
	  //ADD A, B
	  //#0x80:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA + parentObj.registerB;
	    parentObj.FHalfCarry = ((dirtySum & 0xF) < (parentObj.registerA & 0xF));
	    parentObj.FCarry = (dirtySum > 0xFF);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = false;
	  },
	  //ADD A, C
	  //#0x81:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA + parentObj.registerC;
	    parentObj.FHalfCarry = ((dirtySum & 0xF) < (parentObj.registerA & 0xF));
	    parentObj.FCarry = (dirtySum > 0xFF);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = false;
	  },
	  //ADD A, D
	  //#0x82:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA + parentObj.registerD;
	    parentObj.FHalfCarry = ((dirtySum & 0xF) < (parentObj.registerA & 0xF));
	    parentObj.FCarry = (dirtySum > 0xFF);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = false;
	  },
	  //ADD A, E
	  //#0x83:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA + parentObj.registerE;
	    parentObj.FHalfCarry = ((dirtySum & 0xF) < (parentObj.registerA & 0xF));
	    parentObj.FCarry = (dirtySum > 0xFF);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = false;
	  },
	  //ADD A, H
	  //#0x84:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA + (parentObj.registersHL >> 8);
	    parentObj.FHalfCarry = ((dirtySum & 0xF) < (parentObj.registerA & 0xF));
	    parentObj.FCarry = (dirtySum > 0xFF);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = false;
	  },
	  //ADD A, L
	  //#0x85:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA + (parentObj.registersHL & 0xFF);
	    parentObj.FHalfCarry = ((dirtySum & 0xF) < (parentObj.registerA & 0xF));
	    parentObj.FCarry = (dirtySum > 0xFF);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = false;
	  },
	  //ADD A, (HL)
	  //#0x86:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA + parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	    parentObj.FHalfCarry = ((dirtySum & 0xF) < (parentObj.registerA & 0xF));
	    parentObj.FCarry = (dirtySum > 0xFF);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = false;
	  },
	  //ADD A, A
	  //#0x87:
	  function (parentObj) {
	    parentObj.FHalfCarry = ((parentObj.registerA & 0x8) == 0x8);
	    parentObj.FCarry = (parentObj.registerA > 0x7F);
	    parentObj.registerA = (parentObj.registerA << 1) & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = false;
	  },
	  //ADC A, B
	  //#0x88:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA + parentObj.registerB + ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) + (parentObj.registerB & 0xF) + ((parentObj.FCarry) ? 1 : 0) > 0xF);
	    parentObj.FCarry = (dirtySum > 0xFF);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = false;
	  },
	  //ADC A, C
	  //#0x89:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA + parentObj.registerC + ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) + (parentObj.registerC & 0xF) + ((parentObj.FCarry) ? 1 : 0) > 0xF);
	    parentObj.FCarry = (dirtySum > 0xFF);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = false;
	  },
	  //ADC A, D
	  //#0x8A:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA + parentObj.registerD + ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) + (parentObj.registerD & 0xF) + ((parentObj.FCarry) ? 1 : 0) > 0xF);
	    parentObj.FCarry = (dirtySum > 0xFF);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = false;
	  },
	  //ADC A, E
	  //#0x8B:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA + parentObj.registerE + ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) + (parentObj.registerE & 0xF) + ((parentObj.FCarry) ? 1 : 0) > 0xF);
	    parentObj.FCarry = (dirtySum > 0xFF);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = false;
	  },
	  //ADC A, H
	  //#0x8C:
	  function (parentObj) {
	    var tempValue = (parentObj.registersHL >> 8);
	    var dirtySum = parentObj.registerA + tempValue + ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) + (tempValue & 0xF) + ((parentObj.FCarry) ? 1 : 0) > 0xF);
	    parentObj.FCarry = (dirtySum > 0xFF);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = false;
	  },
	  //ADC A, L
	  //#0x8D:
	  function (parentObj) {
	    var tempValue = (parentObj.registersHL & 0xFF);
	    var dirtySum = parentObj.registerA + tempValue + ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) + (tempValue & 0xF) + ((parentObj.FCarry) ? 1 : 0) > 0xF);
	    parentObj.FCarry = (dirtySum > 0xFF);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = false;
	  },
	  //ADC A, (HL)
	  //#0x8E:
	  function (parentObj) {
	    var tempValue = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	    var dirtySum = parentObj.registerA + tempValue + ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) + (tempValue & 0xF) + ((parentObj.FCarry) ? 1 : 0) > 0xF);
	    parentObj.FCarry = (dirtySum > 0xFF);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = false;
	  },
	  //ADC A, A
	  //#0x8F:
	  function (parentObj) {
	    //shift left register A one bit for some ops here as an optimization:
	    var dirtySum = (parentObj.registerA << 1) | ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = ((((parentObj.registerA << 1) & 0x1E) | ((parentObj.FCarry) ? 1 : 0)) > 0xF);
	    parentObj.FCarry = (dirtySum > 0xFF);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = false;
	  },
	  //SUB A, B
	  //#0x90:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - parentObj.registerB;
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) < (dirtySum & 0xF));
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (dirtySum == 0);
	    parentObj.FSubtract = true;
	  },
	  //SUB A, C
	  //#0x91:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - parentObj.registerC;
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) < (dirtySum & 0xF));
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (dirtySum == 0);
	    parentObj.FSubtract = true;
	  },
	  //SUB A, D
	  //#0x92:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - parentObj.registerD;
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) < (dirtySum & 0xF));
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (dirtySum == 0);
	    parentObj.FSubtract = true;
	  },
	  //SUB A, E
	  //#0x93:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - parentObj.registerE;
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) < (dirtySum & 0xF));
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (dirtySum == 0);
	    parentObj.FSubtract = true;
	  },
	  //SUB A, H
	  //#0x94:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - (parentObj.registersHL >> 8);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) < (dirtySum & 0xF));
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (dirtySum == 0);
	    parentObj.FSubtract = true;
	  },
	  //SUB A, L
	  //#0x95:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - (parentObj.registersHL & 0xFF);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) < (dirtySum & 0xF));
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (dirtySum == 0);
	    parentObj.FSubtract = true;
	  },
	  //SUB A, (HL)
	  //#0x96:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) < (dirtySum & 0xF));
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (dirtySum == 0);
	    parentObj.FSubtract = true;
	  },
	  //SUB A, A
	  //#0x97:
	  function (parentObj) {
	    //number - same number == 0
	    parentObj.registerA = 0;
	    parentObj.FHalfCarry = parentObj.FCarry = false;
	    parentObj.FZero = parentObj.FSubtract = true;
	  },
	  //SBC A, B
	  //#0x98:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - parentObj.registerB - ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) - (parentObj.registerB & 0xF) - ((parentObj.FCarry) ? 1 : 0) < 0);
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = true;
	  },
	  //SBC A, C
	  //#0x99:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - parentObj.registerC - ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) - (parentObj.registerC & 0xF) - ((parentObj.FCarry) ? 1 : 0) < 0);
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = true;
	  },
	  //SBC A, D
	  //#0x9A:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - parentObj.registerD - ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) - (parentObj.registerD & 0xF) - ((parentObj.FCarry) ? 1 : 0) < 0);
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = true;
	  },
	  //SBC A, E
	  //#0x9B:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - parentObj.registerE - ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) - (parentObj.registerE & 0xF) - ((parentObj.FCarry) ? 1 : 0) < 0);
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = true;
	  },
	  //SBC A, H
	  //#0x9C:
	  function (parentObj) {
	    var temp_var = parentObj.registersHL >> 8;
	    var dirtySum = parentObj.registerA - temp_var - ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) - (temp_var & 0xF) - ((parentObj.FCarry) ? 1 : 0) < 0);
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = true;
	  },
	  //SBC A, L
	  //#0x9D:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - (parentObj.registersHL & 0xFF) - ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) - (parentObj.registersHL & 0xF) - ((parentObj.FCarry) ? 1 : 0) < 0);
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = true;
	  },
	  //SBC A, (HL)
	  //#0x9E:
	  function (parentObj) {
	    var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	    var dirtySum = parentObj.registerA - temp_var - ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) - (temp_var & 0xF) - ((parentObj.FCarry) ? 1 : 0) < 0);
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = true;
	  },
	  //SBC A, A
	  //#0x9F:
	  function (parentObj) {
	    //Optimized SBC A:
	    if (parentObj.FCarry) {
	      parentObj.FZero = false;
	      parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = true;
	      parentObj.registerA = 0xFF;
	    }
	    else {
	      parentObj.FHalfCarry = parentObj.FCarry = false;
	      parentObj.FSubtract = parentObj.FZero = true;
	      parentObj.registerA = 0;
	    }
	  },
	  //AND B
	  //#0xA0:
	  function (parentObj) {
	    parentObj.registerA &= parentObj.registerB;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = parentObj.FCarry = false;
	  },
	  //AND C
	  //#0xA1:
	  function (parentObj) {
	    parentObj.registerA &= parentObj.registerC;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = parentObj.FCarry = false;
	  },
	  //AND D
	  //#0xA2:
	  function (parentObj) {
	    parentObj.registerA &= parentObj.registerD;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = parentObj.FCarry = false;
	  },
	  //AND E
	  //#0xA3:
	  function (parentObj) {
	    parentObj.registerA &= parentObj.registerE;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = parentObj.FCarry = false;
	  },
	  //AND H
	  //#0xA4:
	  function (parentObj) {
	    parentObj.registerA &= (parentObj.registersHL >> 8);
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = parentObj.FCarry = false;
	  },
	  //AND L
	  //#0xA5:
	  function (parentObj) {
	    parentObj.registerA &= parentObj.registersHL;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = parentObj.FCarry = false;
	  },
	  //AND (HL)
	  //#0xA6:
	  function (parentObj) {
	    parentObj.registerA &= parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = parentObj.FCarry = false;
	  },
	  //AND A
	  //#0xA7:
	  function (parentObj) {
	    //number & same number = same number
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = parentObj.FCarry = false;
	  },
	  //XOR B
	  //#0xA8:
	  function (parentObj) {
	    parentObj.registerA ^= parentObj.registerB;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;
	  },
	  //XOR C
	  //#0xA9:
	  function (parentObj) {
	    parentObj.registerA ^= parentObj.registerC;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;
	  },
	  //XOR D
	  //#0xAA:
	  function (parentObj) {
	    parentObj.registerA ^= parentObj.registerD;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;
	  },
	  //XOR E
	  //#0xAB:
	  function (parentObj) {
	    parentObj.registerA ^= parentObj.registerE;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;
	  },
	  //XOR H
	  //#0xAC:
	  function (parentObj) {
	    parentObj.registerA ^= (parentObj.registersHL >> 8);
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;
	  },
	  //XOR L
	  //#0xAD:
	  function (parentObj) {
	    parentObj.registerA ^= (parentObj.registersHL & 0xFF);
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;
	  },
	  //XOR (HL)
	  //#0xAE:
	  function (parentObj) {
	    parentObj.registerA ^= parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;
	  },
	  //XOR A
	  //#0xAF:
	  function (parentObj) {
	    //number ^ same number == 0
	    parentObj.registerA = 0;
	    parentObj.FZero = true;
	    parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;
	  },
	  //OR B
	  //#0xB0:
	  function (parentObj) {
	    parentObj.registerA |= parentObj.registerB;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;
	  },
	  //OR C
	  //#0xB1:
	  function (parentObj) {
	    parentObj.registerA |= parentObj.registerC;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;
	  },
	  //OR D
	  //#0xB2:
	  function (parentObj) {
	    parentObj.registerA |= parentObj.registerD;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;
	  },
	  //OR E
	  //#0xB3:
	  function (parentObj) {
	    parentObj.registerA |= parentObj.registerE;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;
	  },
	  //OR H
	  //#0xB4:
	  function (parentObj) {
	    parentObj.registerA |= (parentObj.registersHL >> 8);
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;
	  },
	  //OR L
	  //#0xB5:
	  function (parentObj) {
	    parentObj.registerA |= (parentObj.registersHL & 0xFF);
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;
	  },
	  //OR (HL)
	  //#0xB6:
	  function (parentObj) {
	    parentObj.registerA |= parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;
	  },
	  //OR A
	  //#0xB7:
	  function (parentObj) {
	    //number | same number == same number
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;
	  },
	  //CP B
	  //#0xB8:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - parentObj.registerB;
	    parentObj.FHalfCarry = ((dirtySum & 0xF) > (parentObj.registerA & 0xF));
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.FZero = (dirtySum == 0);
	    parentObj.FSubtract = true;
	  },
	  //CP C
	  //#0xB9:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - parentObj.registerC;
	    parentObj.FHalfCarry = ((dirtySum & 0xF) > (parentObj.registerA & 0xF));
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.FZero = (dirtySum == 0);
	    parentObj.FSubtract = true;
	  },
	  //CP D
	  //#0xBA:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - parentObj.registerD;
	    parentObj.FHalfCarry = ((dirtySum & 0xF) > (parentObj.registerA & 0xF));
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.FZero = (dirtySum == 0);
	    parentObj.FSubtract = true;
	  },
	  //CP E
	  //#0xBB:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - parentObj.registerE;
	    parentObj.FHalfCarry = ((dirtySum & 0xF) > (parentObj.registerA & 0xF));
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.FZero = (dirtySum == 0);
	    parentObj.FSubtract = true;
	  },
	  //CP H
	  //#0xBC:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - (parentObj.registersHL >> 8);
	    parentObj.FHalfCarry = ((dirtySum & 0xF) > (parentObj.registerA & 0xF));
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.FZero = (dirtySum == 0);
	    parentObj.FSubtract = true;
	  },
	  //CP L
	  //#0xBD:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - (parentObj.registersHL & 0xFF);
	    parentObj.FHalfCarry = ((dirtySum & 0xF) > (parentObj.registerA & 0xF));
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.FZero = (dirtySum == 0);
	    parentObj.FSubtract = true;
	  },
	  //CP (HL)
	  //#0xBE:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	    parentObj.FHalfCarry = ((dirtySum & 0xF) > (parentObj.registerA & 0xF));
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.FZero = (dirtySum == 0);
	    parentObj.FSubtract = true;
	  },
	  //CP A
	  //#0xBF:
	  function (parentObj) {
	    parentObj.FHalfCarry = parentObj.FCarry = false;
	    parentObj.FZero = parentObj.FSubtract = true;
	  },
	  //RET !FZ
	  //#0xC0:
	  function (parentObj) {
	    if (!parentObj.FZero) {
	      parentObj.programCounter = (parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);
	      parentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;
	      parentObj.CPUTicks += 12;
	    }
	  },
	  //POP BC
	  //#0xC1:
	  function (parentObj) {
	    parentObj.registerC = parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);
	    parentObj.registerB = parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF);
	    parentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;
	  },
	  //JP !FZ, nn
	  //#0xC2:
	  function (parentObj) {
	    if (!parentObj.FZero) {
	      parentObj.programCounter = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	      parentObj.CPUTicks += 4;
	    }
	    else {
	      parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	    }
	  },
	  //JP nn
	  //#0xC3:
	  function (parentObj) {
	    parentObj.programCounter = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	  },
	  //CALL !FZ, nn
	  //#0xC4:
	  function (parentObj) {
	    if (!parentObj.FZero) {
	      var temp_pc = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	      parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	      parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	      parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);
	      parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	      parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);
	      parentObj.programCounter = temp_pc;
	      parentObj.CPUTicks += 12;
	    }
	    else {
	      parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	    }
	  },
	  //PUSH BC
	  //#0xC5:
	  function (parentObj) {
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registerB);
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registerC);
	  },
	  //ADD, n
	  //#0xC6:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA + parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	    parentObj.FHalfCarry = ((dirtySum & 0xF) < (parentObj.registerA & 0xF));
	    parentObj.FCarry = (dirtySum > 0xFF);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = false;
	  },
	  //RST 0
	  //#0xC7:
	  function (parentObj) {
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);
	    parentObj.programCounter = 0;
	  },
	  //RET FZ
	  //#0xC8:
	  function (parentObj) {
	    if (parentObj.FZero) {
	      parentObj.programCounter = (parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);
	      parentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;
	      parentObj.CPUTicks += 12;
	    }
	  },
	  //RET
	  //#0xC9:
	  function (parentObj) {
	    parentObj.programCounter =  (parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);
	    parentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;
	  },
	  //JP FZ, nn
	  //#0xCA:
	  function (parentObj) {
	    if (parentObj.FZero) {
	      parentObj.programCounter = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	      parentObj.CPUTicks += 4;
	    }
	    else {
	      parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	    }
	  },
	  //Secondary OP Code Set:
	  //#0xCB:
	  function (parentObj) {
	    var opcode = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    //Increment the program counter to the next instruction:
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	    //Get how many CPU cycles the current 0xCBXX op code counts for:
	    parentObj.CPUTicks += parentObj.SecondaryTICKTable[opcode];
	    //Execute secondary OP codes for the 0xCB OP code call.
	    parentObj.CBOPCODE[opcode](parentObj);
	  },
	  //CALL FZ, nn
	  //#0xCC:
	  function (parentObj) {
	    if (parentObj.FZero) {
	      var temp_pc = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	      parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	      parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	      parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);
	      parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	      parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);
	      parentObj.programCounter = temp_pc;
	      parentObj.CPUTicks += 12;
	    }
	    else {
	      parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	    }
	  },
	  //CALL nn
	  //#0xCD:
	  function (parentObj) {
	    var temp_pc = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);
	    parentObj.programCounter = temp_pc;
	  },
	  //ADC A, n
	  //#0xCE:
	  function (parentObj) {
	    var tempValue = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	    var dirtySum = parentObj.registerA + tempValue + ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) + (tempValue & 0xF) + ((parentObj.FCarry) ? 1 : 0) > 0xF);
	    parentObj.FCarry = (dirtySum > 0xFF);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = false;
	  },
	  //RST 0x8
	  //#0xCF:
	  function (parentObj) {
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);
	    parentObj.programCounter = 0x8;
	  },
	  //RET !FC
	  //#0xD0:
	  function (parentObj) {
	    if (!parentObj.FCarry) {
	      parentObj.programCounter = (parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);
	      parentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;
	      parentObj.CPUTicks += 12;
	    }
	  },
	  //POP DE
	  //#0xD1:
	  function (parentObj) {
	    parentObj.registerE = parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);
	    parentObj.registerD = parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF);
	    parentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;
	  },
	  //JP !FC, nn
	  //#0xD2:
	  function (parentObj) {
	    if (!parentObj.FCarry) {
	      parentObj.programCounter = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	      parentObj.CPUTicks += 4;
	    }
	    else {
	      parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	    }
	  },
	  //0xD3 - Illegal
	  //#0xD3:
	  function (parentObj) {
	    this.emit('error', new Error('Illegal op code 0xD3 called'));
	  },
	  //CALL !FC, nn
	  //#0xD4:
	  function (parentObj) {
	    if (!parentObj.FCarry) {
	      var temp_pc = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	      parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	      parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	      parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);
	      parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	      parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);
	      parentObj.programCounter = temp_pc;
	      parentObj.CPUTicks += 12;
	    }
	    else {
	      parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	    }
	  },
	  //PUSH DE
	  //#0xD5:
	  function (parentObj) {
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registerD);
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registerE);
	  },
	  //SUB A, n
	  //#0xD6:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) < (dirtySum & 0xF));
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (dirtySum == 0);
	    parentObj.FSubtract = true;
	  },
	  //RST 0x10
	  //#0xD7:
	  function (parentObj) {
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);
	    parentObj.programCounter = 0x10;
	  },
	  //RET FC
	  //#0xD8:
	  function (parentObj) {
	    if (parentObj.FCarry) {
	      parentObj.programCounter = (parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);
	      parentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;
	      parentObj.CPUTicks += 12;
	    }
	  },
	  //RETI
	  //#0xD9:
	  function (parentObj) {
	    parentObj.programCounter = (parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);
	    parentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;
	    //Immediate for HALT:
	    parentObj.IRQEnableDelay = (parentObj.IRQEnableDelay == 2 || parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) == 0x76) ? 1 : 2;
	  },
	  //JP FC, nn
	  //#0xDA:
	  function (parentObj) {
	    if (parentObj.FCarry) {
	      parentObj.programCounter = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	      parentObj.CPUTicks += 4;
	    }
	    else {
	      parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	    }
	  },
	  //0xDB - Illegal
	  //#0xDB:
	  function (parentObj) {
	    this.emit('error', new Error('Illegal op code 0xDB called'));
	  },
	  //CALL FC, nn
	  //#0xDC:
	  function (parentObj) {
	    if (parentObj.FCarry) {
	      var temp_pc = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	      parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	      parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	      parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);
	      parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	      parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);
	      parentObj.programCounter = temp_pc;
	      parentObj.CPUTicks += 12;
	    }
	    else {
	      parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	    }
	  },
	  //0xDD - Illegal
	  //#0xDD:
	  function (parentObj) {
	    this.emit('error', new Error('Illegal op code 0xDD called, pausing emulation.'));
	  },
	  //SBC A, n
	  //#0xDE:
	  function (parentObj) {
	    var temp_var = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	    var dirtySum = parentObj.registerA - temp_var - ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = ((parentObj.registerA & 0xF) - (temp_var & 0xF) - ((parentObj.FCarry) ? 1 : 0) < 0);
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.registerA = dirtySum & 0xFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = true;
	  },
	  //RST 0x18
	  //#0xDF:
	  function (parentObj) {
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);
	    parentObj.programCounter = 0x18;
	  },
	  //LDH (n), A
	  //#0xE0:
	  function (parentObj) {
	    parentObj.memoryHighWrite(parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter), parentObj.registerA);
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	  },
	  //POP HL
	  //#0xE1:
	  function (parentObj) {
	    parentObj.registersHL = (parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);
	    parentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;
	  },
	  //LD (0xFF00 + C), A
	  //#0xE2:
	  function (parentObj) {
	    parentObj.memoryHighWriter[parentObj.registerC](parentObj, parentObj.registerC, parentObj.registerA);
	  },
	  //0xE3 - Illegal
	  //#0xE3:
	  function (parentObj) {
	    this.emit('error', new Error('Illegal op code 0xE3 called'));
	  },
	  //0xE4 - Illegal
	  //#0xE4:
	  function (parentObj) {
	    this.emit('error', new Error('Illegal op code 0xE4 called'));
	  },
	  //PUSH HL
	  //#0xE5:
	  function (parentObj) {
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registersHL >> 8);
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registersHL & 0xFF);
	  },
	  //AND n
	  //#0xE6:
	  function (parentObj) {
	    parentObj.registerA &= parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = parentObj.FCarry = false;
	  },
	  //RST 0x20
	  //#0xE7:
	  function (parentObj) {
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);
	    parentObj.programCounter = 0x20;
	  },
	  //ADD SP, n
	  //#0xE8:
	  function (parentObj) {
	    var temp_value2 = (parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24) >> 24;
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	    var temp_value = (parentObj.stackPointer + temp_value2) & 0xFFFF;
	    temp_value2 = parentObj.stackPointer ^ temp_value2 ^ temp_value;
	    parentObj.stackPointer = temp_value;
	    parentObj.FCarry = ((temp_value2 & 0x100) == 0x100);
	    parentObj.FHalfCarry = ((temp_value2 & 0x10) == 0x10);
	    parentObj.FZero = parentObj.FSubtract = false;
	  },
	  //JP, (HL)
	  //#0xE9:
	  function (parentObj) {
	    parentObj.programCounter = parentObj.registersHL;
	  },
	  //LD n, A
	  //#0xEA:
	  function (parentObj) {
	    parentObj.memoryWrite((parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter), parentObj.registerA);
	    parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	  },
	  //0xEB - Illegal
	  //#0xEB:
	  function (parentObj) {
	    this.emit('error', new Error("Illegal op code 0xEB called"));
	  },
	  //0xEC - Illegal
	  //#0xEC:
	  function (parentObj) {
	    this.emit('error', new Error("Illegal op code 0xEC called"));
	  },
	  //0xED - Illegal
	  //#0xED:
	  function (parentObj) {
	    this.emit('error', new Error("Illegal op code 0xED called"));
	  },
	  //XOR n
	  //#0xEE:
	  function (parentObj) {
	    parentObj.registerA ^= parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;
	  },
	  //RST 0x28
	  //#0xEF:
	  function (parentObj) {
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);
	    parentObj.programCounter = 0x28;
	  },
	  //LDH A, (n)
	  //#0xF0:
	  function (parentObj) {
	    parentObj.registerA = parentObj.memoryHighRead(parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter));
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	  },
	  //POP AF
	  //#0xF1:
	  function (parentObj) {
	    var temp_var = parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);
	    parentObj.FZero = (temp_var > 0x7F);
	    parentObj.FSubtract = ((temp_var & 0x40) == 0x40);
	    parentObj.FHalfCarry = ((temp_var & 0x20) == 0x20);
	    parentObj.FCarry = ((temp_var & 0x10) == 0x10);
	    parentObj.registerA = parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF);
	    parentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;
	  },
	  //LD A, (0xFF00 + C)
	  //#0xF2:
	  function (parentObj) {
	    parentObj.registerA = parentObj.memoryHighReader[parentObj.registerC](parentObj, parentObj.registerC);
	  },
	  //DI
	  //#0xF3:
	  function (parentObj) {
	    parentObj.IME = false;
	    parentObj.IRQEnableDelay = 0;
	  },
	  //0xF4 - Illegal
	  //#0xF4:
	  function (parentObj) {
	    this.emit('error', new Error("Illegal op code 0xF4 called"));
	  },
	  //PUSH AF
	  //#0xF5:
	  function (parentObj) {
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registerA);
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, ((parentObj.FZero) ? 0x80 : 0) | ((parentObj.FSubtract) ? 0x40 : 0) | ((parentObj.FHalfCarry) ? 0x20 : 0) | ((parentObj.FCarry) ? 0x10 : 0));
	  },
	  //OR n
	  //#0xF6:
	  function (parentObj) {
	    parentObj.registerA |= parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	    parentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;
	  },
	  //RST 0x30
	  //#0xF7:
	  function (parentObj) {
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);
	    parentObj.programCounter = 0x30;
	  },
	  //LDHL SP, n
	  //#0xF8:
	  function (parentObj) {
	    var temp_var = (parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24) >> 24;
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	    parentObj.registersHL = (parentObj.stackPointer + temp_var) & 0xFFFF;
	    temp_var = parentObj.stackPointer ^ temp_var ^ parentObj.registersHL;
	    parentObj.FCarry = ((temp_var & 0x100) == 0x100);
	    parentObj.FHalfCarry = ((temp_var & 0x10) == 0x10);
	    parentObj.FZero = parentObj.FSubtract = false;
	  },
	  //LD SP, HL
	  //#0xF9:
	  function (parentObj) {
	    parentObj.stackPointer = parentObj.registersHL;
	  },
	  //LD A, (nn)
	  //#0xFA:
	  function (parentObj) {
	    parentObj.registerA = parentObj.memoryRead((parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter));
	    parentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;
	  },
	  //EI
	  //#0xFB:
	  function (parentObj) {
	    //Immediate for HALT:
	    parentObj.IRQEnableDelay = (parentObj.IRQEnableDelay == 2 || parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) == 0x76) ? 1 : 2;
	  },
	  //0xFC - Illegal
	  //#0xFC:
	  function (parentObj) {
	    this.emit('error', new Error("Illegal op code 0xFC called"));
	  },
	  //0xFD - Illegal
	  //#0xFD:
	  function (parentObj) {
	    this.emit('error', new Error("Illegal op code 0xFD called"));
	  },
	  //CP n
	  //#0xFE:
	  function (parentObj) {
	    var dirtySum = parentObj.registerA - parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);
	    parentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;
	    parentObj.FHalfCarry = ((dirtySum & 0xF) > (parentObj.registerA & 0xF));
	    parentObj.FCarry = (dirtySum < 0);
	    parentObj.FZero = (dirtySum == 0);
	    parentObj.FSubtract = true;
	  },
	  //RST 0x38
	  //#0xFF:
	  function (parentObj) {
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);
	    parentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;
	    parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);
	    parentObj.programCounter = 0x38;
	  }
	];
	GameBoyCore.prototype.CBOPCODE = [
	  //RLC B
	  //#0x00:
	  function (parentObj) {
	    parentObj.FCarry = (parentObj.registerB > 0x7F);
	    parentObj.registerB = ((parentObj.registerB << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerB == 0);
	  }
	  //RLC C
	  //#0x01:
	  ,function (parentObj) {
	    parentObj.FCarry = (parentObj.registerC > 0x7F);
	    parentObj.registerC = ((parentObj.registerC << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerC == 0);
	  }
	  //RLC D
	  //#0x02:
	  ,function (parentObj) {
	    parentObj.FCarry = (parentObj.registerD > 0x7F);
	    parentObj.registerD = ((parentObj.registerD << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerD == 0);
	  }
	  //RLC E
	  //#0x03:
	  ,function (parentObj) {
	    parentObj.FCarry = (parentObj.registerE > 0x7F);
	    parentObj.registerE = ((parentObj.registerE << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerE == 0);
	  }
	  //RLC H
	  //#0x04:
	  ,function (parentObj) {
	    parentObj.FCarry = (parentObj.registersHL > 0x7FFF);
	    parentObj.registersHL = ((parentObj.registersHL << 1) & 0xFE00) | ((parentObj.FCarry) ? 0x100 : 0) | (parentObj.registersHL & 0xFF);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registersHL < 0x100);
	  }
	  //RLC L
	  //#0x05:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registersHL & 0x80) == 0x80);
	    parentObj.registersHL = (parentObj.registersHL & 0xFF00) | ((parentObj.registersHL << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0xFF) == 0);
	  }
	  //RLC (HL)
	  //#0x06:
	  ,function (parentObj) {
	    var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	    parentObj.FCarry = (temp_var > 0x7F);
	    temp_var = ((temp_var << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (temp_var == 0);
	  }
	  //RLC A
	  //#0x07:
	  ,function (parentObj) {
	    parentObj.FCarry = (parentObj.registerA > 0x7F);
	    parentObj.registerA = ((parentObj.registerA << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerA == 0);
	  }
	  //RRC B
	  //#0x08:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registerB & 0x01) == 0x01);
	    parentObj.registerB = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerB >> 1);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerB == 0);
	  }
	  //RRC C
	  //#0x09:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registerC & 0x01) == 0x01);
	    parentObj.registerC = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerC >> 1);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerC == 0);
	  }
	  //RRC D
	  //#0x0A:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registerD & 0x01) == 0x01);
	    parentObj.registerD = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerD >> 1);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerD == 0);
	  }
	  //RRC E
	  //#0x0B:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registerE & 0x01) == 0x01);
	    parentObj.registerE = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerE >> 1);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerE == 0);
	  }
	  //RRC H
	  //#0x0C:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registersHL & 0x0100) == 0x0100);
	    parentObj.registersHL = ((parentObj.FCarry) ? 0x8000 : 0) | ((parentObj.registersHL >> 1) & 0xFF00) | (parentObj.registersHL & 0xFF);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registersHL < 0x100);
	  }
	  //RRC L
	  //#0x0D:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registersHL & 0x01) == 0x01);
	    parentObj.registersHL = (parentObj.registersHL & 0xFF00) | ((parentObj.FCarry) ? 0x80 : 0) | ((parentObj.registersHL & 0xFF) >> 1);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0xFF) == 0);
	  }
	  //RRC (HL)
	  //#0x0E:
	  ,function (parentObj) {
	    var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	    parentObj.FCarry = ((temp_var & 0x01) == 0x01);
	    temp_var = ((parentObj.FCarry) ? 0x80 : 0) | (temp_var >> 1);
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (temp_var == 0);
	  }
	  //RRC A
	  //#0x0F:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registerA & 0x01) == 0x01);
	    parentObj.registerA = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerA >> 1);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerA == 0);
	  }
	  //RL B
	  //#0x10:
	  ,function (parentObj) {
	    var newFCarry = (parentObj.registerB > 0x7F);
	    parentObj.registerB = ((parentObj.registerB << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FCarry = newFCarry;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerB == 0);
	  }
	  //RL C
	  //#0x11:
	  ,function (parentObj) {
	    var newFCarry = (parentObj.registerC > 0x7F);
	    parentObj.registerC = ((parentObj.registerC << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FCarry = newFCarry;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerC == 0);
	  }
	  //RL D
	  //#0x12:
	  ,function (parentObj) {
	    var newFCarry = (parentObj.registerD > 0x7F);
	    parentObj.registerD = ((parentObj.registerD << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FCarry = newFCarry;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerD == 0);
	  }
	  //RL E
	  //#0x13:
	  ,function (parentObj) {
	    var newFCarry = (parentObj.registerE > 0x7F);
	    parentObj.registerE = ((parentObj.registerE << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FCarry = newFCarry;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerE == 0);
	  }
	  //RL H
	  //#0x14:
	  ,function (parentObj) {
	    var newFCarry = (parentObj.registersHL > 0x7FFF);
	    parentObj.registersHL = ((parentObj.registersHL << 1) & 0xFE00) | ((parentObj.FCarry) ? 0x100 : 0) | (parentObj.registersHL & 0xFF);
	    parentObj.FCarry = newFCarry;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registersHL < 0x100);
	  }
	  //RL L
	  //#0x15:
	  ,function (parentObj) {
	    var newFCarry = ((parentObj.registersHL & 0x80) == 0x80);
	    parentObj.registersHL = (parentObj.registersHL & 0xFF00) | ((parentObj.registersHL << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FCarry = newFCarry;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0xFF) == 0);
	  }
	  //RL (HL)
	  //#0x16:
	  ,function (parentObj) {
	    var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	    var newFCarry = (temp_var > 0x7F);
	    temp_var = ((temp_var << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FCarry = newFCarry;
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (temp_var == 0);
	  }
	  //RL A
	  //#0x17:
	  ,function (parentObj) {
	    var newFCarry = (parentObj.registerA > 0x7F);
	    parentObj.registerA = ((parentObj.registerA << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);
	    parentObj.FCarry = newFCarry;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerA == 0);
	  }
	  //RR B
	  //#0x18:
	  ,function (parentObj) {
	    var newFCarry = ((parentObj.registerB & 0x01) == 0x01);
	    parentObj.registerB = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerB >> 1);
	    parentObj.FCarry = newFCarry;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerB == 0);
	  }
	  //RR C
	  //#0x19:
	  ,function (parentObj) {
	    var newFCarry = ((parentObj.registerC & 0x01) == 0x01);
	    parentObj.registerC = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerC >> 1);
	    parentObj.FCarry = newFCarry;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerC == 0);
	  }
	  //RR D
	  //#0x1A:
	  ,function (parentObj) {
	    var newFCarry = ((parentObj.registerD & 0x01) == 0x01);
	    parentObj.registerD = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerD >> 1);
	    parentObj.FCarry = newFCarry;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerD == 0);
	  }
	  //RR E
	  //#0x1B:
	  ,function (parentObj) {
	    var newFCarry = ((parentObj.registerE & 0x01) == 0x01);
	    parentObj.registerE = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerE >> 1);
	    parentObj.FCarry = newFCarry;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerE == 0);
	  }
	  //RR H
	  //#0x1C:
	  ,function (parentObj) {
	    var newFCarry = ((parentObj.registersHL & 0x0100) == 0x0100);
	    parentObj.registersHL = ((parentObj.FCarry) ? 0x8000 : 0) | ((parentObj.registersHL >> 1) & 0xFF00) | (parentObj.registersHL & 0xFF);
	    parentObj.FCarry = newFCarry;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registersHL < 0x100);
	  }
	  //RR L
	  //#0x1D:
	  ,function (parentObj) {
	    var newFCarry = ((parentObj.registersHL & 0x01) == 0x01);
	    parentObj.registersHL = (parentObj.registersHL & 0xFF00) | ((parentObj.FCarry) ? 0x80 : 0) | ((parentObj.registersHL & 0xFF) >> 1);
	    parentObj.FCarry = newFCarry;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0xFF) == 0);
	  }
	  //RR (HL)
	  //#0x1E:
	  ,function (parentObj) {
	    var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	    var newFCarry = ((temp_var & 0x01) == 0x01);
	    temp_var = ((parentObj.FCarry) ? 0x80 : 0) | (temp_var >> 1);
	    parentObj.FCarry = newFCarry;
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (temp_var == 0);
	  }
	  //RR A
	  //#0x1F:
	  ,function (parentObj) {
	    var newFCarry = ((parentObj.registerA & 0x01) == 0x01);
	    parentObj.registerA = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerA >> 1);
	    parentObj.FCarry = newFCarry;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerA == 0);
	  }
	  //SLA B
	  //#0x20:
	  ,function (parentObj) {
	    parentObj.FCarry = (parentObj.registerB > 0x7F);
	    parentObj.registerB = (parentObj.registerB << 1) & 0xFF;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerB == 0);
	  }
	  //SLA C
	  //#0x21:
	  ,function (parentObj) {
	    parentObj.FCarry = (parentObj.registerC > 0x7F);
	    parentObj.registerC = (parentObj.registerC << 1) & 0xFF;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerC == 0);
	  }
	  //SLA D
	  //#0x22:
	  ,function (parentObj) {
	    parentObj.FCarry = (parentObj.registerD > 0x7F);
	    parentObj.registerD = (parentObj.registerD << 1) & 0xFF;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerD == 0);
	  }
	  //SLA E
	  //#0x23:
	  ,function (parentObj) {
	    parentObj.FCarry = (parentObj.registerE > 0x7F);
	    parentObj.registerE = (parentObj.registerE << 1) & 0xFF;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerE == 0);
	  }
	  //SLA H
	  //#0x24:
	  ,function (parentObj) {
	    parentObj.FCarry = (parentObj.registersHL > 0x7FFF);
	    parentObj.registersHL = ((parentObj.registersHL << 1) & 0xFE00) | (parentObj.registersHL & 0xFF);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registersHL < 0x100);
	  }
	  //SLA L
	  //#0x25:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registersHL & 0x0080) == 0x0080);
	    parentObj.registersHL = (parentObj.registersHL & 0xFF00) | ((parentObj.registersHL << 1) & 0xFF);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0xFF) == 0);
	  }
	  //SLA (HL)
	  //#0x26:
	  ,function (parentObj) {
	    var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	    parentObj.FCarry = (temp_var > 0x7F);
	    temp_var = (temp_var << 1) & 0xFF;
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (temp_var == 0);
	  }
	  //SLA A
	  //#0x27:
	  ,function (parentObj) {
	    parentObj.FCarry = (parentObj.registerA > 0x7F);
	    parentObj.registerA = (parentObj.registerA << 1) & 0xFF;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerA == 0);
	  }
	  //SRA B
	  //#0x28:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registerB & 0x01) == 0x01);
	    parentObj.registerB = (parentObj.registerB & 0x80) | (parentObj.registerB >> 1);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerB == 0);
	  }
	  //SRA C
	  //#0x29:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registerC & 0x01) == 0x01);
	    parentObj.registerC = (parentObj.registerC & 0x80) | (parentObj.registerC >> 1);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerC == 0);
	  }
	  //SRA D
	  //#0x2A:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registerD & 0x01) == 0x01);
	    parentObj.registerD = (parentObj.registerD & 0x80) | (parentObj.registerD >> 1);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerD == 0);
	  }
	  //SRA E
	  //#0x2B:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registerE & 0x01) == 0x01);
	    parentObj.registerE = (parentObj.registerE & 0x80) | (parentObj.registerE >> 1);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerE == 0);
	  }
	  //SRA H
	  //#0x2C:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registersHL & 0x0100) == 0x0100);
	    parentObj.registersHL = ((parentObj.registersHL >> 1) & 0xFF00) | (parentObj.registersHL & 0x80FF);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registersHL < 0x100);
	  }
	  //SRA L
	  //#0x2D:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registersHL & 0x0001) == 0x0001);
	    parentObj.registersHL = (parentObj.registersHL & 0xFF80) | ((parentObj.registersHL & 0xFF) >> 1);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0xFF) == 0);
	  }
	  //SRA (HL)
	  //#0x2E:
	  ,function (parentObj) {
	    var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	    parentObj.FCarry = ((temp_var & 0x01) == 0x01);
	    temp_var = (temp_var & 0x80) | (temp_var >> 1);
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (temp_var == 0);
	  }
	  //SRA A
	  //#0x2F:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registerA & 0x01) == 0x01);
	    parentObj.registerA = (parentObj.registerA & 0x80) | (parentObj.registerA >> 1);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerA == 0);
	  }
	  //SWAP B
	  //#0x30:
	  ,function (parentObj) {
	    parentObj.registerB = ((parentObj.registerB & 0xF) << 4) | (parentObj.registerB >> 4);
	    parentObj.FZero = (parentObj.registerB == 0);
	    parentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;
	  }
	  //SWAP C
	  //#0x31:
	  ,function (parentObj) {
	    parentObj.registerC = ((parentObj.registerC & 0xF) << 4) | (parentObj.registerC >> 4);
	    parentObj.FZero = (parentObj.registerC == 0);
	    parentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;
	  }
	  //SWAP D
	  //#0x32:
	  ,function (parentObj) {
	    parentObj.registerD = ((parentObj.registerD & 0xF) << 4) | (parentObj.registerD >> 4);
	    parentObj.FZero = (parentObj.registerD == 0);
	    parentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;
	  }
	  //SWAP E
	  //#0x33:
	  ,function (parentObj) {
	    parentObj.registerE = ((parentObj.registerE & 0xF) << 4) | (parentObj.registerE >> 4);
	    parentObj.FZero = (parentObj.registerE == 0);
	    parentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;
	  }
	  //SWAP H
	  //#0x34:
	  ,function (parentObj) {
	    parentObj.registersHL = ((parentObj.registersHL & 0xF00) << 4) | ((parentObj.registersHL & 0xF000) >> 4) | (parentObj.registersHL & 0xFF);
	    parentObj.FZero = (parentObj.registersHL < 0x100);
	    parentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;
	  }
	  //SWAP L
	  //#0x35:
	  ,function (parentObj) {
	    parentObj.registersHL = (parentObj.registersHL & 0xFF00) | ((parentObj.registersHL & 0xF) << 4) | ((parentObj.registersHL & 0xF0) >> 4);
	    parentObj.FZero = ((parentObj.registersHL & 0xFF) == 0);
	    parentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;
	  }
	  //SWAP (HL)
	  //#0x36:
	  ,function (parentObj) {
	    var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	    temp_var = ((temp_var & 0xF) << 4) | (temp_var >> 4);
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);
	    parentObj.FZero = (temp_var == 0);
	    parentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;
	  }
	  //SWAP A
	  //#0x37:
	  ,function (parentObj) {
	    parentObj.registerA = ((parentObj.registerA & 0xF) << 4) | (parentObj.registerA >> 4);
	    parentObj.FZero = (parentObj.registerA == 0);
	    parentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;
	  }
	  //SRL B
	  //#0x38:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registerB & 0x01) == 0x01);
	    parentObj.registerB >>= 1;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerB == 0);
	  }
	  //SRL C
	  //#0x39:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registerC & 0x01) == 0x01);
	    parentObj.registerC >>= 1;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerC == 0);
	  }
	  //SRL D
	  //#0x3A:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registerD & 0x01) == 0x01);
	    parentObj.registerD >>= 1;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerD == 0);
	  }
	  //SRL E
	  //#0x3B:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registerE & 0x01) == 0x01);
	    parentObj.registerE >>= 1;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerE == 0);
	  }
	  //SRL H
	  //#0x3C:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registersHL & 0x0100) == 0x0100);
	    parentObj.registersHL = ((parentObj.registersHL >> 1) & 0xFF00) | (parentObj.registersHL & 0xFF);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registersHL < 0x100);
	  }
	  //SRL L
	  //#0x3D:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registersHL & 0x0001) == 0x0001);
	    parentObj.registersHL = (parentObj.registersHL & 0xFF00) | ((parentObj.registersHL & 0xFF) >> 1);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0xFF) == 0);
	  }
	  //SRL (HL)
	  //#0x3E:
	  ,function (parentObj) {
	    var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);
	    parentObj.FCarry = ((temp_var & 0x01) == 0x01);
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var >> 1);
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (temp_var < 2);
	  }
	  //SRL A
	  //#0x3F:
	  ,function (parentObj) {
	    parentObj.FCarry = ((parentObj.registerA & 0x01) == 0x01);
	    parentObj.registerA >>= 1;
	    parentObj.FHalfCarry = parentObj.FSubtract = false;
	    parentObj.FZero = (parentObj.registerA == 0);
	  }
	  //BIT 0, B
	  //#0x40:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerB & 0x01) == 0);
	  }
	  //BIT 0, C
	  //#0x41:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerC & 0x01) == 0);
	  }
	  //BIT 0, D
	  //#0x42:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerD & 0x01) == 0);
	  }
	  //BIT 0, E
	  //#0x43:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerE & 0x01) == 0);
	  }
	  //BIT 0, H
	  //#0x44:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0x0100) == 0);
	  }
	  //BIT 0, L
	  //#0x45:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0x0001) == 0);
	  }
	  //BIT 0, (HL)
	  //#0x46:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x01) == 0);
	  }
	  //BIT 0, A
	  //#0x47:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerA & 0x01) == 0);
	  }
	  //BIT 1, B
	  //#0x48:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerB & 0x02) == 0);
	  }
	  //BIT 1, C
	  //#0x49:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerC & 0x02) == 0);
	  }
	  //BIT 1, D
	  //#0x4A:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerD & 0x02) == 0);
	  }
	  //BIT 1, E
	  //#0x4B:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerE & 0x02) == 0);
	  }
	  //BIT 1, H
	  //#0x4C:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0x0200) == 0);
	  }
	  //BIT 1, L
	  //#0x4D:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0x0002) == 0);
	  }
	  //BIT 1, (HL)
	  //#0x4E:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x02) == 0);
	  }
	  //BIT 1, A
	  //#0x4F:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerA & 0x02) == 0);
	  }
	  //BIT 2, B
	  //#0x50:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerB & 0x04) == 0);
	  }
	  //BIT 2, C
	  //#0x51:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerC & 0x04) == 0);
	  }
	  //BIT 2, D
	  //#0x52:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerD & 0x04) == 0);
	  }
	  //BIT 2, E
	  //#0x53:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerE & 0x04) == 0);
	  }
	  //BIT 2, H
	  //#0x54:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0x0400) == 0);
	  }
	  //BIT 2, L
	  //#0x55:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0x0004) == 0);
	  }
	  //BIT 2, (HL)
	  //#0x56:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x04) == 0);
	  }
	  //BIT 2, A
	  //#0x57:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerA & 0x04) == 0);
	  }
	  //BIT 3, B
	  //#0x58:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerB & 0x08) == 0);
	  }
	  //BIT 3, C
	  //#0x59:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerC & 0x08) == 0);
	  }
	  //BIT 3, D
	  //#0x5A:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerD & 0x08) == 0);
	  }
	  //BIT 3, E
	  //#0x5B:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerE & 0x08) == 0);
	  }
	  //BIT 3, H
	  //#0x5C:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0x0800) == 0);
	  }
	  //BIT 3, L
	  //#0x5D:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0x0008) == 0);
	  }
	  //BIT 3, (HL)
	  //#0x5E:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x08) == 0);
	  }
	  //BIT 3, A
	  //#0x5F:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerA & 0x08) == 0);
	  }
	  //BIT 4, B
	  //#0x60:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerB & 0x10) == 0);
	  }
	  //BIT 4, C
	  //#0x61:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerC & 0x10) == 0);
	  }
	  //BIT 4, D
	  //#0x62:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerD & 0x10) == 0);
	  }
	  //BIT 4, E
	  //#0x63:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerE & 0x10) == 0);
	  }
	  //BIT 4, H
	  //#0x64:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0x1000) == 0);
	  }
	  //BIT 4, L
	  //#0x65:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0x0010) == 0);
	  }
	  //BIT 4, (HL)
	  //#0x66:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x10) == 0);
	  }
	  //BIT 4, A
	  //#0x67:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerA & 0x10) == 0);
	  }
	  //BIT 5, B
	  //#0x68:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerB & 0x20) == 0);
	  }
	  //BIT 5, C
	  //#0x69:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerC & 0x20) == 0);
	  }
	  //BIT 5, D
	  //#0x6A:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerD & 0x20) == 0);
	  }
	  //BIT 5, E
	  //#0x6B:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerE & 0x20) == 0);
	  }
	  //BIT 5, H
	  //#0x6C:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0x2000) == 0);
	  }
	  //BIT 5, L
	  //#0x6D:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0x0020) == 0);
	  }
	  //BIT 5, (HL)
	  //#0x6E:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x20) == 0);
	  }
	  //BIT 5, A
	  //#0x6F:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerA & 0x20) == 0);
	  }
	  //BIT 6, B
	  //#0x70:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerB & 0x40) == 0);
	  }
	  //BIT 6, C
	  //#0x71:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerC & 0x40) == 0);
	  }
	  //BIT 6, D
	  //#0x72:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerD & 0x40) == 0);
	  }
	  //BIT 6, E
	  //#0x73:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerE & 0x40) == 0);
	  }
	  //BIT 6, H
	  //#0x74:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0x4000) == 0);
	  }
	  //BIT 6, L
	  //#0x75:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0x0040) == 0);
	  }
	  //BIT 6, (HL)
	  //#0x76:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x40) == 0);
	  }
	  //BIT 6, A
	  //#0x77:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerA & 0x40) == 0);
	  }
	  //BIT 7, B
	  //#0x78:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerB & 0x80) == 0);
	  }
	  //BIT 7, C
	  //#0x79:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerC & 0x80) == 0);
	  }
	  //BIT 7, D
	  //#0x7A:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerD & 0x80) == 0);
	  }
	  //BIT 7, E
	  //#0x7B:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerE & 0x80) == 0);
	  }
	  //BIT 7, H
	  //#0x7C:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0x8000) == 0);
	  }
	  //BIT 7, L
	  //#0x7D:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registersHL & 0x0080) == 0);
	  }
	  //BIT 7, (HL)
	  //#0x7E:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x80) == 0);
	  }
	  //BIT 7, A
	  //#0x7F:
	  ,function (parentObj) {
	    parentObj.FHalfCarry = true;
	    parentObj.FSubtract = false;
	    parentObj.FZero = ((parentObj.registerA & 0x80) == 0);
	  }
	  //RES 0, B
	  //#0x80:
	  ,function (parentObj) {
	    parentObj.registerB &= 0xFE;
	  }
	  //RES 0, C
	  //#0x81:
	  ,function (parentObj) {
	    parentObj.registerC &= 0xFE;
	  }
	  //RES 0, D
	  //#0x82:
	  ,function (parentObj) {
	    parentObj.registerD &= 0xFE;
	  }
	  //RES 0, E
	  //#0x83:
	  ,function (parentObj) {
	    parentObj.registerE &= 0xFE;
	  }
	  //RES 0, H
	  //#0x84:
	  ,function (parentObj) {
	    parentObj.registersHL &= 0xFEFF;
	  }
	  //RES 0, L
	  //#0x85:
	  ,function (parentObj) {
	    parentObj.registersHL &= 0xFFFE;
	  }
	  //RES 0, (HL)
	  //#0x86:
	  ,function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xFE);
	  }
	  //RES 0, A
	  //#0x87:
	  ,function (parentObj) {
	    parentObj.registerA &= 0xFE;
	  }
	  //RES 1, B
	  //#0x88:
	  ,function (parentObj) {
	    parentObj.registerB &= 0xFD;
	  }
	  //RES 1, C
	  //#0x89:
	  ,function (parentObj) {
	    parentObj.registerC &= 0xFD;
	  }
	  //RES 1, D
	  //#0x8A:
	  ,function (parentObj) {
	    parentObj.registerD &= 0xFD;
	  }
	  //RES 1, E
	  //#0x8B:
	  ,function (parentObj) {
	    parentObj.registerE &= 0xFD;
	  }
	  //RES 1, H
	  //#0x8C:
	  ,function (parentObj) {
	    parentObj.registersHL &= 0xFDFF;
	  }
	  //RES 1, L
	  //#0x8D:
	  ,function (parentObj) {
	    parentObj.registersHL &= 0xFFFD;
	  }
	  //RES 1, (HL)
	  //#0x8E:
	  ,function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xFD);
	  }
	  //RES 1, A
	  //#0x8F:
	  ,function (parentObj) {
	    parentObj.registerA &= 0xFD;
	  }
	  //RES 2, B
	  //#0x90:
	  ,function (parentObj) {
	    parentObj.registerB &= 0xFB;
	  }
	  //RES 2, C
	  //#0x91:
	  ,function (parentObj) {
	    parentObj.registerC &= 0xFB;
	  }
	  //RES 2, D
	  //#0x92:
	  ,function (parentObj) {
	    parentObj.registerD &= 0xFB;
	  }
	  //RES 2, E
	  //#0x93:
	  ,function (parentObj) {
	    parentObj.registerE &= 0xFB;
	  }
	  //RES 2, H
	  //#0x94:
	  ,function (parentObj) {
	    parentObj.registersHL &= 0xFBFF;
	  }
	  //RES 2, L
	  //#0x95:
	  ,function (parentObj) {
	    parentObj.registersHL &= 0xFFFB;
	  }
	  //RES 2, (HL)
	  //#0x96:
	  ,function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xFB);
	  }
	  //RES 2, A
	  //#0x97:
	  ,function (parentObj) {
	    parentObj.registerA &= 0xFB;
	  }
	  //RES 3, B
	  //#0x98:
	  ,function (parentObj) {
	    parentObj.registerB &= 0xF7;
	  }
	  //RES 3, C
	  //#0x99:
	  ,function (parentObj) {
	    parentObj.registerC &= 0xF7;
	  }
	  //RES 3, D
	  //#0x9A:
	  ,function (parentObj) {
	    parentObj.registerD &= 0xF7;
	  }
	  //RES 3, E
	  //#0x9B:
	  ,function (parentObj) {
	    parentObj.registerE &= 0xF7;
	  }
	  //RES 3, H
	  //#0x9C:
	  ,function (parentObj) {
	    parentObj.registersHL &= 0xF7FF;
	  }
	  //RES 3, L
	  //#0x9D:
	  ,function (parentObj) {
	    parentObj.registersHL &= 0xFFF7;
	  }
	  //RES 3, (HL)
	  //#0x9E:
	  ,function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xF7);
	  }
	  //RES 3, A
	  //#0x9F:
	  ,function (parentObj) {
	    parentObj.registerA &= 0xF7;
	  }
	  //RES 3, B
	  //#0xA0:
	  ,function (parentObj) {
	    parentObj.registerB &= 0xEF;
	  }
	  //RES 4, C
	  //#0xA1:
	  ,function (parentObj) {
	    parentObj.registerC &= 0xEF;
	  }
	  //RES 4, D
	  //#0xA2:
	  ,function (parentObj) {
	    parentObj.registerD &= 0xEF;
	  }
	  //RES 4, E
	  //#0xA3:
	  ,function (parentObj) {
	    parentObj.registerE &= 0xEF;
	  }
	  //RES 4, H
	  //#0xA4:
	  ,function (parentObj) {
	    parentObj.registersHL &= 0xEFFF;
	  }
	  //RES 4, L
	  //#0xA5:
	  ,function (parentObj) {
	    parentObj.registersHL &= 0xFFEF;
	  }
	  //RES 4, (HL)
	  //#0xA6:
	  ,function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xEF);
	  }
	  //RES 4, A
	  //#0xA7:
	  ,function (parentObj) {
	    parentObj.registerA &= 0xEF;
	  }
	  //RES 5, B
	  //#0xA8:
	  ,function (parentObj) {
	    parentObj.registerB &= 0xDF;
	  }
	  //RES 5, C
	  //#0xA9:
	  ,function (parentObj) {
	    parentObj.registerC &= 0xDF;
	  }
	  //RES 5, D
	  //#0xAA:
	  ,function (parentObj) {
	    parentObj.registerD &= 0xDF;
	  }
	  //RES 5, E
	  //#0xAB:
	  ,function (parentObj) {
	    parentObj.registerE &= 0xDF;
	  }
	  //RES 5, H
	  //#0xAC:
	  ,function (parentObj) {
	    parentObj.registersHL &= 0xDFFF;
	  }
	  //RES 5, L
	  //#0xAD:
	  ,function (parentObj) {
	    parentObj.registersHL &= 0xFFDF;
	  }
	  //RES 5, (HL)
	  //#0xAE:
	  ,function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xDF);
	  }
	  //RES 5, A
	  //#0xAF:
	  ,function (parentObj) {
	    parentObj.registerA &= 0xDF;
	  }
	  //RES 6, B
	  //#0xB0:
	  ,function (parentObj) {
	    parentObj.registerB &= 0xBF;
	  }
	  //RES 6, C
	  //#0xB1:
	  ,function (parentObj) {
	    parentObj.registerC &= 0xBF;
	  }
	  //RES 6, D
	  //#0xB2:
	  ,function (parentObj) {
	    parentObj.registerD &= 0xBF;
	  }
	  //RES 6, E
	  //#0xB3:
	  ,function (parentObj) {
	    parentObj.registerE &= 0xBF;
	  }
	  //RES 6, H
	  //#0xB4:
	  ,function (parentObj) {
	    parentObj.registersHL &= 0xBFFF;
	  }
	  //RES 6, L
	  //#0xB5:
	  ,function (parentObj) {
	    parentObj.registersHL &= 0xFFBF;
	  }
	  //RES 6, (HL)
	  //#0xB6:
	  ,function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xBF);
	  }
	  //RES 6, A
	  //#0xB7:
	  ,function (parentObj) {
	    parentObj.registerA &= 0xBF;
	  }
	  //RES 7, B
	  //#0xB8:
	  ,function (parentObj) {
	    parentObj.registerB &= 0x7F;
	  }
	  //RES 7, C
	  //#0xB9:
	  ,function (parentObj) {
	    parentObj.registerC &= 0x7F;
	  }
	  //RES 7, D
	  //#0xBA:
	  ,function (parentObj) {
	    parentObj.registerD &= 0x7F;
	  }
	  //RES 7, E
	  //#0xBB:
	  ,function (parentObj) {
	    parentObj.registerE &= 0x7F;
	  }
	  //RES 7, H
	  //#0xBC:
	  ,function (parentObj) {
	    parentObj.registersHL &= 0x7FFF;
	  }
	  //RES 7, L
	  //#0xBD:
	  ,function (parentObj) {
	    parentObj.registersHL &= 0xFF7F;
	  }
	  //RES 7, (HL)
	  //#0xBE:
	  ,function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x7F);
	  }
	  //RES 7, A
	  //#0xBF:
	  ,function (parentObj) {
	    parentObj.registerA &= 0x7F;
	  }
	  //SET 0, B
	  //#0xC0:
	  ,function (parentObj) {
	    parentObj.registerB |= 0x01;
	  }
	  //SET 0, C
	  //#0xC1:
	  ,function (parentObj) {
	    parentObj.registerC |= 0x01;
	  }
	  //SET 0, D
	  //#0xC2:
	  ,function (parentObj) {
	    parentObj.registerD |= 0x01;
	  }
	  //SET 0, E
	  //#0xC3:
	  ,function (parentObj) {
	    parentObj.registerE |= 0x01;
	  }
	  //SET 0, H
	  //#0xC4:
	  ,function (parentObj) {
	    parentObj.registersHL |= 0x0100;
	  }
	  //SET 0, L
	  //#0xC5:
	  ,function (parentObj) {
	    parentObj.registersHL |= 0x01;
	  }
	  //SET 0, (HL)
	  //#0xC6:
	  ,function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x01);
	  }
	  //SET 0, A
	  //#0xC7:
	  ,function (parentObj) {
	    parentObj.registerA |= 0x01;
	  }
	  //SET 1, B
	  //#0xC8:
	  ,function (parentObj) {
	    parentObj.registerB |= 0x02;
	  }
	  //SET 1, C
	  //#0xC9:
	  ,function (parentObj) {
	    parentObj.registerC |= 0x02;
	  }
	  //SET 1, D
	  //#0xCA:
	  ,function (parentObj) {
	    parentObj.registerD |= 0x02;
	  }
	  //SET 1, E
	  //#0xCB:
	  ,function (parentObj) {
	    parentObj.registerE |= 0x02;
	  }
	  //SET 1, H
	  //#0xCC:
	  ,function (parentObj) {
	    parentObj.registersHL |= 0x0200;
	  }
	  //SET 1, L
	  //#0xCD:
	  ,function (parentObj) {
	    parentObj.registersHL |= 0x02;
	  }
	  //SET 1, (HL)
	  //#0xCE:
	  ,function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x02);
	  }
	  //SET 1, A
	  //#0xCF:
	  ,function (parentObj) {
	    parentObj.registerA |= 0x02;
	  }
	  //SET 2, B
	  //#0xD0:
	  ,function (parentObj) {
	    parentObj.registerB |= 0x04;
	  }
	  //SET 2, C
	  //#0xD1:
	  ,function (parentObj) {
	    parentObj.registerC |= 0x04;
	  }
	  //SET 2, D
	  //#0xD2:
	  ,function (parentObj) {
	    parentObj.registerD |= 0x04;
	  }
	  //SET 2, E
	  //#0xD3:
	  ,function (parentObj) {
	    parentObj.registerE |= 0x04;
	  }
	  //SET 2, H
	  //#0xD4:
	  ,function (parentObj) {
	    parentObj.registersHL |= 0x0400;
	  }
	  //SET 2, L
	  //#0xD5:
	  ,function (parentObj) {
	    parentObj.registersHL |= 0x04;
	  }
	  //SET 2, (HL)
	  //#0xD6:
	  ,function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x04);
	  }
	  //SET 2, A
	  //#0xD7:
	  ,function (parentObj) {
	    parentObj.registerA |= 0x04;
	  }
	  //SET 3, B
	  //#0xD8:
	  ,function (parentObj) {
	    parentObj.registerB |= 0x08;
	  }
	  //SET 3, C
	  //#0xD9:
	  ,function (parentObj) {
	    parentObj.registerC |= 0x08;
	  }
	  //SET 3, D
	  //#0xDA:
	  ,function (parentObj) {
	    parentObj.registerD |= 0x08;
	  }
	  //SET 3, E
	  //#0xDB:
	  ,function (parentObj) {
	    parentObj.registerE |= 0x08;
	  }
	  //SET 3, H
	  //#0xDC:
	  ,function (parentObj) {
	    parentObj.registersHL |= 0x0800;
	  }
	  //SET 3, L
	  //#0xDD:
	  ,function (parentObj) {
	    parentObj.registersHL |= 0x08;
	  }
	  //SET 3, (HL)
	  //#0xDE:
	  ,function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x08);
	  }
	  //SET 3, A
	  //#0xDF:
	  ,function (parentObj) {
	    parentObj.registerA |= 0x08;
	  }
	  //SET 4, B
	  //#0xE0:
	  ,function (parentObj) {
	    parentObj.registerB |= 0x10;
	  }
	  //SET 4, C
	  //#0xE1:
	  ,function (parentObj) {
	    parentObj.registerC |= 0x10;
	  }
	  //SET 4, D
	  //#0xE2:
	  ,function (parentObj) {
	    parentObj.registerD |= 0x10;
	  }
	  //SET 4, E
	  //#0xE3:
	  ,function (parentObj) {
	    parentObj.registerE |= 0x10;
	  }
	  //SET 4, H
	  //#0xE4:
	  ,function (parentObj) {
	    parentObj.registersHL |= 0x1000;
	  }
	  //SET 4, L
	  //#0xE5:
	  ,function (parentObj) {
	    parentObj.registersHL |= 0x10;
	  }
	  //SET 4, (HL)
	  //#0xE6:
	  ,function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x10);
	  }
	  //SET 4, A
	  //#0xE7:
	  ,function (parentObj) {
	    parentObj.registerA |= 0x10;
	  }
	  //SET 5, B
	  //#0xE8:
	  ,function (parentObj) {
	    parentObj.registerB |= 0x20;
	  }
	  //SET 5, C
	  //#0xE9:
	  ,function (parentObj) {
	    parentObj.registerC |= 0x20;
	  }
	  //SET 5, D
	  //#0xEA:
	  ,function (parentObj) {
	    parentObj.registerD |= 0x20;
	  }
	  //SET 5, E
	  //#0xEB:
	  ,function (parentObj) {
	    parentObj.registerE |= 0x20;
	  }
	  //SET 5, H
	  //#0xEC:
	  ,function (parentObj) {
	    parentObj.registersHL |= 0x2000;
	  }
	  //SET 5, L
	  //#0xED:
	  ,function (parentObj) {
	    parentObj.registersHL |= 0x20;
	  }
	  //SET 5, (HL)
	  //#0xEE:
	  ,function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x20);
	  }
	  //SET 5, A
	  //#0xEF:
	  ,function (parentObj) {
	    parentObj.registerA |= 0x20;
	  }
	  //SET 6, B
	  //#0xF0:
	  ,function (parentObj) {
	    parentObj.registerB |= 0x40;
	  }
	  //SET 6, C
	  //#0xF1:
	  ,function (parentObj) {
	    parentObj.registerC |= 0x40;
	  }
	  //SET 6, D
	  //#0xF2:
	  ,function (parentObj) {
	    parentObj.registerD |= 0x40;
	  }
	  //SET 6, E
	  //#0xF3:
	  ,function (parentObj) {
	    parentObj.registerE |= 0x40;
	  }
	  //SET 6, H
	  //#0xF4:
	  ,function (parentObj) {
	    parentObj.registersHL |= 0x4000;
	  }
	  //SET 6, L
	  //#0xF5:
	  ,function (parentObj) {
	    parentObj.registersHL |= 0x40;
	  }
	  //SET 6, (HL)
	  //#0xF6:
	  ,function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x40);
	  }
	  //SET 6, A
	  //#0xF7:
	  ,function (parentObj) {
	    parentObj.registerA |= 0x40;
	  }
	  //SET 7, B
	  //#0xF8:
	  ,function (parentObj) {
	    parentObj.registerB |= 0x80;
	  }
	  //SET 7, C
	  //#0xF9:
	  ,function (parentObj) {
	    parentObj.registerC |= 0x80;
	  }
	  //SET 7, D
	  //#0xFA:
	  ,function (parentObj) {
	    parentObj.registerD |= 0x80;
	  }
	  //SET 7, E
	  //#0xFB:
	  ,function (parentObj) {
	    parentObj.registerE |= 0x80;
	  }
	  //SET 7, H
	  //#0xFC:
	  ,function (parentObj) {
	    parentObj.registersHL |= 0x8000;
	  }
	  //SET 7, L
	  //#0xFD:
	  ,function (parentObj) {
	    parentObj.registersHL |= 0x80;
	  }
	  //SET 7, (HL)
	  //#0xFE:
	  ,function (parentObj) {
	    parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x80);
	  }
	  //SET 7, A
	  //#0xFF:
	  ,function (parentObj) {
	    parentObj.registerA |= 0x80;
	  }
	];
	GameBoyCore.prototype.TICKTable = [   //Number of machine cycles for each instruction:
	/*   0,  1,  2,  3,  4,  5,  6,  7,      8,  9,  A, B,  C,  D, E,  F*/
	     4, 12,  8,  8,  4,  4,  8,  4,     20,  8,  8, 8,  4,  4, 8,  4,  //0
	     4, 12,  8,  8,  4,  4,  8,  4,     12,  8,  8, 8,  4,  4, 8,  4,  //1
	     8, 12,  8,  8,  4,  4,  8,  4,      8,  8,  8, 8,  4,  4, 8,  4,  //2
	     8, 12,  8,  8, 12, 12, 12,  4,      8,  8,  8, 8,  4,  4, 8,  4,  //3
	
	     4,  4,  4,  4,  4,  4,  8,  4,      4,  4,  4, 4,  4,  4, 8,  4,  //4
	     4,  4,  4,  4,  4,  4,  8,  4,      4,  4,  4, 4,  4,  4, 8,  4,  //5
	     4,  4,  4,  4,  4,  4,  8,  4,      4,  4,  4, 4,  4,  4, 8,  4,  //6
	     8,  8,  8,  8,  8,  8,  4,  8,      4,  4,  4, 4,  4,  4, 8,  4,  //7
	
	     4,  4,  4,  4,  4,  4,  8,  4,      4,  4,  4, 4,  4,  4, 8,  4,  //8
	     4,  4,  4,  4,  4,  4,  8,  4,      4,  4,  4, 4,  4,  4, 8,  4,  //9
	     4,  4,  4,  4,  4,  4,  8,  4,      4,  4,  4, 4,  4,  4, 8,  4,  //A
	     4,  4,  4,  4,  4,  4,  8,  4,      4,  4,  4, 4,  4,  4, 8,  4,  //B
	
	     8, 12, 12, 16, 12, 16,  8, 16,      8, 16, 12, 0, 12, 24, 8, 16,  //C
	     8, 12, 12,  4, 12, 16,  8, 16,      8, 16, 12, 4, 12,  4, 8, 16,  //D
	    12, 12,  8,  4,  4, 16,  8, 16,     16,  4, 16, 4,  4,  4, 8, 16,  //E
	    12, 12,  8,  4,  4, 16,  8, 16,     12,  8, 16, 4,  0,  4, 8, 16   //F
	];
	GameBoyCore.prototype.SecondaryTICKTable = [  //Number of machine cycles for each 0xCBXX instruction:
	/*  0, 1, 2, 3, 4, 5,  6, 7,        8, 9, A, B, C, D,  E, F*/
	    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //0
	    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //1
	    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //2
	    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //3
	
	    8, 8, 8, 8, 8, 8, 12, 8,        8, 8, 8, 8, 8, 8, 12, 8,  //4
	    8, 8, 8, 8, 8, 8, 12, 8,        8, 8, 8, 8, 8, 8, 12, 8,  //5
	    8, 8, 8, 8, 8, 8, 12, 8,        8, 8, 8, 8, 8, 8, 12, 8,  //6
	    8, 8, 8, 8, 8, 8, 12, 8,        8, 8, 8, 8, 8, 8, 12, 8,  //7
	
	    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //8
	    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //9
	    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //A
	    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //B
	
	    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //C
	    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //D
	    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //E
	    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8   //F
	];
	GameBoyCore.prototype.saveSRAMState = function () {
	  if (!this.cBATT || this.MBCRam.length == 0) {
	    //No battery backup...
	    return [];
	  }
	  else {
	    //Return the MBC RAM for backup...
	    return this.fromTypedArray(this.MBCRam);
	  }
	};
	GameBoyCore.prototype.saveRTCState = function () {
	  if (!this.cTIMER) {
	    //No battery backup...
	    return [];
	  }
	  else {
	    //Return the MBC RAM for backup...
	    return [
	      this.lastIteration,
	      this.RTCisLatched,
	      this.latchedSeconds,
	      this.latchedMinutes,
	      this.latchedHours,
	      this.latchedLDays,
	      this.latchedHDays,
	      this.RTCSeconds,
	      this.RTCMinutes,
	      this.RTCHours,
	      this.RTCDays,
	      this.RTCDayOverFlow,
	      this.RTCHALT
	    ];
	  }
	};
	GameBoyCore.prototype.saveState = function () {
	  return [
	    this.fromTypedArray(this.ROM),
	    this.inBootstrap,
	    this.registerA,
	    this.FZero,
	    this.FSubtract,
	    this.FHalfCarry,
	    this.FCarry,
	    this.registerB,
	    this.registerC,
	    this.registerD,
	    this.registerE,
	    this.registersHL,
	    this.stackPointer,
	    this.programCounter,
	    this.halt,
	    this.IME,
	    this.hdmaRunning,
	    this.CPUTicks,
	    this.doubleSpeedShifter,
	    this.fromTypedArray(this.memory),
	    this.fromTypedArray(this.MBCRam),
	    this.fromTypedArray(this.VRAM),
	    this.currVRAMBank,
	    this.fromTypedArray(this.GBCMemory),
	    this.MBC1Mode,
	    this.MBCRAMBanksEnabled,
	    this.currMBCRAMBank,
	    this.currMBCRAMBankPosition,
	    this.cGBC,
	    this.gbcRamBank,
	    this.gbcRamBankPosition,
	    this.ROMBank1offs,
	    this.currentROMBank,
	    this.cartridgeType,
	    this.name,
	    this.gameCode,
	    this.modeSTAT,
	    this.LYCMatchTriggerSTAT,
	    this.mode2TriggerSTAT,
	    this.mode1TriggerSTAT,
	    this.mode0TriggerSTAT,
	    this.LCDisOn,
	    this.gfxWindowCHRBankPosition,
	    this.gfxWindowDisplay,
	    this.gfxSpriteShow,
	    this.gfxSpriteNormalHeight,
	    this.gfxBackgroundCHRBankPosition,
	    this.gfxBackgroundBankOffset,
	    this.TIMAEnabled,
	    this.DIVTicks,
	    this.LCDTicks,
	    this.timerTicks,
	    this.TACClocker,
	    this.serialTimer,
	    this.serialShiftTimer,
	    this.serialShiftTimerAllocated,
	    this.IRQEnableDelay,
	    this.lastIteration,
	    this.cMBC1,
	    this.cMBC2,
	    this.cMBC3,
	    this.cMBC5,
	    this.cMBC7,
	    this.cSRAM,
	    this.cMMMO1,
	    this.cRUMBLE,
	    this.cCamera,
	    this.cTAMA5,
	    this.cHuC3,
	    this.cHuC1,
	    this.drewBlank,
	    this.fromTypedArray(this.frameBuffer),
	    this.bgEnabled,
	    this.BGPriorityEnabled,
	    this.channel1FrequencyTracker,
	    this.channel1FrequencyCounter,
	    this.channel1totalLength,
	    this.channel1envelopeVolume,
	    this.channel1envelopeType,
	    this.channel1envelopeSweeps,
	    this.channel1envelopeSweepsLast,
	    this.channel1consecutive,
	    this.channel1frequency,
	    this.channel1SweepFault,
	    this.channel1ShadowFrequency,
	    this.channel1timeSweep,
	    this.channel1lastTimeSweep,
	    this.channel1Swept,
	    this.channel1frequencySweepDivider,
	    this.channel1decreaseSweep,
	    this.channel2FrequencyTracker,
	    this.channel2FrequencyCounter,
	    this.channel2totalLength,
	    this.channel2envelopeVolume,
	    this.channel2envelopeType,
	    this.channel2envelopeSweeps,
	    this.channel2envelopeSweepsLast,
	    this.channel2consecutive,
	    this.channel2frequency,
	    this.channel3canPlay,
	    this.channel3totalLength,
	    this.channel3patternType,
	    this.channel3frequency,
	    this.channel3consecutive,
	    this.fromTypedArray(this.channel3PCM),
	    this.channel4FrequencyPeriod,
	    this.channel4lastSampleLookup,
	    this.channel4totalLength,
	    this.channel4envelopeVolume,
	    this.channel4currentVolume,
	    this.channel4envelopeType,
	    this.channel4envelopeSweeps,
	    this.channel4envelopeSweepsLast,
	    this.channel4consecutive,
	    this.channel4BitRange,
	    this.soundMasterEnabled,
	    this.VinLeftChannelMasterVolume,
	    this.VinRightChannelMasterVolume,
	    this.leftChannel1,
	    this.leftChannel2,
	    this.leftChannel3,
	    this.leftChannel4,
	    this.rightChannel1,
	    this.rightChannel2,
	    this.rightChannel3,
	    this.rightChannel4,
	    this.channel1currentSampleLeft,
	    this.channel1currentSampleRight,
	    this.channel2currentSampleLeft,
	    this.channel2currentSampleRight,
	    this.channel3currentSampleLeft,
	    this.channel3currentSampleRight,
	    this.channel4currentSampleLeft,
	    this.channel4currentSampleRight,
	    this.channel1currentSampleLeftSecondary,
	    this.channel1currentSampleRightSecondary,
	    this.channel2currentSampleLeftSecondary,
	    this.channel2currentSampleRightSecondary,
	    this.channel3currentSampleLeftSecondary,
	    this.channel3currentSampleRightSecondary,
	    this.channel4currentSampleLeftSecondary,
	    this.channel4currentSampleRightSecondary,
	    this.channel1currentSampleLeftTrimary,
	    this.channel1currentSampleRightTrimary,
	    this.channel2currentSampleLeftTrimary,
	    this.channel2currentSampleRightTrimary,
	    this.mixerOutputCache,
	    this.channel1DutyTracker,
	    this.channel1CachedDuty,
	    this.channel2DutyTracker,
	    this.channel2CachedDuty,
	    this.channel1Enabled,
	    this.channel2Enabled,
	    this.channel3Enabled,
	    this.channel4Enabled,
	    this.sequencerClocks,
	    this.sequencePosition,
	    this.channel3Counter,
	    this.channel4Counter,
	    this.cachedChannel3Sample,
	    this.cachedChannel4Sample,
	    this.channel3FrequencyPeriod,
	    this.channel3lastSampleLookup,
	    this.actualScanLine,
	    this.lastUnrenderedLine,
	    this.queuedScanLines,
	    this.RTCisLatched,
	    this.latchedSeconds,
	    this.latchedMinutes,
	    this.latchedHours,
	    this.latchedLDays,
	    this.latchedHDays,
	    this.RTCSeconds,
	    this.RTCMinutes,
	    this.RTCHours,
	    this.RTCDays,
	    this.RTCDayOverFlow,
	    this.RTCHALT,
	    this.usedBootROM,
	    this.skipPCIncrement,
	    this.STATTracker,
	    this.gbcRamBankPositionECHO,
	    this.numRAMBanks,
	    this.windowY,
	    this.windowX,
	    this.fromTypedArray(this.gbcOBJRawPalette),
	    this.fromTypedArray(this.gbcBGRawPalette),
	    this.fromTypedArray(this.gbOBJPalette),
	    this.fromTypedArray(this.gbBGPalette),
	    this.fromTypedArray(this.gbcOBJPalette),
	    this.fromTypedArray(this.gbcBGPalette),
	    this.fromTypedArray(this.gbBGColorizedPalette),
	    this.fromTypedArray(this.gbOBJColorizedPalette),
	    this.fromTypedArray(this.cachedBGPaletteConversion),
	    this.fromTypedArray(this.cachedOBJPaletteConversion),
	    this.fromTypedArray(this.BGCHRBank1),
	    this.fromTypedArray(this.BGCHRBank2),
	    this.haltPostClocks,
	    this.interruptsRequested,
	    this.interruptsEnabled,
	    this.remainingClocks,
	    this.colorizedGBPalettes,
	    this.backgroundY,
	    this.backgroundX,
	    this.CPUStopped,
	    this.audioClocksUntilNextEvent,
	    this.audioClocksUntilNextEventCounter
	  ];
	};
	GameBoyCore.prototype.returnFromState = function (returnedFrom) {
	  var index = 0;
	  var state = returnedFrom.slice(0);
	  this.ROM = this.toTypedArray(state[index++], "uint8");
	  this.ROMBankEdge = Math.floor(this.ROM.length / 0x4000);
	  this.inBootstrap = state[index++];
	  this.registerA = state[index++];
	  this.FZero = state[index++];
	  this.FSubtract = state[index++];
	  this.FHalfCarry = state[index++];
	  this.FCarry = state[index++];
	  this.registerB = state[index++];
	  this.registerC = state[index++];
	  this.registerD = state[index++];
	  this.registerE = state[index++];
	  this.registersHL = state[index++];
	  this.stackPointer = state[index++];
	  this.programCounter = state[index++];
	  this.halt = state[index++];
	  this.IME = state[index++];
	  this.hdmaRunning = state[index++];
	  this.CPUTicks = state[index++];
	  this.doubleSpeedShifter = state[index++];
	  this.memory = this.toTypedArray(state[index++], "uint8");
	  this.MBCRam = this.toTypedArray(state[index++], "uint8");
	  this.VRAM = this.toTypedArray(state[index++], "uint8");
	  this.currVRAMBank = state[index++];
	  this.GBCMemory = this.toTypedArray(state[index++], "uint8");
	  this.MBC1Mode = state[index++];
	  this.MBCRAMBanksEnabled = state[index++];
	  this.currMBCRAMBank = state[index++];
	  this.currMBCRAMBankPosition = state[index++];
	  this.cGBC = state[index++];
	  this.gbcRamBank = state[index++];
	  this.gbcRamBankPosition = state[index++];
	  this.ROMBank1offs = state[index++];
	  this.currentROMBank = state[index++];
	  this.cartridgeType = state[index++];
	  this.name = state[index++];
	  this.gameCode = state[index++];
	  this.modeSTAT = state[index++];
	  this.LYCMatchTriggerSTAT = state[index++];
	  this.mode2TriggerSTAT = state[index++];
	  this.mode1TriggerSTAT = state[index++];
	  this.mode0TriggerSTAT = state[index++];
	  this.LCDisOn = state[index++];
	  this.gfxWindowCHRBankPosition = state[index++];
	  this.gfxWindowDisplay = state[index++];
	  this.gfxSpriteShow = state[index++];
	  this.gfxSpriteNormalHeight = state[index++];
	  this.gfxBackgroundCHRBankPosition = state[index++];
	  this.gfxBackgroundBankOffset = state[index++];
	  this.TIMAEnabled = state[index++];
	  this.DIVTicks = state[index++];
	  this.LCDTicks = state[index++];
	  this.timerTicks = state[index++];
	  this.TACClocker = state[index++];
	  this.serialTimer = state[index++];
	  this.serialShiftTimer = state[index++];
	  this.serialShiftTimerAllocated = state[index++];
	  this.IRQEnableDelay = state[index++];
	  this.lastIteration = state[index++];
	  this.cMBC1 = state[index++];
	  this.cMBC2 = state[index++];
	  this.cMBC3 = state[index++];
	  this.cMBC5 = state[index++];
	  this.cMBC7 = state[index++];
	  this.cSRAM = state[index++];
	  this.cMMMO1 = state[index++];
	  this.cRUMBLE = state[index++];
	  this.cCamera = state[index++];
	  this.cTAMA5 = state[index++];
	  this.cHuC3 = state[index++];
	  this.cHuC1 = state[index++];
	  this.drewBlank = state[index++];
	  this.frameBuffer = this.toTypedArray(state[index++], "int32");
	  this.bgEnabled = state[index++];
	  this.BGPriorityEnabled = state[index++];
	  this.channel1FrequencyTracker = state[index++];
	  this.channel1FrequencyCounter = state[index++];
	  this.channel1totalLength = state[index++];
	  this.channel1envelopeVolume = state[index++];
	  this.channel1envelopeType = state[index++];
	  this.channel1envelopeSweeps = state[index++];
	  this.channel1envelopeSweepsLast = state[index++];
	  this.channel1consecutive = state[index++];
	  this.channel1frequency = state[index++];
	  this.channel1SweepFault = state[index++];
	  this.channel1ShadowFrequency = state[index++];
	  this.channel1timeSweep = state[index++];
	  this.channel1lastTimeSweep = state[index++];
	  this.channel1Swept = state[index++];
	  this.channel1frequencySweepDivider = state[index++];
	  this.channel1decreaseSweep = state[index++];
	  this.channel2FrequencyTracker = state[index++];
	  this.channel2FrequencyCounter = state[index++];
	  this.channel2totalLength = state[index++];
	  this.channel2envelopeVolume = state[index++];
	  this.channel2envelopeType = state[index++];
	  this.channel2envelopeSweeps = state[index++];
	  this.channel2envelopeSweepsLast = state[index++];
	  this.channel2consecutive = state[index++];
	  this.channel2frequency = state[index++];
	  this.channel3canPlay = state[index++];
	  this.channel3totalLength = state[index++];
	  this.channel3patternType = state[index++];
	  this.channel3frequency = state[index++];
	  this.channel3consecutive = state[index++];
	  this.channel3PCM = this.toTypedArray(state[index++], "int8");
	  this.channel4FrequencyPeriod = state[index++];
	  this.channel4lastSampleLookup = state[index++];
	  this.channel4totalLength = state[index++];
	  this.channel4envelopeVolume = state[index++];
	  this.channel4currentVolume = state[index++];
	  this.channel4envelopeType = state[index++];
	  this.channel4envelopeSweeps = state[index++];
	  this.channel4envelopeSweepsLast = state[index++];
	  this.channel4consecutive = state[index++];
	  this.channel4BitRange = state[index++];
	  this.soundMasterEnabled = state[index++];
	  this.VinLeftChannelMasterVolume = state[index++];
	  this.VinRightChannelMasterVolume = state[index++];
	  this.leftChannel1 = state[index++];
	  this.leftChannel2 = state[index++];
	  this.leftChannel3 = state[index++];
	  this.leftChannel4 = state[index++];
	  this.rightChannel1 = state[index++];
	  this.rightChannel2 = state[index++];
	  this.rightChannel3 = state[index++];
	  this.rightChannel4 = state[index++];
	  this.channel1currentSampleLeft = state[index++];
	  this.channel1currentSampleRight = state[index++];
	  this.channel2currentSampleLeft = state[index++];
	  this.channel2currentSampleRight = state[index++];
	  this.channel3currentSampleLeft = state[index++];
	  this.channel3currentSampleRight = state[index++];
	  this.channel4currentSampleLeft = state[index++];
	  this.channel4currentSampleRight = state[index++];
	  this.channel1currentSampleLeftSecondary = state[index++];
	  this.channel1currentSampleRightSecondary = state[index++];
	  this.channel2currentSampleLeftSecondary = state[index++];
	  this.channel2currentSampleRightSecondary = state[index++];
	  this.channel3currentSampleLeftSecondary = state[index++];
	  this.channel3currentSampleRightSecondary = state[index++];
	  this.channel4currentSampleLeftSecondary = state[index++];
	  this.channel4currentSampleRightSecondary = state[index++];
	  this.channel1currentSampleLeftTrimary = state[index++];
	  this.channel1currentSampleRightTrimary = state[index++];
	  this.channel2currentSampleLeftTrimary = state[index++];
	  this.channel2currentSampleRightTrimary = state[index++];
	  this.mixerOutputCache = state[index++];
	  this.channel1DutyTracker = state[index++];
	  this.channel1CachedDuty = state[index++];
	  this.channel2DutyTracker = state[index++];
	  this.channel2CachedDuty = state[index++];
	  this.channel1Enabled = state[index++];
	  this.channel2Enabled = state[index++];
	  this.channel3Enabled = state[index++];
	  this.channel4Enabled = state[index++];
	  this.sequencerClocks = state[index++];
	  this.sequencePosition = state[index++];
	  this.channel3Counter = state[index++];
	  this.channel4Counter = state[index++];
	  this.cachedChannel3Sample = state[index++];
	  this.cachedChannel4Sample = state[index++];
	  this.channel3FrequencyPeriod = state[index++];
	  this.channel3lastSampleLookup = state[index++];
	  this.actualScanLine = state[index++];
	  this.lastUnrenderedLine = state[index++];
	  this.queuedScanLines = state[index++];
	  this.RTCisLatched = state[index++];
	  this.latchedSeconds = state[index++];
	  this.latchedMinutes = state[index++];
	  this.latchedHours = state[index++];
	  this.latchedLDays = state[index++];
	  this.latchedHDays = state[index++];
	  this.RTCSeconds = state[index++];
	  this.RTCMinutes = state[index++];
	  this.RTCHours = state[index++];
	  this.RTCDays = state[index++];
	  this.RTCDayOverFlow = state[index++];
	  this.RTCHALT = state[index++];
	  this.usedBootROM = state[index++];
	  this.skipPCIncrement = state[index++];
	  this.STATTracker = state[index++];
	  this.gbcRamBankPositionECHO = state[index++];
	  this.numRAMBanks = state[index++];
	  this.windowY = state[index++];
	  this.windowX = state[index++];
	  this.gbcOBJRawPalette = this.toTypedArray(state[index++], "uint8");
	  this.gbcBGRawPalette = this.toTypedArray(state[index++], "uint8");
	  this.gbOBJPalette = this.toTypedArray(state[index++], "int32");
	  this.gbBGPalette = this.toTypedArray(state[index++], "int32");
	  this.gbcOBJPalette = this.toTypedArray(state[index++], "int32");
	  this.gbcBGPalette = this.toTypedArray(state[index++], "int32");
	  this.gbBGColorizedPalette = this.toTypedArray(state[index++], "int32");
	  this.gbOBJColorizedPalette = this.toTypedArray(state[index++], "int32");
	  this.cachedBGPaletteConversion = this.toTypedArray(state[index++], "int32");
	  this.cachedOBJPaletteConversion = this.toTypedArray(state[index++], "int32");
	  this.BGCHRBank1 = this.toTypedArray(state[index++], "uint8");
	  this.BGCHRBank2 = this.toTypedArray(state[index++], "uint8");
	  this.haltPostClocks = state[index++];
	  this.interruptsRequested = state[index++];
	  this.interruptsEnabled = state[index++];
	  this.checkIRQMatching();
	  this.remainingClocks = state[index++];
	  this.colorizedGBPalettes = state[index++];
	  this.backgroundY = state[index++];
	  this.backgroundX = state[index++];
	  this.CPUStopped = state[index++];
	  this.audioClocksUntilNextEvent = state[index++];
	  this.audioClocksUntilNextEventCounter = state[index];
	  this.fromSaveState = true;
	  this.TICKTable = this.toTypedArray(this.TICKTable, "uint8");
	  this.SecondaryTICKTable = this.toTypedArray(this.SecondaryTICKTable, "uint8");
	  this.initializeReferencesFromSaveState();
	  this.memoryReadJumpCompile();
	  this.memoryWriteJumpCompile();
	  this.initLCD();
	  this.initSound();
	  this.noiseSampleTable = (this.channel4BitRange == 0x7FFF) ? this.LSFR15Table : this.LSFR7Table;
	  this.channel4VolumeShifter = (this.channel4BitRange == 0x7FFF) ? 15 : 7;
	};
	GameBoyCore.prototype.returnFromRTCState = function () {
	  if (typeof this.openRTC == "function" && this.cTIMER) {
	    var rtcData = this.openRTC(this.name);
	    var index = 0;
	    this.lastIteration = rtcData[index++];
	    this.RTCisLatched = rtcData[index++];
	    this.latchedSeconds = rtcData[index++];
	    this.latchedMinutes = rtcData[index++];
	    this.latchedHours = rtcData[index++];
	    this.latchedLDays = rtcData[index++];
	    this.latchedHDays = rtcData[index++];
	    this.RTCSeconds = rtcData[index++];
	    this.RTCMinutes = rtcData[index++];
	    this.RTCHours = rtcData[index++];
	    this.RTCDays = rtcData[index++];
	    this.RTCDayOverFlow = rtcData[index++];
	    this.RTCHALT = rtcData[index];
	  }
	};
	GameBoyCore.prototype.start = function () {
	  this.initMemory();  //Write the startup memory.
	  this.ROMLoad();   //Load the ROM into memory and get cartridge information from it.
	  this.initLCD();   //Initialize the graphics.
	  this.initSound(); //Sound object initialization.
	  this.run();     //Start the emulation.
	};
	GameBoyCore.prototype.initMemory = function () {
	  //Initialize the RAM:
	  this.memory = this.getTypedArray(0x10000, 0, "uint8");
	  this.frameBuffer = this.getTypedArray(23040, 0xF8F8F8, "int32");
	  this.BGCHRBank1 = this.getTypedArray(0x800, 0, "uint8");
	  this.TICKTable = this.toTypedArray(this.TICKTable, "uint8");
	  this.SecondaryTICKTable = this.toTypedArray(this.SecondaryTICKTable, "uint8");
	  this.channel3PCM = this.getTypedArray(0x20, 0, "int8");
	};
	GameBoyCore.prototype.generateCacheArray = function (tileAmount) {
	  var tileArray = [];
	  var tileNumber = 0;
	  while (tileNumber < tileAmount) {
	    tileArray[tileNumber++] = this.getTypedArray(64, 0, "uint8");
	  }
	  return tileArray;
	};
	GameBoyCore.prototype.initSkipBootstrap = function () {
	  //Fill in the boot ROM set register values
	  //Default values to the GB boot ROM values, then fill in the GBC boot ROM values after ROM loading
	  var index = 0xFF;
	  while (index >= 0) {
	    if (index >= 0x30 && index < 0x40) {
	      this.memoryWrite(0xFF00 | index, this.ffxxDump[index]);
	    }
	    else {
	      switch (index) {
	        case 0x00:
	        case 0x01:
	        case 0x02:
	        case 0x05:
	        case 0x07:
	        case 0x0F:
	        case 0xFF:
	          this.memoryWrite(0xFF00 | index, this.ffxxDump[index]);
	          break;
	        default:
	          this.memory[0xFF00 | index] = this.ffxxDump[index];
	      }
	    }
	    --index;
	  }
	  if (this.cGBC) {
	    this.memory[0xFF6C] = 0xFE;
	    this.memory[0xFF74] = 0xFE;
	  }
	  else {
	    this.memory[0xFF48] = 0xFF;
	    this.memory[0xFF49] = 0xFF;
	    this.memory[0xFF6C] = 0xFF;
	    this.memory[0xFF74] = 0xFF;
	  }
	  //Start as an unset device:
	  debug("Starting without the GBC boot ROM.", 0);
	  this.registerA = (this.cGBC) ? 0x11 : 0x1;
	  this.registerB = 0;
	  this.registerC = 0x13;
	  this.registerD = 0;
	  this.registerE = 0xD8;
	  this.FZero = true;
	  this.FSubtract = false;
	  this.FHalfCarry = true;
	  this.FCarry = true;
	  this.registersHL = 0x014D;
	  this.LCDCONTROL = this.LINECONTROL;
	  this.IME = false;
	  this.IRQLineMatched = 0;
	  this.interruptsRequested = 225;
	  this.interruptsEnabled = 0;
	  this.hdmaRunning = false;
	  this.CPUTicks = 12;
	  this.STATTracker = 0;
	  this.modeSTAT = 1;
	  this.spriteCount = 252;
	  this.LYCMatchTriggerSTAT = false;
	  this.mode2TriggerSTAT = false;
	  this.mode1TriggerSTAT = false;
	  this.mode0TriggerSTAT = false;
	  this.LCDisOn = true;
	  this.channel1FrequencyTracker = 0x2000;
	  this.channel1DutyTracker = 0;
	  this.channel1CachedDuty = this.dutyLookup[2];
	  this.channel1totalLength = 0;
	  this.channel1envelopeVolume = 0;
	  this.channel1envelopeType = false;
	  this.channel1envelopeSweeps = 0;
	  this.channel1envelopeSweepsLast = 0;
	  this.channel1consecutive = true;
	  this.channel1frequency = 1985;
	  this.channel1SweepFault = true;
	  this.channel1ShadowFrequency = 1985;
	  this.channel1timeSweep = 1;
	  this.channel1lastTimeSweep = 0;
	  this.channel1Swept = false;
	  this.channel1frequencySweepDivider = 0;
	  this.channel1decreaseSweep = false;
	  this.channel2FrequencyTracker = 0x2000;
	  this.channel2DutyTracker = 0;
	  this.channel2CachedDuty = this.dutyLookup[2];
	  this.channel2totalLength = 0;
	  this.channel2envelopeVolume = 0;
	  this.channel2envelopeType = false;
	  this.channel2envelopeSweeps = 0;
	  this.channel2envelopeSweepsLast = 0;
	  this.channel2consecutive = true;
	  this.channel2frequency = 0;
	  this.channel3canPlay = false;
	  this.channel3totalLength = 0;
	  this.channel3patternType = 4;
	  this.channel3frequency = 0;
	  this.channel3consecutive = true;
	  this.channel3Counter = 0x418;
	  this.channel4FrequencyPeriod = 8;
	  this.channel4totalLength = 0;
	  this.channel4envelopeVolume = 0;
	  this.channel4currentVolume = 0;
	  this.channel4envelopeType = false;
	  this.channel4envelopeSweeps = 0;
	  this.channel4envelopeSweepsLast = 0;
	  this.channel4consecutive = true;
	  this.channel4BitRange = 0x7FFF;
	  this.channel4VolumeShifter = 15;
	  this.channel1FrequencyCounter = 0x200;
	  this.channel2FrequencyCounter = 0x200;
	  this.channel3Counter = 0x800;
	  this.channel3FrequencyPeriod = 0x800;
	  this.channel3lastSampleLookup = 0;
	  this.channel4lastSampleLookup = 0;
	  this.VinLeftChannelMasterVolume = 8;
	  this.VinRightChannelMasterVolume = 8;
	  this.soundMasterEnabled = true;
	  this.leftChannel1 = true;
	  this.leftChannel2 = true;
	  this.leftChannel3 = true;
	  this.leftChannel4 = true;
	  this.rightChannel1 = true;
	  this.rightChannel2 = true;
	  this.rightChannel3 = false;
	  this.rightChannel4 = false;
	  this.DIVTicks = 27044;
	  this.LCDTicks = 160;
	  this.timerTicks = 0;
	  this.TIMAEnabled = false;
	  this.TACClocker = 1024;
	  this.serialTimer = 0;
	  this.serialShiftTimer = 0;
	  this.serialShiftTimerAllocated = 0;
	  this.IRQEnableDelay = 0;
	  this.actualScanLine = 144;
	  this.lastUnrenderedLine = 0;
	  this.gfxWindowDisplay = false;
	  this.gfxSpriteShow = false;
	  this.gfxSpriteNormalHeight = true;
	  this.bgEnabled = true;
	  this.BGPriorityEnabled = true;
	  this.gfxWindowCHRBankPosition = 0;
	  this.gfxBackgroundCHRBankPosition = 0;
	  this.gfxBackgroundBankOffset = 0;
	  this.windowY = 0;
	  this.windowX = 0;
	  this.drewBlank = 0;
	  this.midScanlineOffset = -1;
	  this.currentX = 0;
	};
	GameBoyCore.prototype.initBootstrap = function () {
	  //Start as an unset device:
	  debug("Starting the selected boot ROM.", 0);
	  this.programCounter = 0;
	  this.stackPointer = 0;
	  this.IME = false;
	  this.LCDTicks = 0;
	  this.DIVTicks = 0;
	  this.registerA = 0;
	  this.registerB = 0;
	  this.registerC = 0;
	  this.registerD = 0;
	  this.registerE = 0;
	  this.FZero = this.FSubtract = this.FHalfCarry = this.FCarry = false;
	  this.registersHL = 0;
	  this.leftChannel1 = false;
	  this.leftChannel2 = false;
	  this.leftChannel3 = false;
	  this.leftChannel4 = false;
	  this.rightChannel1 = false;
	  this.rightChannel2 = false;
	  this.rightChannel3 = false;
	  this.rightChannel4 = false;
	  this.channel2frequency = this.channel1frequency = 0;
	  this.channel4consecutive = this.channel2consecutive = this.channel1consecutive = false;
	  this.VinLeftChannelMasterVolume = 8;
	  this.VinRightChannelMasterVolume = 8;
	  this.memory[0xFF00] = 0xF;  //Set the joypad state.
	};
	GameBoyCore.prototype.ROMLoad = function () {
	  //Load the first two ROM banks (0x0000 - 0x7FFF) into regular gameboy memory:
	  this.ROM = [];
	  this.usedBootROM = this.opts.bootRom && ((!this.opts.gbBootRom && this.GBCBOOTROM.length == 0x800) || (this.opts.gbBootRom && this.GBBOOTROM.length == 0x100));
	  var maxLength = this.ROMImage.length;
	  if (maxLength < 0x4000) {
	    throw(new Error("ROM image size too small."));
	  }
	  this.ROM = this.getTypedArray(maxLength, 0, "uint8");
	  var romIndex = 0;
	  if (this.usedBootROM) {
	    if (!this.opts.gbBootRom) {
	      //Patch in the GBC boot ROM into the memory map:
	      if (this.ROMImageIsString) {
	        for (; romIndex < 0x100; ++romIndex) {
	          this.memory[romIndex] = this.GBCBOOTROM[romIndex];                      //Load in the GameBoy Color BOOT ROM.
	          this.ROM[romIndex] = (this.ROMImage.charCodeAt(romIndex) & 0xFF);             //Decode the ROM binary for the switch out.
	        }
	        for (; romIndex < 0x200; ++romIndex) {
	          this.memory[romIndex] = this.ROM[romIndex] = (this.ROMImage.charCodeAt(romIndex) & 0xFF); //Load in the game ROM.
	        }
	        for (; romIndex < 0x900; ++romIndex) {
	          this.memory[romIndex] = this.GBCBOOTROM[romIndex - 0x100];                  //Load in the GameBoy Color BOOT ROM.
	          this.ROM[romIndex] = (this.ROMImage.charCodeAt(romIndex) & 0xFF);             //Decode the ROM binary for the switch out.
	        }
	      } else {
	        for (; romIndex < 0x100; ++romIndex) {
	          this.memory[romIndex] = this.GBCBOOTROM[romIndex];                      //Load in the GameBoy Color BOOT ROM.
	          this.ROM[romIndex] = this.ROMImage[romIndex];             //Decode the ROM binary for the switch out.
	        }
	        for (; romIndex < 0x200; ++romIndex) {
	          this.memory[romIndex] = this.ROM[romIndex] = this.ROMImage[romIndex]; //Load in the game ROM.
	        }
	        for (; romIndex < 0x900; ++romIndex) {
	          this.memory[romIndex] = this.GBCBOOTROM[romIndex - 0x100];                  //Load in the GameBoy Color BOOT ROM.
	          this.ROM[romIndex] = this.ROMImage[romIndex];             //Decode the ROM binary for the switch out.
	        }
	      }
	
	      this.usedGBCBootROM = true;
	    }
	    else {
	      if (this.ROMImageIsString) {
	        //Patch in the GBC boot ROM into the memory map:
	        for (; romIndex < 0x100; ++romIndex) {
	          this.memory[romIndex] = this.GBBOOTROM[romIndex];                     //Load in the GameBoy Color BOOT ROM.
	          this.ROM[romIndex] = (this.ROMImage.charCodeAt(romIndex) & 0xFF);             //Decode the ROM binary for the switch out.
	        }
	      } else {
	        //Patch in the GBC boot ROM into the memory map:
	        for (; romIndex < 0x100; ++romIndex) {
	          this.memory[romIndex] = this.GBBOOTROM[romIndex];                     //Load in the GameBoy Color BOOT ROM.
	          this.ROM[romIndex] = this.ROMImage.romIndex;             //Decode the ROM binary for the switch out.
	        }
	      }
	    }
	    if (this.ROMImageIsString) {
	      for (; romIndex < 0x4000; ++romIndex) {
	        this.memory[romIndex] = this.ROM[romIndex] = (this.ROMImage.charCodeAt(romIndex) & 0xFF); //Load in the game ROM.
	      }
	    } else {
	      for (; romIndex < 0x4000; ++romIndex) {
	        this.memory[romIndex] = this.ROM[romIndex] = this.ROMImage[romIndex]; //Load in the game ROM.
	      }
	    }
	  }
	  else {
	    if (this.ROMImageIsString) {
	      //Don't load in the boot ROM:
	      for (; romIndex < 0x4000; ++romIndex) {
	        this.memory[romIndex] = this.ROM[romIndex] = (this.ROMImage.charCodeAt(romIndex) & 0xFF); //Load in the game ROM.
	      }
	    } else {
	      //Don't load in the boot ROM:
	      for (; romIndex < 0x4000; ++romIndex) {
	        this.memory[romIndex] = this.ROM[romIndex] = this.ROMImage[romIndex]; //Load in the game ROM.
	      }
	    }
	  }
	  //Finish the decoding of the ROM binary:
	  if (this.ROMImageIsString) {
	    for (; romIndex < maxLength; ++romIndex) {
	      this.ROM[romIndex] = this.ROMImage.charCodeAt(romIndex) & 0xFF;
	    }
	  } else {
	    for (; romIndex < maxLength; ++romIndex) {
	      this.ROM[romIndex] = this.ROMImage[romIndex];
	    }
	  }
	  this.ROMBankEdge = Math.floor(this.ROM.length / 0x4000);
	  //Set up the emulator for the cartidge specifics:
	  this.interpretCartridge();
	  //Check for IRQ matching upon initialization:
	  this.checkIRQMatching();
	};
	GameBoyCore.prototype.getROMImage = function () {
	  //Return the binary version of the ROM image currently running:
	  if (this.ROMImage.length > 0) {
	    return this.ROMImage.length;
	  }
	  var length = this.ROM.length;
	  for (var index = 0; index < length; index++) {
	    this.ROMImage += String.fromCharCode(this.ROM[index]);
	  }
	  return this.ROMImage;
	};
	GameBoyCore.prototype.interpretCartridge = function () {
	  var extra;
	
	  if (this.ROMImageIsString) {
	    // ROM name
	    for (var index = 0x134; index < 0x13F; index++) {
	      if (this.ROMImage[index] > 0) {
	        this.name += this.ROMImage[index];
	      }
	    }
	    // ROM game code (for newer games)
	    for (var index = 0x13F; index < 0x143; index++) {
	      if (this.ROMImage[index] > 0) {
	        this.gameCode += this.ROMImage[index];
	      }
	    }
	
	    extra = this.ROMImage[0x143];
	  } else {
	    // ROM name
	    for (var index = 0x134; index < 0x13F; index++) {
	      if (this.ROMImage[index] > 0) {
	        this.name += String.fromCharCode(this.ROMImage[index]);
	      }
	    }
	    // ROM game code (for newer games)
	    for (var index = 0x13F; index < 0x143; index++) {
	      if (this.ROMImage[index] > 0) {
	        this.gameCode += String.fromCharCode(this.ROMImage[index]);
	      }
	    }
	    
	    extra = String.fromCharCode(this.ROMImage[0x143]);
	  }
	
	  debug("Game Title: " + this.name + "[" + this.gameCode + "][" + extra + "]", 0);
	  debug("Game Code: " + this.gameCode, 0);
	  // Cartridge type
	  this.cartridgeType = this.ROM[0x147];
	  debug("Cartridge type #" + this.cartridgeType, 0);
	  //Map out ROM cartridge sub-types.
	  var MBCType = "";
	  switch (this.cartridgeType) {
	    case 0x00:
	      //ROM w/o bank switching
	      if (!this.opts.mbc1) {
	        MBCType = "ROM";
	        break;
	      }
	    case 0x01:
	      this.cMBC1 = true;
	      MBCType = "MBC1";
	      break;
	    case 0x02:
	      this.cMBC1 = true;
	      this.cSRAM = true;
	      MBCType = "MBC1 + SRAM";
	      break;
	    case 0x03:
	      this.cMBC1 = true;
	      this.cSRAM = true;
	      this.cBATT = true;
	      MBCType = "MBC1 + SRAM + BATT";
	      break;
	    case 0x05:
	      this.cMBC2 = true;
	      MBCType = "MBC2";
	      break;
	    case 0x06:
	      this.cMBC2 = true;
	      this.cBATT = true;
	      MBCType = "MBC2 + BATT";
	      break;
	    case 0x08:
	      this.cSRAM = true;
	      MBCType = "ROM + SRAM";
	      break;
	    case 0x09:
	      this.cSRAM = true;
	      this.cBATT = true;
	      MBCType = "ROM + SRAM + BATT";
	      break;
	    case 0x0B:
	      this.cMMMO1 = true;
	      MBCType = "MMMO1";
	      break;
	    case 0x0C:
	      this.cMMMO1 = true;
	      this.cSRAM = true;
	      MBCType = "MMMO1 + SRAM";
	      break;
	    case 0x0D:
	      this.cMMMO1 = true;
	      this.cSRAM = true;
	      this.cBATT = true;
	      MBCType = "MMMO1 + SRAM + BATT";
	      break;
	    case 0x0F:
	      this.cMBC3 = true;
	      this.cTIMER = true;
	      this.cBATT = true;
	      MBCType = "MBC3 + TIMER + BATT";
	      break;
	    case 0x10:
	      this.cMBC3 = true;
	      this.cTIMER = true;
	      this.cBATT = true;
	      this.cSRAM = true;
	      MBCType = "MBC3 + TIMER + BATT + SRAM";
	      break;
	    case 0x11:
	      this.cMBC3 = true;
	      MBCType = "MBC3";
	      break;
	    case 0x12:
	      this.cMBC3 = true;
	      this.cSRAM = true;
	      MBCType = "MBC3 + SRAM";
	      break;
	    case 0x13:
	      this.cMBC3 = true;
	      this.cSRAM = true;
	      this.cBATT = true;
	      MBCType = "MBC3 + SRAM + BATT";
	      break;
	    case 0x19:
	      this.cMBC5 = true;
	      MBCType = "MBC5";
	      break;
	    case 0x1A:
	      this.cMBC5 = true;
	      this.cSRAM = true;
	      MBCType = "MBC5 + SRAM";
	      break;
	    case 0x1B:
	      this.cMBC5 = true;
	      this.cSRAM = true;
	      this.cBATT = true;
	      MBCType = "MBC5 + SRAM + BATT";
	      break;
	    case 0x1C:
	      this.cRUMBLE = true;
	      MBCType = "RUMBLE";
	      break;
	    case 0x1D:
	      this.cRUMBLE = true;
	      this.cSRAM = true;
	      MBCType = "RUMBLE + SRAM";
	      break;
	    case 0x1E:
	      this.cRUMBLE = true;
	      this.cSRAM = true;
	      this.cBATT = true;
	      MBCType = "RUMBLE + SRAM + BATT";
	      break;
	    case 0x1F:
	      this.cCamera = true;
	      MBCType = "GameBoy Camera";
	      break;
	    case 0x22:
	      this.cMBC7 = true;
	      this.cSRAM = true;
	      this.cBATT = true;
	      MBCType = "MBC7 + SRAM + BATT";
	      break;
	    case 0xFD:
	      this.cTAMA5 = true;
	      MBCType = "TAMA5";
	      break;
	    case 0xFE:
	      this.cHuC3 = true;
	      MBCType = "HuC3";
	      break;
	    case 0xFF:
	      this.cHuC1 = true;
	      MBCType = "HuC1";
	      break;
	    default:
	      MBCType = "Unknown";
	      this.emit('error', new Error("Cartridge type is unknown."));
	  }
	  debug("Cartridge Type: " + MBCType + ".", 0);
	  // ROM and RAM banks
	  this.numROMBanks = this.ROMBanks[this.ROM[0x148]];
	  debug(this.numROMBanks + " ROM banks.", 0);
	  switch (this.RAMBanks[this.ROM[0x149]]) {
	    case 0:
	      debug("No RAM banking requested for allocation or MBC is of type 2.", 0);
	      break;
	    case 2:
	      debug("1 RAM bank requested for allocation.", 0);
	      break;
	    case 3:
	      debug("4 RAM banks requested for allocation.", 0);
	      break;
	    case 4:
	      debug("16 RAM banks requested for allocation.", 0);
	      break;
	    default:
	      debug("RAM bank amount requested is unknown, will use maximum allowed by specified MBC type.", 0);
	  }
	  //Check the GB/GBC mode byte:
	  if (!this.usedBootROM) {
	    switch (this.ROM[0x143]) {
	      case 0x00:  //Only GB mode
	        this.cGBC = false;
	        debug("Only GB mode detected.", 0);
	        break;
	      case 0x32:  //Exception to the GBC identifying code:
	        if (!this.opts.prioritizeGb && this.name + this.gameCode + this.ROM[0x143] == "Game and Watch 50") {
	          this.cGBC = true;
	          debug("Created a boot exception for Game and Watch Gallery 2 (GBC ID byte is wrong on the cartridge).", 1);
	        }
	        else {
	          this.cGBC = false;
	        }
	        break;
	      case 0x80:  //Both GB + GBC modes
	        this.cGBC = !this.opts.prioritizeGb;
	        debug("GB and GBC mode detected.", 0);
	        break;
	      case 0xC0:  //Only GBC mode
	        this.cGBC = true;
	        debug("Only GBC mode detected.", 0);
	        break;
	      default:
	        this.cGBC = false;
	        debug("Unknown GameBoy game type code #" + this.ROM[0x143] + ", defaulting to GB mode (Old games don't have a type code).", 1);
	    }
	    this.inBootstrap = false;
	    this.setupRAM();  //CPU/(V)RAM initialization.
	    this.initSkipBootstrap();
	  }
	  else {
	    this.cGBC = this.usedGBCBootROM;  //Allow the GBC boot ROM to run in GBC mode...
	    this.setupRAM();  //CPU/(V)RAM initialization.
	    this.initBootstrap();
	  }
	  this.initializeModeSpecificArrays();
	  //License Code Lookup:
	  var cOldLicense = this.ROM[0x14B];
	  var cNewLicense = (this.ROM[0x144] & 0xFF00) | (this.ROM[0x145] & 0xFF);
	  if (cOldLicense != 0x33) {
	    //Old Style License Header
	    debug("Old style license code: " + cOldLicense, 0);
	  }
	  else {
	    //New Style License Header
	    debug("New style license code: " + cNewLicense, 0);
	  }
	  this.ROMImage = ""; //Memory consumption reduction.
	};
	GameBoyCore.prototype.disableBootROM = function () {
	  //Remove any traces of the boot ROM from ROM memory.
	  for (var index = 0; index < 0x100; ++index) {
	    this.memory[index] = this.ROM[index]; //Replace the GameBoy or GameBoy Color boot ROM with the game ROM.
	  }
	  if (this.usedGBCBootROM) {
	    //Remove any traces of the boot ROM from ROM memory.
	    for (index = 0x200; index < 0x900; ++index) {
	      this.memory[index] = this.ROM[index]; //Replace the GameBoy Color boot ROM with the game ROM.
	    }
	    if (!this.cGBC) {
	      //Clean up the post-boot (GB mode only) state:
	      this.GBCtoGBModeAdjust();
	    }
	    else {
	      this.recompileBootIOWriteHandling();
	    }
	  }
	  else {
	    this.recompileBootIOWriteHandling();
	  }
	};
	GameBoyCore.prototype.initializeTiming = function () {
	  //Emulator Timing:
	  this.clocksPerSecond = this.emulatorSpeed * 0x400000;
	  this.baseCPUCyclesPerIteration = this.clocksPerSecond / 1000 * this.opts.interval;
	  this.CPUCyclesTotalRoundoff = this.baseCPUCyclesPerIteration % 4;
	  this.CPUCyclesTotalBase = this.CPUCyclesTotal = (this.baseCPUCyclesPerIteration - this.CPUCyclesTotalRoundoff) | 0;
	  this.CPUCyclesTotalCurrent = 0;
	};
	GameBoyCore.prototype.setSpeed = function (speed) {
	  this.emulatorSpeed = speed;
	  this.initializeTiming();
	  if (this.audioHandle) {
	    this.initSound();
	  }
	};
	GameBoyCore.prototype.setupRAM = function () {
	  //Setup the auxilliary/switchable RAM:
	  if (this.cMBC2) {
	    this.numRAMBanks = 1 / 16;
	  }
	  else if (this.cMBC1 || this.cRUMBLE || this.cMBC3 || this.cHuC3) {
	    this.numRAMBanks = 4;
	  }
	  else if (this.cMBC5) {
	    this.numRAMBanks = 16;
	  }
	  else if (this.cSRAM) {
	    this.numRAMBanks = 1;
	  }
	  if (this.numRAMBanks > 0) {
	    if (!this.MBCRAMUtilized()) {
	      //For ROM and unknown MBC cartridges using the external RAM:
	      this.MBCRAMBanksEnabled = true;
	    }
	    //Switched RAM Used
	    var MBCRam = (typeof this.openMBC == "function") ? this.openMBC(this.name) : [];
	    if (MBCRam.length > 0) {
	      //Flash the SRAM into memory:
	      this.MBCRam = this.toTypedArray(MBCRam, "uint8");
	    }
	    else {
	      this.MBCRam = this.getTypedArray(this.numRAMBanks * 0x2000, 0, "uint8");
	    }
	  }
	  debug("Actual bytes of MBC RAM allocated: " + (this.numRAMBanks * 0x2000), 0);
	  this.returnFromRTCState();
	  //Setup the RAM for GBC mode.
	  if (this.cGBC) {
	    this.VRAM = this.getTypedArray(0x2000, 0, "uint8");
	    this.GBCMemory = this.getTypedArray(0x7000, 0, "uint8");
	  }
	  this.memoryReadJumpCompile();
	  this.memoryWriteJumpCompile();
	};
	GameBoyCore.prototype.MBCRAMUtilized = function () {
	  return this.cMBC1 || this.cMBC2 || this.cMBC3 || this.cMBC5 || this.cMBC7 || this.cRUMBLE;
	};
	GameBoyCore.prototype.recomputeDimension = function () {
	  //Cache some dimension info:
	  this.onscreenWidth = this.canvas.width;
	  this.onscreenHeight = this.canvas.height;
	  if ('undefined' != typeof window && window.mozRequestAnimationFrame) {
	    //Firefox slowness hack:
	    this.canvas.width = this.onscreenWidth = 160;
	    this.canvas.height = this.onscreenHeight = 144;
	  }
	  else {
	    this.onscreenWidth = this.canvas.width;
	    this.onscreenHeight = this.canvas.height;
	  }
	  this.offscreenWidth = 160;
	  this.offscreenHeight = 144;
	  this.offscreenRGBCount = this.offscreenWidth * this.offscreenHeight * 4;
	};
	GameBoyCore.prototype.initLCD = function () {
	  this.recomputeDimension();
	  this.resizer = null;
	  if ('undefined' != typeof document && document.createElement) {
	    this.canvasOffscreen = document.createElement("canvas");
	    this.canvasOffscreen.width = this.offscreenWidth;
	    this.canvasOffscreen.height = this.offscreenHeight;
	  } else {
	    // ugly hack to avoid different node-canvas versions
	    var ctor = this.canvas.constructor;
	    this.canvasOffscreen = new ctor(this.offscreenWidth, this.offscreenHeight);
	  }
	
	  this.drawContextOffscreen = this.canvasOffscreen.getContext("2d");
	  this.drawContextOnscreen = this.canvas.getContext("2d");
	  if (this.canvas.setAttribute) {
	    this.canvas.setAttribute("style", (this.canvas.getAttribute("style") || "") + "; image-rendering: " + ((this.opts.imageSmoothing) ? "auto" : "-webkit-optimize-contrast") + ";" +
	    "image-rendering: " + ((this.opts.imageSmoothing) ? "optimizeQuality" : "-o-crisp-edges") + ";" +
	    "image-rendering: " + ((this.opts.imageSmoothing) ? "optimizeQuality" : "-moz-crisp-edges") + ";" +
	    "-ms-interpolation-mode: " + ((this.opts.imageSmoothing) ? "bicubic" : "nearest-neighbor") + ";");
	  }
	  this.drawContextOffscreen.webkitImageSmoothingEnabled  = this.opts.imageSmoothing;
	  this.drawContextOffscreen.mozImageSmoothingEnabled = this.opts.imageSmoothing;
	  this.drawContextOnscreen.webkitImageSmoothingEnabled  = this.opts.imageSmoothing;
	  this.drawContextOnscreen.mozImageSmoothingEnabled = this.opts.imageSmoothing;
	  //Get a CanvasPixelArray buffer:
	  try {
	    this.canvasBuffer = this.drawContextOffscreen.createImageData(this.offscreenWidth, this.offscreenHeight);
	  }
	  catch (error) {
	    debug("Falling back to the getImageData initialization (Error \"" + error.message + "\").", 1);
	    this.canvasBuffer = this.drawContextOffscreen.getImageData(0, 0, this.offscreenWidth, this.offscreenHeight);
	  }
	  var index = this.offscreenRGBCount;
	  while (index > 0) {
	    this.canvasBuffer.data[index -= 4] = 0xF8;
	    this.canvasBuffer.data[index + 1] = 0xF8;
	    this.canvasBuffer.data[index + 2] = 0xF8;
	    this.canvasBuffer.data[index + 3] = 0xFF;
	  }
	  this.graphicsBlit();
	  if (this.canvas.style) {
	    this.canvas.style.visibility = "visible";
	  }
	  if (this.swizzledFrame == null) {
	    this.swizzledFrame = this.getTypedArray(69120, 0xFF, "uint8");
	  }
	  //Test the draw system and browser vblank latching:
	  this.drewFrame = true;                    //Copy the latest graphics to buffer.
	  this.requestDraw();
	};
	GameBoyCore.prototype.graphicsBlit = function () {
	  if (this.offscreenWidth == this.onscreenWidth && this.offscreenHeight == this.onscreenHeight) {
	    this.drawContextOnscreen.putImageData(this.canvasBuffer, 0, 0);
	  }
	  else {
	    this.drawContextOffscreen.putImageData(this.canvasBuffer, 0, 0);
	    this.drawContextOnscreen.drawImage(this.canvasOffscreen, 0, 0, this.onscreenWidth, this.onscreenHeight);
	  }
	};
	GameBoyCore.prototype.JoyPadEvent = function (key, down) {
	  if (down) {
	    this.JoyPad &= 0xFF ^ (1 << key);
	    if (!this.cGBC && (!this.usedBootROM || !this.usedGBCBootROM)) {
	      this.interruptsRequested |= 0x10; //A real GBC doesn't set this!
	      this.remainingClocks = 0;
	      this.checkIRQMatching();
	    }
	  }
	  else {
	    this.JoyPad |= (1 << key);
	  }
	  this.memory[0xFF00] = (this.memory[0xFF00] & 0x30) + ((((this.memory[0xFF00] & 0x20) == 0) ? (this.JoyPad >> 4) : 0xF) & (((this.memory[0xFF00] & 0x10) == 0) ? (this.JoyPad & 0xF) : 0xF));
	  this.CPUStopped = false;
	};
	GameBoyCore.prototype.GyroEvent = function (x, y) {
	  x *= -100;
	  x += 2047;
	  this.highX = x >> 8;
	  this.lowX = x & 0xFF;
	  y *= -100;
	  y += 2047;
	  this.highY = y >> 8;
	  this.lowY = y & 0xFF;
	};
	GameBoyCore.prototype.initSound = function () {
	  this.audioResamplerFirstPassFactor = Math.max(Math.min(Math.floor(this.clocksPerSecond / 44100), Math.floor(0xFFFF / 0x1E0)), 1);
	  this.downSampleInputDivider = 1 / (this.audioResamplerFirstPassFactor * 0xF0);
	  if (this.opts.sound) {
	    var self = this;
	    this.audioHandle = new (this.opts.sound)(2, this.clocksPerSecond / this.audioResamplerFirstPassFactor, 0, Math.max(this.baseCPUCyclesPerIteration * this.opts.audioBufferMax / this.audioResamplerFirstPassFactor, 8192) << 1, null, this.opts.volume, function () {
	      self.opts.sound = false;
	    });
	    this.initAudioBuffer();
	  }
	  else if (this.audioHandle) {
	    //Mute the audio output, as it has an immediate silencing effect:
	    this.audioHandle.changeVolume(0);
	  }
	};
	GameBoyCore.prototype.changeVolume = function () {
	  if (this.opts.sound && this.audioHandle) {
	    this.audioHandle.changeVolume(this.opts.volume);
	  }
	};
	GameBoyCore.prototype.initAudioBuffer = function () {
	  this.audioIndex = 0;
	  this.audioDestinationPosition = 0;
	  this.downsampleInput = 0;
	  this.bufferContainAmount = Math.max(this.baseCPUCyclesPerIteration * this.opts.audioBufferMin / this.audioResamplerFirstPassFactor, 4096) << 1;
	  this.numSamplesTotal = (this.baseCPUCyclesPerIteration / this.audioResamplerFirstPassFactor) << 1;
	  this.audioBuffer = this.getTypedArray(this.numSamplesTotal, 0, "float32");
	};
	GameBoyCore.prototype.intializeWhiteNoise = function () {
	  //Noise Sample Tables:
	  var randomFactor = 1;
	  //15-bit LSFR Cache Generation:
	  this.LSFR15Table = this.getTypedArray(0x80000, 0, "int8");
	  var LSFR = 0x7FFF;  //Seed value has all its bits set.
	  var LSFRShifted = 0x3FFF;
	  for (var index = 0; index < 0x8000; ++index) {
	    //Normalize the last LSFR value for usage:
	    randomFactor = 1 - (LSFR & 1);  //Docs say it's the inverse.
	    //Cache the different volume level results:
	    this.LSFR15Table[0x08000 | index] = randomFactor;
	    this.LSFR15Table[0x10000 | index] = randomFactor * 0x2;
	    this.LSFR15Table[0x18000 | index] = randomFactor * 0x3;
	    this.LSFR15Table[0x20000 | index] = randomFactor * 0x4;
	    this.LSFR15Table[0x28000 | index] = randomFactor * 0x5;
	    this.LSFR15Table[0x30000 | index] = randomFactor * 0x6;
	    this.LSFR15Table[0x38000 | index] = randomFactor * 0x7;
	    this.LSFR15Table[0x40000 | index] = randomFactor * 0x8;
	    this.LSFR15Table[0x48000 | index] = randomFactor * 0x9;
	    this.LSFR15Table[0x50000 | index] = randomFactor * 0xA;
	    this.LSFR15Table[0x58000 | index] = randomFactor * 0xB;
	    this.LSFR15Table[0x60000 | index] = randomFactor * 0xC;
	    this.LSFR15Table[0x68000 | index] = randomFactor * 0xD;
	    this.LSFR15Table[0x70000 | index] = randomFactor * 0xE;
	    this.LSFR15Table[0x78000 | index] = randomFactor * 0xF;
	    //Recompute the LSFR algorithm:
	    LSFRShifted = LSFR >> 1;
	    LSFR = LSFRShifted | (((LSFRShifted ^ LSFR) & 0x1) << 14);
	  }
	  //7-bit LSFR Cache Generation:
	  this.LSFR7Table = this.getTypedArray(0x800, 0, "int8");
	  LSFR = 0x7F;  //Seed value has all its bits set.
	  for (index = 0; index < 0x80; ++index) {
	    //Normalize the last LSFR value for usage:
	    randomFactor = 1 - (LSFR & 1);  //Docs say it's the inverse.
	    //Cache the different volume level results:
	    this.LSFR7Table[0x080 | index] = randomFactor;
	    this.LSFR7Table[0x100 | index] = randomFactor * 0x2;
	    this.LSFR7Table[0x180 | index] = randomFactor * 0x3;
	    this.LSFR7Table[0x200 | index] = randomFactor * 0x4;
	    this.LSFR7Table[0x280 | index] = randomFactor * 0x5;
	    this.LSFR7Table[0x300 | index] = randomFactor * 0x6;
	    this.LSFR7Table[0x380 | index] = randomFactor * 0x7;
	    this.LSFR7Table[0x400 | index] = randomFactor * 0x8;
	    this.LSFR7Table[0x480 | index] = randomFactor * 0x9;
	    this.LSFR7Table[0x500 | index] = randomFactor * 0xA;
	    this.LSFR7Table[0x580 | index] = randomFactor * 0xB;
	    this.LSFR7Table[0x600 | index] = randomFactor * 0xC;
	    this.LSFR7Table[0x680 | index] = randomFactor * 0xD;
	    this.LSFR7Table[0x700 | index] = randomFactor * 0xE;
	    this.LSFR7Table[0x780 | index] = randomFactor * 0xF;
	    //Recompute the LSFR algorithm:
	    LSFRShifted = LSFR >> 1;
	    LSFR = LSFRShifted | (((LSFRShifted ^ LSFR) & 0x1) << 6);
	  }
	  //Set the default noise table:
	  this.noiseSampleTable = this.LSFR15Table;
	};
	GameBoyCore.prototype.audioUnderrunAdjustment = function () {
	  if (this.opts.sound) {
	    var underrunAmount = this.audioHandle.remainingBuffer();
	    if (typeof underrunAmount == "number") {
	      underrunAmount = this.bufferContainAmount - Math.max(underrunAmount, 0);
	      if (underrunAmount > 0) {
	        this.recalculateIterationClockLimitForAudio((underrunAmount >> 1) * this.audioResamplerFirstPassFactor);
	      }
	    }
	  }
	};
	GameBoyCore.prototype.initializeAudioStartState = function () {
	  this.channel1FrequencyTracker = 0x2000;
	  this.channel1DutyTracker = 0;
	  this.channel1CachedDuty = this.dutyLookup[2];
	  this.channel1totalLength = 0;
	  this.channel1envelopeVolume = 0;
	  this.channel1envelopeType = false;
	  this.channel1envelopeSweeps = 0;
	  this.channel1envelopeSweepsLast = 0;
	  this.channel1consecutive = true;
	  this.channel1frequency = 0;
	  this.channel1SweepFault = false;
	  this.channel1ShadowFrequency = 0;
	  this.channel1timeSweep = 1;
	  this.channel1lastTimeSweep = 0;
	  this.channel1Swept = false;
	  this.channel1frequencySweepDivider = 0;
	  this.channel1decreaseSweep = false;
	  this.channel2FrequencyTracker = 0x2000;
	  this.channel2DutyTracker = 0;
	  this.channel2CachedDuty = this.dutyLookup[2];
	  this.channel2totalLength = 0;
	  this.channel2envelopeVolume = 0;
	  this.channel2envelopeType = false;
	  this.channel2envelopeSweeps = 0;
	  this.channel2envelopeSweepsLast = 0;
	  this.channel2consecutive = true;
	  this.channel2frequency = 0;
	  this.channel3canPlay = false;
	  this.channel3totalLength = 0;
	  this.channel3patternType = 4;
	  this.channel3frequency = 0;
	  this.channel3consecutive = true;
	  this.channel3Counter = 0x800;
	  this.channel4FrequencyPeriod = 8;
	  this.channel4totalLength = 0;
	  this.channel4envelopeVolume = 0;
	  this.channel4currentVolume = 0;
	  this.channel4envelopeType = false;
	  this.channel4envelopeSweeps = 0;
	  this.channel4envelopeSweepsLast = 0;
	  this.channel4consecutive = true;
	  this.channel4BitRange = 0x7FFF;
	  this.noiseSampleTable = this.LSFR15Table;
	  this.channel4VolumeShifter = 15;
	  this.channel1FrequencyCounter = 0x2000;
	  this.channel2FrequencyCounter = 0x2000;
	  this.channel3Counter = 0x800;
	  this.channel3FrequencyPeriod = 0x800;
	  this.channel3lastSampleLookup = 0;
	  this.channel4lastSampleLookup = 0;
	  this.VinLeftChannelMasterVolume = 8;
	  this.VinRightChannelMasterVolume = 8;
	  this.mixerOutputCache = 0;
	  this.sequencerClocks = 0x2000;
	  this.sequencePosition = 0;
	  this.channel4FrequencyPeriod = 8;
	  this.channel4Counter = 8;
	  this.cachedChannel3Sample = 0;
	  this.cachedChannel4Sample = 0;
	  this.channel1Enabled = false;
	  this.channel2Enabled = false;
	  this.channel3Enabled = false;
	  this.channel4Enabled = false;
	  this.channel1canPlay = false;
	  this.channel2canPlay = false;
	  this.channel4canPlay = false;
	  this.audioClocksUntilNextEvent = 1;
	  this.audioClocksUntilNextEventCounter = 1;
	  this.channel1OutputLevelCache();
	  this.channel2OutputLevelCache();
	  this.channel3OutputLevelCache();
	  this.channel4OutputLevelCache();
	  this.noiseSampleTable = this.LSFR15Table;
	};
	GameBoyCore.prototype.outputAudio = function () {
	  this.audioBuffer[this.audioDestinationPosition++] = (this.downsampleInput >>> 16) * this.downSampleInputDivider - 1;
	  this.audioBuffer[this.audioDestinationPosition++] = (this.downsampleInput & 0xFFFF) * this.downSampleInputDivider - 1;
	  if (this.audioDestinationPosition == this.numSamplesTotal) {
	    this.audioHandle.writeAudioNoCallback(this.audioBuffer);
	    this.audioDestinationPosition = 0;
	  }
	  this.downsampleInput = 0;
	};
	//Below are the audio generation functions timed against the CPU:
	GameBoyCore.prototype.generateAudio = function (numSamples) {
	  var multiplier = 0;
	  if (this.soundMasterEnabled && !this.CPUStopped) {
	    for (var clockUpTo = 0; numSamples > 0;) {
	      clockUpTo = Math.min(this.audioClocksUntilNextEventCounter, this.sequencerClocks, numSamples);
	      this.audioClocksUntilNextEventCounter -= clockUpTo;
	      this.sequencerClocks -= clockUpTo;
	      numSamples -= clockUpTo;
	      while (clockUpTo > 0) {
	        multiplier = Math.min(clockUpTo, this.audioResamplerFirstPassFactor - this.audioIndex);
	        clockUpTo -= multiplier;
	        this.audioIndex += multiplier;
	        this.downsampleInput += this.mixerOutputCache * multiplier;
	        if (this.audioIndex == this.audioResamplerFirstPassFactor) {
	          this.audioIndex = 0;
	          this.outputAudio();
	        }
	      }
	      if (this.sequencerClocks == 0) {
	        this.audioComputeSequencer();
	        this.sequencerClocks = 0x2000;
	      }
	      if (this.audioClocksUntilNextEventCounter == 0) {
	        this.computeAudioChannels();
	      }
	    }
	  }
	  else {
	    //SILENT OUTPUT:
	    while (numSamples > 0) {
	      multiplier = Math.min(numSamples, this.audioResamplerFirstPassFactor - this.audioIndex);
	      numSamples -= multiplier;
	      this.audioIndex += multiplier;
	      if (this.audioIndex == this.audioResamplerFirstPassFactor) {
	        this.audioIndex = 0;
	        this.outputAudio();
	      }
	    }
	  }
	};
	//Generate audio, but don't actually output it (Used for when sound is disabled by user/browser):
	GameBoyCore.prototype.generateAudioFake = function (numSamples) {
	  if (this.soundMasterEnabled && !this.CPUStopped) {
	    for (var clockUpTo = 0; numSamples > 0;) {
	      clockUpTo = Math.min(this.audioClocksUntilNextEventCounter, this.sequencerClocks, numSamples);
	      this.audioClocksUntilNextEventCounter -= clockUpTo;
	      this.sequencerClocks -= clockUpTo;
	      numSamples -= clockUpTo;
	      if (this.sequencerClocks == 0) {
	        this.audioComputeSequencer();
	        this.sequencerClocks = 0x2000;
	      }
	      if (this.audioClocksUntilNextEventCounter == 0) {
	        this.computeAudioChannels();
	      }
	    }
	  }
	};
	GameBoyCore.prototype.audioJIT = function () {
	  //Audio Sample Generation Timing:
	  if (this.opts.sound) {
	    this.generateAudio(this.audioTicks);
	  }
	  else {
	    this.generateAudioFake(this.audioTicks);
	  }
	  this.audioTicks = 0;
	};
	GameBoyCore.prototype.audioComputeSequencer = function () {
	  switch (this.sequencePosition++) {
	    case 0:
	      this.clockAudioLength();
	      break;
	    case 2:
	      this.clockAudioLength();
	      this.clockAudioSweep();
	      break;
	    case 4:
	      this.clockAudioLength();
	      break;
	    case 6:
	      this.clockAudioLength();
	      this.clockAudioSweep();
	      break;
	    case 7:
	      this.clockAudioEnvelope();
	      this.sequencePosition = 0;
	  }
	};
	GameBoyCore.prototype.clockAudioLength = function () {
	  //Channel 1:
	  if (this.channel1totalLength > 1) {
	    --this.channel1totalLength;
	  }
	  else if (this.channel1totalLength == 1) {
	    this.channel1totalLength = 0;
	    this.channel1EnableCheck();
	    this.memory[0xFF26] &= 0xFE;  //Channel #1 On Flag Off
	  }
	  //Channel 2:
	  if (this.channel2totalLength > 1) {
	    --this.channel2totalLength;
	  }
	  else if (this.channel2totalLength == 1) {
	    this.channel2totalLength = 0;
	    this.channel2EnableCheck();
	    this.memory[0xFF26] &= 0xFD;  //Channel #2 On Flag Off
	  }
	  //Channel 3:
	  if (this.channel3totalLength > 1) {
	    --this.channel3totalLength;
	  }
	  else if (this.channel3totalLength == 1) {
	    this.channel3totalLength = 0;
	    this.channel3EnableCheck();
	    this.memory[0xFF26] &= 0xFB;  //Channel #3 On Flag Off
	  }
	  //Channel 4:
	  if (this.channel4totalLength > 1) {
	    --this.channel4totalLength;
	  }
	  else if (this.channel4totalLength == 1) {
	    this.channel4totalLength = 0;
	    this.channel4EnableCheck();
	    this.memory[0xFF26] &= 0xF7;  //Channel #4 On Flag Off
	  }
	};
	GameBoyCore.prototype.clockAudioSweep = function () {
	  //Channel 1:
	  if (!this.channel1SweepFault && this.channel1timeSweep > 0) {
	    if (--this.channel1timeSweep == 0) {
	      this.runAudioSweep();
	    }
	  }
	};
	GameBoyCore.prototype.runAudioSweep = function () {
	  //Channel 1:
	  if (this.channel1lastTimeSweep > 0) {
	    if (this.channel1frequencySweepDivider > 0) {
	      this.channel1Swept = true;
	      if (this.channel1decreaseSweep) {
	        this.channel1ShadowFrequency -= this.channel1ShadowFrequency >> this.channel1frequencySweepDivider;
	        this.channel1frequency = this.channel1ShadowFrequency & 0x7FF;
	        this.channel1FrequencyTracker = (0x800 - this.channel1frequency) << 2;
	      }
	      else {
	        this.channel1ShadowFrequency += this.channel1ShadowFrequency >> this.channel1frequencySweepDivider;
	        this.channel1frequency = this.channel1ShadowFrequency;
	        if (this.channel1ShadowFrequency <= 0x7FF) {
	          this.channel1FrequencyTracker = (0x800 - this.channel1frequency) << 2;
	          //Run overflow check twice:
	          if ((this.channel1ShadowFrequency + (this.channel1ShadowFrequency >> this.channel1frequencySweepDivider)) > 0x7FF) {
	            this.channel1SweepFault = true;
	            this.channel1EnableCheck();
	            this.memory[0xFF26] &= 0xFE;  //Channel #1 On Flag Off
	          }
	        }
	        else {
	          this.channel1frequency &= 0x7FF;
	          this.channel1SweepFault = true;
	          this.channel1EnableCheck();
	          this.memory[0xFF26] &= 0xFE;  //Channel #1 On Flag Off
	        }
	      }
	      this.channel1timeSweep = this.channel1lastTimeSweep;
	    }
	    else {
	      //Channel has sweep disabled and timer becomes a length counter:
	      this.channel1SweepFault = true;
	      this.channel1EnableCheck();
	    }
	  }
	};
	GameBoyCore.prototype.channel1AudioSweepPerformDummy = function () {
	  //Channel 1:
	  if (this.channel1frequencySweepDivider > 0) {
	    if (!this.channel1decreaseSweep) {
	      var channel1ShadowFrequency = this.channel1ShadowFrequency + (this.channel1ShadowFrequency >> this.channel1frequencySweepDivider);
	      if (channel1ShadowFrequency <= 0x7FF) {
	        //Run overflow check twice:
	        if ((channel1ShadowFrequency + (channel1ShadowFrequency >> this.channel1frequencySweepDivider)) > 0x7FF) {
	          this.channel1SweepFault = true;
	          this.channel1EnableCheck();
	          this.memory[0xFF26] &= 0xFE;  //Channel #1 On Flag Off
	        }
	      }
	      else {
	        this.channel1SweepFault = true;
	        this.channel1EnableCheck();
	        this.memory[0xFF26] &= 0xFE;  //Channel #1 On Flag Off
	      }
	    }
	  }
	};
	GameBoyCore.prototype.clockAudioEnvelope = function () {
	  //Channel 1:
	  if (this.channel1envelopeSweepsLast > -1) {
	    if (this.channel1envelopeSweeps > 0) {
	      --this.channel1envelopeSweeps;
	    }
	    else {
	      if (!this.channel1envelopeType) {
	        if (this.channel1envelopeVolume > 0) {
	          --this.channel1envelopeVolume;
	          this.channel1envelopeSweeps = this.channel1envelopeSweepsLast;
	          this.channel1OutputLevelCache();
	        }
	        else {
	          this.channel1envelopeSweepsLast = -1;
	        }
	      }
	      else if (this.channel1envelopeVolume < 0xF) {
	        ++this.channel1envelopeVolume;
	        this.channel1envelopeSweeps = this.channel1envelopeSweepsLast;
	        this.channel1OutputLevelCache();
	      }
	      else {
	        this.channel1envelopeSweepsLast = -1;
	      }
	    }
	  }
	  //Channel 2:
	  if (this.channel2envelopeSweepsLast > -1) {
	    if (this.channel2envelopeSweeps > 0) {
	      --this.channel2envelopeSweeps;
	    }
	    else {
	      if (!this.channel2envelopeType) {
	        if (this.channel2envelopeVolume > 0) {
	          --this.channel2envelopeVolume;
	          this.channel2envelopeSweeps = this.channel2envelopeSweepsLast;
	          this.channel2OutputLevelCache();
	        }
	        else {
	          this.channel2envelopeSweepsLast = -1;
	        }
	      }
	      else if (this.channel2envelopeVolume < 0xF) {
	        ++this.channel2envelopeVolume;
	        this.channel2envelopeSweeps = this.channel2envelopeSweepsLast;
	        this.channel2OutputLevelCache();
	      }
	      else {
	        this.channel2envelopeSweepsLast = -1;
	      }
	    }
	  }
	  //Channel 4:
	  if (this.channel4envelopeSweepsLast > -1) {
	    if (this.channel4envelopeSweeps > 0) {
	      --this.channel4envelopeSweeps;
	    }
	    else {
	      if (!this.channel4envelopeType) {
	        if (this.channel4envelopeVolume > 0) {
	          this.channel4currentVolume = --this.channel4envelopeVolume << this.channel4VolumeShifter;
	          this.channel4envelopeSweeps = this.channel4envelopeSweepsLast;
	          this.channel4UpdateCache();
	        }
	        else {
	          this.channel4envelopeSweepsLast = -1;
	        }
	      }
	      else if (this.channel4envelopeVolume < 0xF) {
	        this.channel4currentVolume = ++this.channel4envelopeVolume << this.channel4VolumeShifter;
	        this.channel4envelopeSweeps = this.channel4envelopeSweepsLast;
	        this.channel4UpdateCache();
	      }
	      else {
	        this.channel4envelopeSweepsLast = -1;
	      }
	    }
	  }
	};
	GameBoyCore.prototype.computeAudioChannels = function () {
	  //Clock down the four audio channels to the next closest audio event:
	  this.channel1FrequencyCounter -= this.audioClocksUntilNextEvent;
	  this.channel2FrequencyCounter -= this.audioClocksUntilNextEvent;
	  this.channel3Counter -= this.audioClocksUntilNextEvent;
	  this.channel4Counter -= this.audioClocksUntilNextEvent;
	  //Channel 1 counter:
	  if (this.channel1FrequencyCounter == 0) {
	    this.channel1FrequencyCounter = this.channel1FrequencyTracker;
	    this.channel1DutyTracker = (this.channel1DutyTracker + 1) & 0x7;
	    this.channel1OutputLevelTrimaryCache();
	  }
	  //Channel 2 counter:
	  if (this.channel2FrequencyCounter == 0) {
	    this.channel2FrequencyCounter = this.channel2FrequencyTracker;
	    this.channel2DutyTracker = (this.channel2DutyTracker + 1) & 0x7;
	    this.channel2OutputLevelTrimaryCache();
	  }
	  //Channel 3 counter:
	  if (this.channel3Counter == 0) {
	    if (this.channel3canPlay) {
	      this.channel3lastSampleLookup = (this.channel3lastSampleLookup + 1) & 0x1F;
	    }
	    this.channel3Counter = this.channel3FrequencyPeriod;
	    this.channel3UpdateCache();
	  }
	  //Channel 4 counter:
	  if (this.channel4Counter == 0) {
	    this.channel4lastSampleLookup = (this.channel4lastSampleLookup + 1) & this.channel4BitRange;
	    this.channel4Counter = this.channel4FrequencyPeriod;
	    this.channel4UpdateCache();
	  }
	  //Find the number of clocks to next closest counter event:
	  this.audioClocksUntilNextEventCounter = this.audioClocksUntilNextEvent = Math.min(this.channel1FrequencyCounter, this.channel2FrequencyCounter, this.channel3Counter, this.channel4Counter);
	};
	GameBoyCore.prototype.channel1EnableCheck = function () {
	  this.channel1Enabled = ((this.channel1consecutive || this.channel1totalLength > 0) && !this.channel1SweepFault && this.channel1canPlay);
	  this.channel1OutputLevelSecondaryCache();
	};
	GameBoyCore.prototype.channel1VolumeEnableCheck = function () {
	  this.channel1canPlay = (this.memory[0xFF12] > 7);
	  this.channel1EnableCheck();
	  this.channel1OutputLevelSecondaryCache();
	};
	GameBoyCore.prototype.channel1OutputLevelCache = function () {
	  this.channel1currentSampleLeft = (this.leftChannel1) ? this.channel1envelopeVolume : 0;
	  this.channel1currentSampleRight = (this.rightChannel1) ? this.channel1envelopeVolume : 0;
	  this.channel1OutputLevelSecondaryCache();
	};
	GameBoyCore.prototype.channel1OutputLevelSecondaryCache = function () {
	  if (this.channel1Enabled) {
	    this.channel1currentSampleLeftSecondary = this.channel1currentSampleLeft;
	    this.channel1currentSampleRightSecondary = this.channel1currentSampleRight;
	  }
	  else {
	    this.channel1currentSampleLeftSecondary = 0;
	    this.channel1currentSampleRightSecondary = 0;
	  }
	  this.channel1OutputLevelTrimaryCache();
	};
	GameBoyCore.prototype.channel1OutputLevelTrimaryCache = function () {
	  if (this.channel1CachedDuty[this.channel1DutyTracker] && this.opts.channels[0]) {
	    this.channel1currentSampleLeftTrimary = this.channel1currentSampleLeftSecondary;
	    this.channel1currentSampleRightTrimary = this.channel1currentSampleRightSecondary;
	  }
	  else {
	    this.channel1currentSampleLeftTrimary = 0;
	    this.channel1currentSampleRightTrimary = 0;
	  }
	  this.mixerOutputLevelCache();
	};
	GameBoyCore.prototype.channel2EnableCheck = function () {
	  this.channel2Enabled = ((this.channel2consecutive || this.channel2totalLength > 0) && this.channel2canPlay);
	  this.channel2OutputLevelSecondaryCache();
	};
	GameBoyCore.prototype.channel2VolumeEnableCheck = function () {
	  this.channel2canPlay = (this.memory[0xFF17] > 7);
	  this.channel2EnableCheck();
	  this.channel2OutputLevelSecondaryCache();
	};
	GameBoyCore.prototype.channel2OutputLevelCache = function () {
	  this.channel2currentSampleLeft = (this.leftChannel2) ? this.channel2envelopeVolume : 0;
	  this.channel2currentSampleRight = (this.rightChannel2) ? this.channel2envelopeVolume : 0;
	  this.channel2OutputLevelSecondaryCache();
	};
	GameBoyCore.prototype.channel2OutputLevelSecondaryCache = function () {
	  if (this.channel2Enabled) {
	    this.channel2currentSampleLeftSecondary = this.channel2currentSampleLeft;
	    this.channel2currentSampleRightSecondary = this.channel2currentSampleRight;
	  }
	  else {
	    this.channel2currentSampleLeftSecondary = 0;
	    this.channel2currentSampleRightSecondary = 0;
	  }
	  this.channel2OutputLevelTrimaryCache();
	};
	GameBoyCore.prototype.channel2OutputLevelTrimaryCache = function () {
	  if (this.channel2CachedDuty[this.channel2DutyTracker] && this.opts.channels[1]) {
	    this.channel2currentSampleLeftTrimary = this.channel2currentSampleLeftSecondary;
	    this.channel2currentSampleRightTrimary = this.channel2currentSampleRightSecondary;
	  }
	  else {
	    this.channel2currentSampleLeftTrimary = 0;
	    this.channel2currentSampleRightTrimary = 0;
	  }
	  this.mixerOutputLevelCache();
	};
	GameBoyCore.prototype.channel3EnableCheck = function () {
	  this.channel3Enabled = (/*this.channel3canPlay && */(this.channel3consecutive || this.channel3totalLength > 0));
	  this.channel3OutputLevelSecondaryCache();
	};
	GameBoyCore.prototype.channel3OutputLevelCache = function () {
	  this.channel3currentSampleLeft = (this.leftChannel3) ? this.cachedChannel3Sample : 0;
	  this.channel3currentSampleRight = (this.rightChannel3) ? this.cachedChannel3Sample : 0;
	  this.channel3OutputLevelSecondaryCache();
	};
	GameBoyCore.prototype.channel3OutputLevelSecondaryCache = function () {
	  if (this.channel3Enabled && this.opts.channels[2]) {
	    this.channel3currentSampleLeftSecondary = this.channel3currentSampleLeft;
	    this.channel3currentSampleRightSecondary = this.channel3currentSampleRight;
	  }
	  else {
	    this.channel3currentSampleLeftSecondary = 0;
	    this.channel3currentSampleRightSecondary = 0;
	  }
	  this.mixerOutputLevelCache();
	};
	GameBoyCore.prototype.channel4EnableCheck = function () {
	  this.channel4Enabled = ((this.channel4consecutive || this.channel4totalLength > 0) && this.channel4canPlay);
	  this.channel4OutputLevelSecondaryCache();
	};
	GameBoyCore.prototype.channel4VolumeEnableCheck = function () {
	  this.channel4canPlay = (this.memory[0xFF21] > 7);
	  this.channel4EnableCheck();
	  this.channel4OutputLevelSecondaryCache();
	};
	GameBoyCore.prototype.channel4OutputLevelCache = function () {
	  this.channel4currentSampleLeft = (this.leftChannel4) ? this.cachedChannel4Sample : 0;
	  this.channel4currentSampleRight = (this.rightChannel4) ? this.cachedChannel4Sample : 0;
	  this.channel4OutputLevelSecondaryCache();
	};
	GameBoyCore.prototype.channel4OutputLevelSecondaryCache = function () {
	  if (this.channel4Enabled && this.opts.channels[3]) {
	    this.channel4currentSampleLeftSecondary = this.channel4currentSampleLeft;
	    this.channel4currentSampleRightSecondary = this.channel4currentSampleRight;
	  }
	  else {
	    this.channel4currentSampleLeftSecondary = 0;
	    this.channel4currentSampleRightSecondary = 0;
	  }
	  this.mixerOutputLevelCache();
	};
	GameBoyCore.prototype.mixerOutputLevelCache = function () {
	  this.mixerOutputCache = ((((this.channel1currentSampleLeftTrimary + this.channel2currentSampleLeftTrimary + this.channel3currentSampleLeftSecondary + this.channel4currentSampleLeftSecondary) * this.VinLeftChannelMasterVolume) << 16) |
	  ((this.channel1currentSampleRightTrimary + this.channel2currentSampleRightTrimary + this.channel3currentSampleRightSecondary + this.channel4currentSampleRightSecondary) * this.VinRightChannelMasterVolume));
	};
	GameBoyCore.prototype.channel3UpdateCache = function () {
	  this.cachedChannel3Sample = this.channel3PCM[this.channel3lastSampleLookup] >> this.channel3patternType;
	  this.channel3OutputLevelCache();
	};
	GameBoyCore.prototype.channel3WriteRAM = function (address, data) {
	  if (this.channel3canPlay) {
	    this.audioJIT();
	    //address = this.channel3lastSampleLookup >> 1;
	  }
	  this.memory[0xFF30 | address] = data;
	  address <<= 1;
	  this.channel3PCM[address] = data >> 4;
	  this.channel3PCM[address | 1] = data & 0xF;
	};
	GameBoyCore.prototype.channel4UpdateCache = function () {
	  this.cachedChannel4Sample = this.noiseSampleTable[this.channel4currentVolume | this.channel4lastSampleLookup];
	  this.channel4OutputLevelCache();
	};
	GameBoyCore.prototype.run = function () {
	  //The preprocessing before the actual iteration loop:
	  if ((this.stopEmulator & 2) == 0) {
	    if ((this.stopEmulator & 1) == 1) {
	      if (!this.CPUStopped) {
	        this.stopEmulator = 0;
	        this.audioUnderrunAdjustment();
	        this.clockUpdate();     //RTC clocking.
	        if (!this.halt) {
	          this.executeIteration();
	        }
	        else {            //Finish the HALT rundown execution.
	          this.CPUTicks = 0;
	          this.calculateHALTPeriod();
	          if (this.halt) {
	            this.updateCore();
	            this.iterationEndRoutine();
	          }
	          else {
	            this.executeIteration();
	          }
	        }
	        //Request the graphics target to be updated:
	        this.requestDraw();
	      }
	      else {
	        this.audioUnderrunAdjustment();
	        this.audioTicks += this.CPUCyclesTotal;
	        this.audioJIT();
	        this.stopEmulator |= 1;     //End current loop.
	      }
	    }
	    else {    //We can only get here if there was an internal error, but the loop was restarted.
	      this.emit('error', new Error("Iterator restarted a faulted core."));
	    }
	  }
	};
	GameBoyCore.prototype.executeIteration = function () {
	  //Iterate the interpreter loop:
	  var opcodeToExecute = 0;
	  var timedTicks = 0;
	  while (this.stopEmulator == 0) {
	    //Interrupt Arming:
	    switch (this.IRQEnableDelay) {
	      case 1:
	        this.IME = true;
	        this.checkIRQMatching();
	      case 2:
	        --this.IRQEnableDelay;
	    }
	    //Is an IRQ set to fire?:
	    if (this.IRQLineMatched > 0) {
	      //IME is true and and interrupt was matched:
	      this.launchIRQ();
	    }
	    //Fetch the current opcode:
	    opcodeToExecute = this.memoryReader[this.programCounter](this, this.programCounter);
	    //Increment the program counter to the next instruction:
	    this.programCounter = (this.programCounter + 1) & 0xFFFF;
	    //Check for the program counter quirk:
	    if (this.skipPCIncrement) {
	      this.programCounter = (this.programCounter - 1) & 0xFFFF;
	      this.skipPCIncrement = false;
	    }
	    //Get how many CPU cycles the current instruction counts for:
	    this.CPUTicks = this.TICKTable[opcodeToExecute];
	    //Execute the current instruction:
	    this.OPCODE[opcodeToExecute](this);
	    //Update the state (Inlined updateCoreFull manually here):
	    //Update the clocking for the LCD emulation:
	    this.LCDTicks += this.CPUTicks >> this.doubleSpeedShifter;  //LCD Timing
	    this.LCDCONTROL[this.actualScanLine](this);         //Scan Line and STAT Mode Control
	    //Single-speed relative timing for A/V emulation:
	    timedTicks = this.CPUTicks >> this.doubleSpeedShifter;    //CPU clocking can be updated from the LCD handling.
	    this.audioTicks += timedTicks;                //Audio Timing
	    this.emulatorTicks += timedTicks;             //Emulator Timing
	    //CPU Timers:
	    this.DIVTicks += this.CPUTicks;               //DIV Timing
	    if (this.TIMAEnabled) {                   //TIMA Timing
	      this.timerTicks += this.CPUTicks;
	      while (this.timerTicks >= this.TACClocker) {
	        this.timerTicks -= this.TACClocker;
	        if (++this.memory[0xFF05] == 0x100) {
	          this.memory[0xFF05] = this.memory[0xFF06];
	          this.interruptsRequested |= 0x4;
	          this.checkIRQMatching();
	        }
	      }
	    }
	    if (this.serialTimer > 0) {                   //Serial Timing
	      //IRQ Counter:
	      this.serialTimer -= this.CPUTicks;
	      if (this.serialTimer <= 0) {
	        this.interruptsRequested |= 0x8;
	        this.checkIRQMatching();
	      }
	      //Bit Shit Counter:
	      this.serialShiftTimer -= this.CPUTicks;
	      if (this.serialShiftTimer <= 0) {
	        this.serialShiftTimer = this.serialShiftTimerAllocated;
	        this.memory[0xFF01] = ((this.memory[0xFF01] << 1) & 0xFE) | 0x01; //We could shift in actual link data here if we were to implement such!!!
	      }
	    }
	    //End of iteration routine:
	    if (this.emulatorTicks >= this.CPUCyclesTotal) {
	      this.iterationEndRoutine();
	    }
	  }
	};
	GameBoyCore.prototype.iterationEndRoutine = function () {
	  if ((this.stopEmulator & 0x1) == 0) {
	    this.audioJIT();  //Make sure we at least output once per iteration.
	    //Update DIV Alignment (Integer overflow safety):
	    this.memory[0xFF04] = (this.memory[0xFF04] + (this.DIVTicks >> 8)) & 0xFF;
	    this.DIVTicks &= 0xFF;
	    //Update emulator flags:
	    this.stopEmulator |= 1;     //End current loop.
	    this.emulatorTicks -= this.CPUCyclesTotal;
	    this.CPUCyclesTotalCurrent += this.CPUCyclesTotalRoundoff;
	    this.recalculateIterationClockLimit();
	  }
	};
	GameBoyCore.prototype.handleSTOP = function () {
	  this.CPUStopped = true;           //Stop CPU until joypad input changes.
	  this.iterationEndRoutine();
	  if (this.emulatorTicks < 0) {
	    this.audioTicks -= this.emulatorTicks;
	    this.audioJIT();
	  }
	};
	GameBoyCore.prototype.recalculateIterationClockLimit = function () {
	  var endModulus = this.CPUCyclesTotalCurrent % 4;
	  this.CPUCyclesTotal = this.CPUCyclesTotalBase + this.CPUCyclesTotalCurrent - endModulus;
	  this.CPUCyclesTotalCurrent = endModulus;
	};
	GameBoyCore.prototype.recalculateIterationClockLimitForAudio = function (audioClocking) {
	  this.CPUCyclesTotal += Math.min((audioClocking >> 2) << 2, this.CPUCyclesTotalBase << 1);
	};
	GameBoyCore.prototype.scanLineMode2 = function () { //OAM Search Period
	  if (this.STATTracker != 1) {
	    if (this.mode2TriggerSTAT) {
	      this.interruptsRequested |= 0x2;
	      this.checkIRQMatching();
	    }
	    this.STATTracker = 1;
	    this.modeSTAT = 2;
	  }
	};
	GameBoyCore.prototype.scanLineMode3 = function () { //Scan Line Drawing Period
	  if (this.modeSTAT != 3) {
	    if (this.STATTracker == 0 && this.mode2TriggerSTAT) {
	      this.interruptsRequested |= 0x2;
	      this.checkIRQMatching();
	    }
	    this.STATTracker = 1;
	    this.modeSTAT = 3;
	  }
	};
	GameBoyCore.prototype.scanLineMode0 = function () { //Horizontal Blanking Period
	  if (this.modeSTAT != 0) {
	    if (this.STATTracker != 2) {
	      if (this.STATTracker == 0) {
	        if (this.mode2TriggerSTAT) {
	          this.interruptsRequested |= 0x2;
	          this.checkIRQMatching();
	        }
	        this.modeSTAT = 3;
	      }
	      this.incrementScanLineQueue();
	      this.updateSpriteCount(this.actualScanLine);
	      this.STATTracker = 2;
	    }
	    if (this.LCDTicks >= this.spriteCount) {
	      if (this.hdmaRunning) {
	        this.executeHDMA();
	      }
	      if (this.mode0TriggerSTAT) {
	        this.interruptsRequested |= 0x2;
	        this.checkIRQMatching();
	      }
	      this.STATTracker = 3;
	      this.modeSTAT = 0;
	    }
	  }
	};
	GameBoyCore.prototype.clocksUntilLYCMatch = function () {
	  if (this.memory[0xFF45] != 0) {
	    if (this.memory[0xFF45] > this.actualScanLine) {
	      return 456 * (this.memory[0xFF45] - this.actualScanLine);
	    }
	    return 456 * (154 - this.actualScanLine + this.memory[0xFF45]);
	  }
	  return (456 * ((this.actualScanLine == 153 && this.memory[0xFF44] == 0) ? 154 : (153 - this.actualScanLine))) + 8;
	};
	GameBoyCore.prototype.clocksUntilMode0 = function () {
	  switch (this.modeSTAT) {
	    case 0:
	      if (this.actualScanLine == 143) {
	        this.updateSpriteCount(0);
	        return this.spriteCount + 5016;
	      }
	      this.updateSpriteCount(this.actualScanLine + 1);
	      return this.spriteCount + 456;
	    case 2:
	    case 3:
	      this.updateSpriteCount(this.actualScanLine);
	      return this.spriteCount;
	    case 1:
	      this.updateSpriteCount(0);
	      return this.spriteCount + (456 * (154 - this.actualScanLine));
	  }
	};
	GameBoyCore.prototype.updateSpriteCount = function (line) {
	  this.spriteCount = 252;
	  if (this.cGBC && this.gfxSpriteShow) {                    //Is the window enabled and are we in CGB mode?
	    var lineAdjusted = line + 0x10;
	    var yoffset = 0;
	    var yCap = (this.gfxSpriteNormalHeight) ? 0x8 : 0x10;
	    for (var OAMAddress = 0xFE00; OAMAddress < 0xFEA0 && this.spriteCount < 312; OAMAddress += 4) {
	      yoffset = lineAdjusted - this.memory[OAMAddress];
	      if (yoffset > -1 && yoffset < yCap) {
	        this.spriteCount += 6;
	      }
	    }
	  }
	};
	GameBoyCore.prototype.matchLYC = function () {  //LYC Register Compare
	  if (this.memory[0xFF44] == this.memory[0xFF45]) {
	    this.memory[0xFF41] |= 0x04;
	    if (this.LYCMatchTriggerSTAT) {
	      this.interruptsRequested |= 0x2;
	      this.checkIRQMatching();
	    }
	  }
	  else {
	    this.memory[0xFF41] &= 0x7B;
	  }
	};
	GameBoyCore.prototype.updateCore = function () {
	  //Update the clocking for the LCD emulation:
	  this.LCDTicks += this.CPUTicks >> this.doubleSpeedShifter;  //LCD Timing
	  this.LCDCONTROL[this.actualScanLine](this);         //Scan Line and STAT Mode Control
	  //Single-speed relative timing for A/V emulation:
	  var timedTicks = this.CPUTicks >> this.doubleSpeedShifter;  //CPU clocking can be updated from the LCD handling.
	  this.audioTicks += timedTicks;                //Audio Timing
	  this.emulatorTicks += timedTicks;             //Emulator Timing
	  //CPU Timers:
	  this.DIVTicks += this.CPUTicks;               //DIV Timing
	  if (this.TIMAEnabled) {                   //TIMA Timing
	    this.timerTicks += this.CPUTicks;
	    while (this.timerTicks >= this.TACClocker) {
	      this.timerTicks -= this.TACClocker;
	      if (++this.memory[0xFF05] == 0x100) {
	        this.memory[0xFF05] = this.memory[0xFF06];
	        this.interruptsRequested |= 0x4;
	        this.checkIRQMatching();
	      }
	    }
	  }
	  if (this.serialTimer > 0) {                   //Serial Timing
	    //IRQ Counter:
	    this.serialTimer -= this.CPUTicks;
	    if (this.serialTimer <= 0) {
	      this.interruptsRequested |= 0x8;
	      this.checkIRQMatching();
	    }
	    //Bit Shit Counter:
	    this.serialShiftTimer -= this.CPUTicks;
	    if (this.serialShiftTimer <= 0) {
	      this.serialShiftTimer = this.serialShiftTimerAllocated;
	      this.memory[0xFF01] = ((this.memory[0xFF01] << 1) & 0xFE) | 0x01; //We could shift in actual link data here if we were to implement such!!!
	    }
	  }
	};
	GameBoyCore.prototype.updateCoreFull = function () {
	  //Update the state machine:
	  this.updateCore();
	  //End of iteration routine:
	  if (this.emulatorTicks >= this.CPUCyclesTotal) {
	    this.iterationEndRoutine();
	  }
	};
	GameBoyCore.prototype.initializeLCDController = function () {
	  //Display on hanlding:
	  var line = 0;
	  while (line < 154) {
	    if (line < 143) {
	      //We're on a normal scan line:
	      this.LINECONTROL[line] = function (parentObj) {
	        if (parentObj.LCDTicks < 80) {
	          parentObj.scanLineMode2();
	        }
	        else if (parentObj.LCDTicks < 252) {
	          parentObj.scanLineMode3();
	        }
	        else if (parentObj.LCDTicks < 456) {
	          parentObj.scanLineMode0();
	        }
	        else {
	          //We're on a new scan line:
	          parentObj.LCDTicks -= 456;
	          if (parentObj.STATTracker != 3) {
	            //Make sure the mode 0 handler was run at least once per scan line:
	            if (parentObj.STATTracker != 2) {
	              if (parentObj.STATTracker == 0 && parentObj.mode2TriggerSTAT) {
	                parentObj.interruptsRequested |= 0x2;
	              }
	              parentObj.incrementScanLineQueue();
	            }
	            if (parentObj.hdmaRunning) {
	              parentObj.executeHDMA();
	            }
	            if (parentObj.mode0TriggerSTAT) {
	              parentObj.interruptsRequested |= 0x2;
	            }
	          }
	          //Update the scanline registers and assert the LYC counter:
	          parentObj.actualScanLine = ++parentObj.memory[0xFF44];
	          //Perform a LYC counter assert:
	          if (parentObj.actualScanLine == parentObj.memory[0xFF45]) {
	            parentObj.memory[0xFF41] |= 0x04;
	            if (parentObj.LYCMatchTriggerSTAT) {
	              parentObj.interruptsRequested |= 0x2;
	            }
	          }
	          else {
	            parentObj.memory[0xFF41] &= 0x7B;
	          }
	          parentObj.checkIRQMatching();
	          //Reset our mode contingency variables:
	          parentObj.STATTracker = 0;
	          parentObj.modeSTAT = 2;
	          parentObj.LINECONTROL[parentObj.actualScanLine](parentObj); //Scan Line and STAT Mode Control.
	        }
	      };
	    }
	    else if (line == 143) {
	      //We're on the last visible scan line of the LCD screen:
	      this.LINECONTROL[143] = function (parentObj) {
	        if (parentObj.LCDTicks < 80) {
	          parentObj.scanLineMode2();
	        }
	        else if (parentObj.LCDTicks < 252) {
	          parentObj.scanLineMode3();
	        }
	        else if (parentObj.LCDTicks < 456) {
	          parentObj.scanLineMode0();
	        }
	        else {
	          //Starting V-Blank:
	          //Just finished the last visible scan line:
	          parentObj.LCDTicks -= 456;
	          if (parentObj.STATTracker != 3) {
	            //Make sure the mode 0 handler was run at least once per scan line:
	            if (parentObj.STATTracker != 2) {
	              if (parentObj.STATTracker == 0 && parentObj.mode2TriggerSTAT) {
	                parentObj.interruptsRequested |= 0x2;
	              }
	              parentObj.incrementScanLineQueue();
	            }
	            if (parentObj.hdmaRunning) {
	              parentObj.executeHDMA();
	            }
	            if (parentObj.mode0TriggerSTAT) {
	              parentObj.interruptsRequested |= 0x2;
	            }
	          }
	          //Update the scanline registers and assert the LYC counter:
	          parentObj.actualScanLine = parentObj.memory[0xFF44] = 144;
	          //Perform a LYC counter assert:
	          if (parentObj.memory[0xFF45] == 144) {
	            parentObj.memory[0xFF41] |= 0x04;
	            if (parentObj.LYCMatchTriggerSTAT) {
	              parentObj.interruptsRequested |= 0x2;
	            }
	          }
	          else {
	            parentObj.memory[0xFF41] &= 0x7B;
	          }
	          //Reset our mode contingency variables:
	          parentObj.STATTracker = 0;
	          //Update our state for v-blank:
	          parentObj.modeSTAT = 1;
	          parentObj.interruptsRequested |= (parentObj.mode1TriggerSTAT) ? 0x3 : 0x1;
	          parentObj.checkIRQMatching();
	          //Attempt to blit out to our canvas:
	          if (parentObj.drewBlank == 0) {
	            //Ensure JIT framing alignment:
	            if (parentObj.totalLinesPassed < 144 || (parentObj.totalLinesPassed == 144 && parentObj.midScanlineOffset > -1)) {
	              //Make sure our gfx are up-to-date:
	              parentObj.graphicsJITVBlank();
	              //Draw the frame:
	              parentObj.prepareFrame();
	            }
	          }
	          else {
	            //LCD off takes at least 2 frames:
	            --parentObj.drewBlank;
	          }
	          parentObj.LINECONTROL[144](parentObj);  //Scan Line and STAT Mode Control.
	        }
	      };
	    }
	    else if (line < 153) {
	      //In VBlank
	      this.LINECONTROL[line] = function (parentObj) {
	        if (parentObj.LCDTicks >= 456) {
	          //We're on a new scan line:
	          parentObj.LCDTicks -= 456;
	          parentObj.actualScanLine = ++parentObj.memory[0xFF44];
	          //Perform a LYC counter assert:
	          if (parentObj.actualScanLine == parentObj.memory[0xFF45]) {
	            parentObj.memory[0xFF41] |= 0x04;
	            if (parentObj.LYCMatchTriggerSTAT) {
	              parentObj.interruptsRequested |= 0x2;
	              parentObj.checkIRQMatching();
	            }
	          }
	          else {
	            parentObj.memory[0xFF41] &= 0x7B;
	          }
	          parentObj.LINECONTROL[parentObj.actualScanLine](parentObj); //Scan Line and STAT Mode Control.
	        }
	      };
	    }
	    else {
	      //VBlank Ending (We're on the last actual scan line)
	      this.LINECONTROL[153] = function (parentObj) {
	        if (parentObj.LCDTicks >= 8) {
	          if (parentObj.STATTracker != 4 && parentObj.memory[0xFF44] == 153) {
	            parentObj.memory[0xFF44] = 0; //LY register resets to 0 early.
	            //Perform a LYC counter assert:
	            if (parentObj.memory[0xFF45] == 0) {
	              parentObj.memory[0xFF41] |= 0x04;
	              if (parentObj.LYCMatchTriggerSTAT) {
	                parentObj.interruptsRequested |= 0x2;
	                parentObj.checkIRQMatching();
	              }
	            }
	            else {
	              parentObj.memory[0xFF41] &= 0x7B;
	            }
	            parentObj.STATTracker = 4;
	          }
	          if (parentObj.LCDTicks >= 456) {
	            //We reset back to the beginning:
	            parentObj.LCDTicks -= 456;
	            parentObj.STATTracker = parentObj.actualScanLine = 0;
	            parentObj.LINECONTROL[0](parentObj);  //Scan Line and STAT Mode Control.
	          }
	        }
	      };
	    }
	    ++line;
	  }
	};
	GameBoyCore.prototype.DisplayShowOff = function () {
	  if (this.drewBlank == 0) {
	    //Output a blank screen to the output framebuffer:
	    this.clearFrameBuffer();
	    this.drewFrame = true;
	  }
	  this.drewBlank = 2;
	};
	GameBoyCore.prototype.executeHDMA = function () {
	  this.DMAWrite(1);
	  if (this.halt) {
	    if ((this.LCDTicks - this.spriteCount) < ((4 >> this.doubleSpeedShifter) | 0x20)) {
	      //HALT clocking correction:
	      this.CPUTicks = 4 + ((0x20 + this.spriteCount) << this.doubleSpeedShifter);
	      this.LCDTicks = this.spriteCount + ((4 >> this.doubleSpeedShifter) | 0x20);
	    }
	  }
	  else {
	    this.LCDTicks += (4 >> this.doubleSpeedShifter) | 0x20;     //LCD Timing Update For HDMA.
	  }
	  if (this.memory[0xFF55] == 0) {
	    this.hdmaRunning = false;
	    this.memory[0xFF55] = 0xFF; //Transfer completed ("Hidden last step," since some ROMs don't imply this, but most do).
	  }
	  else {
	    --this.memory[0xFF55];
	  }
	};
	GameBoyCore.prototype.clockUpdate = function () {
	  if (this.cTIMER) {
	    var dateObj = new Date();
	    var newTime = dateObj.getTime();
	    var timeElapsed = newTime - this.lastIteration; //Get the numnber of milliseconds since this last executed.
	    this.lastIteration = newTime;
	    if (this.cTIMER && !this.RTCHALT) {
	      //Update the MBC3 RTC:
	      this.RTCSeconds += timeElapsed / 1000;
	      while (this.RTCSeconds >= 60) { //System can stutter, so the seconds difference can get large, thus the "while".
	        this.RTCSeconds -= 60;
	        ++this.RTCMinutes;
	        if (this.RTCMinutes >= 60) {
	          this.RTCMinutes -= 60;
	          ++this.RTCHours;
	          if (this.RTCHours >= 24) {
	            this.RTCHours -= 24;
	            this.RTCDays++;
	            if (this.RTCDays >= 512) {
	              this.RTCDays -= 512;
	              this.RTCDayOverFlow = true;
	            }
	          }
	        }
	      }
	    }
	  }
	};
	GameBoyCore.prototype.prepareFrame = function () {
	  //Copy the internal frame buffer to the output buffer:
	  this.swizzleFrameBuffer();
	  this.drewFrame = true;
	};
	GameBoyCore.prototype.requestDraw = function () {
	  if (this.drewFrame) {
	    this.dispatchDraw();
	  }
	};
	GameBoyCore.prototype.dispatchDraw = function () {
	  if (this.offscreenRGBCount > 0) {
	    this.processDraw(this.swizzledFrame);
	  }
	};
	GameBoyCore.prototype.processDraw = function (frameBuffer) {
	  var canvasRGBALength = this.offscreenRGBCount;
	  var canvasData = this.canvasBuffer.data;
	  var bufferIndex = 0;
	  for (var canvasIndex = 0; canvasIndex < canvasRGBALength; ++canvasIndex) {
	    canvasData[canvasIndex++] = frameBuffer[bufferIndex++];
	    canvasData[canvasIndex++] = frameBuffer[bufferIndex++];
	    canvasData[canvasIndex++] = frameBuffer[bufferIndex++];
	  }
	  this.graphicsBlit();
	  this.drewFrame = false;
	  if (this.opts.drawEvents) this.emit('draw');
	};
	GameBoyCore.prototype.swizzleFrameBuffer = function () {
	  //Convert our dirty 24-bit (24-bit, with internal render flags above it) framebuffer to an 8-bit buffer with separate indices for the RGB channels:
	  var frameBuffer = this.frameBuffer;
	  var swizzledFrame = this.swizzledFrame;
	  var bufferIndex = 0;
	  for (var canvasIndex = 0; canvasIndex < 69120;) {
	    swizzledFrame[canvasIndex++] = (frameBuffer[bufferIndex] >> 16) & 0xFF;   //Red
	    swizzledFrame[canvasIndex++] = (frameBuffer[bufferIndex] >> 8) & 0xFF;    //Green
	    swizzledFrame[canvasIndex++] = frameBuffer[bufferIndex++] & 0xFF;     //Blue
	  }
	};
	GameBoyCore.prototype.clearFrameBuffer = function () {
	  var bufferIndex = 0;
	  var frameBuffer = this.swizzledFrame;
	  if (this.cGBC || this.colorizedGBPalettes) {
	    while (bufferIndex < 69120) {
	      frameBuffer[bufferIndex++] = 248;
	    }
	  }
	  else {
	    while (bufferIndex < 69120) {
	      frameBuffer[bufferIndex++] = 239;
	      frameBuffer[bufferIndex++] = 255;
	      frameBuffer[bufferIndex++] = 222;
	    }
	  }
	};
	GameBoyCore.prototype.renderScanLine = function (scanlineToRender) {
	  this.pixelStart = scanlineToRender * 160;
	  if (this.bgEnabled) {
	    this.pixelEnd = 160;
	    this.BGLayerRender(scanlineToRender);
	    this.WindowLayerRender(scanlineToRender);
	  }
	  else {
	    var pixelLine = (scanlineToRender + 1) * 160;
	    var defaultColor = (this.cGBC || this.colorizedGBPalettes) ? 0xF8F8F8 : 0xEFFFDE;
	    for (var pixelPosition = (scanlineToRender * 160) + this.currentX; pixelPosition < pixelLine; pixelPosition++) {
	      this.frameBuffer[pixelPosition] = defaultColor;
	    }
	  }
	  this.SpriteLayerRender(scanlineToRender);
	  this.currentX = 0;
	  this.midScanlineOffset = -1;
	};
	GameBoyCore.prototype.renderMidScanLine = function () {
	  if (this.actualScanLine < 144 && this.modeSTAT == 3) {
	    //TODO: Get this accurate:
	    if (this.midScanlineOffset == -1) {
	      this.midScanlineOffset = this.backgroundX & 0x7;
	    }
	    if (this.LCDTicks >= 82) {
	      this.pixelEnd = this.LCDTicks - 74;
	      this.pixelEnd = Math.min(this.pixelEnd - this.midScanlineOffset - (this.pixelEnd % 0x8), 160);
	      if (this.bgEnabled) {
	        this.pixelStart = this.lastUnrenderedLine * 160;
	        this.BGLayerRender(this.lastUnrenderedLine);
	        this.WindowLayerRender(this.lastUnrenderedLine);
	        //TODO: Do midscanline JIT for sprites...
	      }
	      else {
	        var pixelLine = (this.lastUnrenderedLine * 160) + this.pixelEnd;
	        var defaultColor = (this.cGBC || this.colorizedGBPalettes) ? 0xF8F8F8 : 0xEFFFDE;
	        for (var pixelPosition = (this.lastUnrenderedLine * 160) + this.currentX; pixelPosition < pixelLine; pixelPosition++) {
	          this.frameBuffer[pixelPosition] = defaultColor;
	        }
	      }
	      this.currentX = this.pixelEnd;
	    }
	  }
	};
	GameBoyCore.prototype.initializeModeSpecificArrays = function () {
	  this.LCDCONTROL = (this.LCDisOn) ? this.LINECONTROL : this.DISPLAYOFFCONTROL;
	  if (this.cGBC) {
	    this.gbcOBJRawPalette = this.getTypedArray(0x40, 0, "uint8");
	    this.gbcBGRawPalette = this.getTypedArray(0x40, 0, "uint8");
	    this.gbcOBJPalette = this.getTypedArray(0x20, 0x1000000, "int32");
	    this.gbcBGPalette = this.getTypedArray(0x40, 0, "int32");
	    this.BGCHRBank2 = this.getTypedArray(0x800, 0, "uint8");
	    this.BGCHRCurrentBank = (this.currVRAMBank > 0) ? this.BGCHRBank2 : this.BGCHRBank1;
	    this.tileCache = this.generateCacheArray(0xF80);
	  }
	  else {
	    this.gbOBJPalette = this.getTypedArray(8, 0, "int32");
	    this.gbBGPalette = this.getTypedArray(4, 0, "int32");
	    this.BGPalette = this.gbBGPalette;
	    this.OBJPalette = this.gbOBJPalette;
	    this.tileCache = this.generateCacheArray(0x700);
	    this.sortBuffer = this.getTypedArray(0x100, 0, "uint8");
	    this.OAMAddressCache = this.getTypedArray(10, 0, "int32");
	  }
	  this.renderPathBuild();
	};
	GameBoyCore.prototype.GBCtoGBModeAdjust = function () {
	  debug("Stepping down from GBC mode.", 0);
	  this.VRAM = this.GBCMemory = this.BGCHRCurrentBank = this.BGCHRBank2 = null;
	  this.tileCache.length = 0x700;
	  if (this.opts.colorizeGb) {
	    this.gbBGColorizedPalette = this.getTypedArray(4, 0, "int32");
	    this.gbOBJColorizedPalette = this.getTypedArray(8, 0, "int32");
	    this.cachedBGPaletteConversion = this.getTypedArray(4, 0, "int32");
	    this.cachedOBJPaletteConversion = this.getTypedArray(8, 0, "int32");
	    this.BGPalette = this.gbBGColorizedPalette;
	    this.OBJPalette = this.gbOBJColorizedPalette;
	    this.gbOBJPalette = this.gbBGPalette = null;
	    this.getGBCColor();
	  }
	  else {
	    this.gbOBJPalette = this.getTypedArray(8, 0, "int32");
	    this.gbBGPalette = this.getTypedArray(4, 0, "int32");
	    this.BGPalette = this.gbBGPalette;
	    this.OBJPalette = this.gbOBJPalette;
	  }
	  this.sortBuffer = this.getTypedArray(0x100, 0, "uint8");
	  this.OAMAddressCache = this.getTypedArray(10, 0, "int32");
	  this.renderPathBuild();
	  this.memoryReadJumpCompile();
	  this.memoryWriteJumpCompile();
	};
	GameBoyCore.prototype.renderPathBuild = function () {
	  if (!this.cGBC) {
	    this.BGLayerRender = this.BGGBLayerRender;
	    this.WindowLayerRender = this.WindowGBLayerRender;
	    this.SpriteLayerRender = this.SpriteGBLayerRender;
	  }
	  else {
	    this.priorityFlaggingPathRebuild();
	    this.SpriteLayerRender = this.SpriteGBCLayerRender;
	  }
	};
	GameBoyCore.prototype.priorityFlaggingPathRebuild = function () {
	  if (this.BGPriorityEnabled) {
	    this.BGLayerRender = this.BGGBCLayerRender;
	    this.WindowLayerRender = this.WindowGBCLayerRender;
	  }
	  else {
	    this.BGLayerRender = this.BGGBCLayerRenderNoPriorityFlagging;
	    this.WindowLayerRender = this.WindowGBCLayerRenderNoPriorityFlagging;
	  }
	};
	GameBoyCore.prototype.initializeReferencesFromSaveState = function () {
	  this.LCDCONTROL = (this.LCDisOn) ? this.LINECONTROL : this.DISPLAYOFFCONTROL;
	  var tileIndex = 0;
	  if (!this.cGBC) {
	    if (this.colorizedGBPalettes) {
	      this.BGPalette = this.gbBGColorizedPalette;
	      this.OBJPalette = this.gbOBJColorizedPalette;
	      this.updateGBBGPalette = this.updateGBColorizedBGPalette;
	      this.updateGBOBJPalette = this.updateGBColorizedOBJPalette;
	      
	    }
	    else {
	      this.BGPalette = this.gbBGPalette;
	      this.OBJPalette = this.gbOBJPalette;
	    }
	    this.tileCache = this.generateCacheArray(0x700);
	    for (tileIndex = 0x8000; tileIndex < 0x9000; tileIndex += 2) {
	      this.generateGBOAMTileLine(tileIndex);
	    }
	    for (tileIndex = 0x9000; tileIndex < 0x9800; tileIndex += 2) {
	      this.generateGBTileLine(tileIndex);
	    }
	    this.sortBuffer = this.getTypedArray(0x100, 0, "uint8");
	    this.OAMAddressCache = this.getTypedArray(10, 0, "int32");
	  }
	  else {
	    this.BGCHRCurrentBank = (this.currVRAMBank > 0) ? this.BGCHRBank2 : this.BGCHRBank1;
	    this.tileCache = this.generateCacheArray(0xF80);
	    for (; tileIndex < 0x1800; tileIndex += 0x10) {
	      this.generateGBCTileBank1(tileIndex);
	      this.generateGBCTileBank2(tileIndex);
	    }
	  }
	  this.renderPathBuild();
	};
	GameBoyCore.prototype.RGBTint = function (value) {
	  //Adjustment for the GBC's tinting (According to Gambatte):
	  var r = value & 0x1F;
	  var g = (value >> 5) & 0x1F;
	  var b = (value >> 10) & 0x1F;
	  return ((r * 13 + g * 2 + b) >> 1) << 16 | (g * 3 + b) << 9 | (r * 3 + g * 2 + b * 11) >> 1;
	};
	GameBoyCore.prototype.getGBCColor = function () {
	  //GBC Colorization of DMG ROMs:
	  //BG
	  var adjustedIndex;
	  for (var counter = 0; counter < 4; counter++) {
	    adjustedIndex = counter << 1;
	    //BG
	    this.cachedBGPaletteConversion[counter] = this.RGBTint((this.gbcBGRawPalette[adjustedIndex | 1] << 8) | this.gbcBGRawPalette[adjustedIndex]);
	    //OBJ 1
	    this.cachedOBJPaletteConversion[counter] = this.RGBTint((this.gbcOBJRawPalette[adjustedIndex | 1] << 8) | this.gbcOBJRawPalette[adjustedIndex]);
	  }
	  //OBJ 2
	  for (counter = 4; counter < 8; counter++) {
	    adjustedIndex = counter << 1;
	    this.cachedOBJPaletteConversion[counter] = this.RGBTint((this.gbcOBJRawPalette[adjustedIndex | 1] << 8) | this.gbcOBJRawPalette[adjustedIndex]);
	  }
	  //Update the palette entries:
	  this.updateGBBGPalette = this.updateGBColorizedBGPalette;
	  this.updateGBOBJPalette = this.updateGBColorizedOBJPalette;
	  this.updateGBBGPalette(this.memory[0xFF47]);
	  this.updateGBOBJPalette(0, this.memory[0xFF48]);
	  this.updateGBOBJPalette(1, this.memory[0xFF49]);
	  this.colorizedGBPalettes = true;
	};
	GameBoyCore.prototype.updateGBRegularBGPalette = function (data) {
	  this.gbBGPalette[0] = this.colors[data & 0x03] | 0x2000000;
	  this.gbBGPalette[1] = this.colors[(data >> 2) & 0x03];
	  this.gbBGPalette[2] = this.colors[(data >> 4) & 0x03];
	  this.gbBGPalette[3] = this.colors[data >> 6];
	};
	GameBoyCore.prototype.updateGBColorizedBGPalette = function (data) {
	  //GB colorization:
	  this.gbBGColorizedPalette[0] = this.cachedBGPaletteConversion[data & 0x03] | 0x2000000;
	  this.gbBGColorizedPalette[1] = this.cachedBGPaletteConversion[(data >> 2) & 0x03];
	  this.gbBGColorizedPalette[2] = this.cachedBGPaletteConversion[(data >> 4) & 0x03];
	  this.gbBGColorizedPalette[3] = this.cachedBGPaletteConversion[data >> 6];
	};
	GameBoyCore.prototype.updateGBRegularOBJPalette = function (index, data) {
	  this.gbOBJPalette[index | 1] = this.colors[(data >> 2) & 0x03];
	  this.gbOBJPalette[index | 2] = this.colors[(data >> 4) & 0x03];
	  this.gbOBJPalette[index | 3] = this.colors[data >> 6];
	};
	GameBoyCore.prototype.updateGBColorizedOBJPalette = function (index, data) {
	  //GB colorization:
	  this.gbOBJColorizedPalette[index | 1] = this.cachedOBJPaletteConversion[index | ((data >> 2) & 0x03)];
	  this.gbOBJColorizedPalette[index | 2] = this.cachedOBJPaletteConversion[index | ((data >> 4) & 0x03)];
	  this.gbOBJColorizedPalette[index | 3] = this.cachedOBJPaletteConversion[index | (data >> 6)];
	};
	GameBoyCore.prototype.updateGBCBGPalette = function (index, data) {
	  if (this.gbcBGRawPalette[index] != data) {
	    this.midScanLineJIT();
	    //Update the color palette for BG tiles since it changed:
	    this.gbcBGRawPalette[index] = data;
	    if ((index & 0x06) == 0) {
	      //Palette 0 (Special tile Priority stuff)
	      data = 0x2000000 | this.RGBTint((this.gbcBGRawPalette[index | 1] << 8) | this.gbcBGRawPalette[index & 0x3E]);
	      index >>= 1;
	      this.gbcBGPalette[index] = data;
	      this.gbcBGPalette[0x20 | index] = 0x1000000 | data;
	    }
	    else {
	      //Regular Palettes (No special crap)
	      data = this.RGBTint((this.gbcBGRawPalette[index | 1] << 8) | this.gbcBGRawPalette[index & 0x3E]);
	      index >>= 1;
	      this.gbcBGPalette[index] = data;
	      this.gbcBGPalette[0x20 | index] = 0x1000000 | data;
	    }
	  }
	};
	GameBoyCore.prototype.updateGBCOBJPalette = function (index, data) {
	  if (this.gbcOBJRawPalette[index] != data) {
	    //Update the color palette for OBJ tiles since it changed:
	    this.gbcOBJRawPalette[index] = data;
	    if ((index & 0x06) > 0) {
	      //Regular Palettes (No special crap)
	      this.midScanLineJIT();
	      this.gbcOBJPalette[index >> 1] = 0x1000000 | this.RGBTint((this.gbcOBJRawPalette[index | 1] << 8) | this.gbcOBJRawPalette[index & 0x3E]);
	    }
	  }
	};
	GameBoyCore.prototype.BGGBLayerRender = function (scanlineToRender) {
	  var scrollYAdjusted = (this.backgroundY + scanlineToRender) & 0xFF;           //The line of the BG we're at.
	  var tileYLine = (scrollYAdjusted & 7) << 3;
	  var tileYDown = this.gfxBackgroundCHRBankPosition | ((scrollYAdjusted & 0xF8) << 2);  //The row of cached tiles we're fetching from.
	  var scrollXAdjusted = (this.backgroundX + this.currentX) & 0xFF;            //The scroll amount of the BG.
	  var pixelPosition = this.pixelStart + this.currentX;                  //Current pixel we're working on.
	  var pixelPositionEnd = this.pixelStart + ((this.gfxWindowDisplay && (scanlineToRender - this.windowY) >= 0) ? Math.min(Math.max(this.windowX, 0) + this.currentX, this.pixelEnd) : this.pixelEnd);  //Make sure we do at most 160 pixels a scanline.
	  var tileNumber = tileYDown + (scrollXAdjusted >> 3);
	  var chrCode = this.BGCHRBank1[tileNumber];
	  if (chrCode < this.gfxBackgroundBankOffset) {
	    chrCode |= 0x100;
	  }
	  var tile = this.tileCache[chrCode];
	  for (var texel = (scrollXAdjusted & 0x7); texel < 8 && pixelPosition < pixelPositionEnd && scrollXAdjusted < 0x100; ++scrollXAdjusted) {
	    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[tileYLine | texel++]];
	  }
	  var scrollXAdjustedAligned = Math.min(pixelPositionEnd - pixelPosition, 0x100 - scrollXAdjusted) >> 3;
	  scrollXAdjusted += scrollXAdjustedAligned << 3;
	  scrollXAdjustedAligned += tileNumber;
	  while (tileNumber < scrollXAdjustedAligned) {
	    chrCode = this.BGCHRBank1[++tileNumber];
	    if (chrCode < this.gfxBackgroundBankOffset) {
	      chrCode |= 0x100;
	    }
	    tile = this.tileCache[chrCode];
	    texel = tileYLine;
	    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel]];
	  }
	  if (pixelPosition < pixelPositionEnd) {
	    if (scrollXAdjusted < 0x100) {
	      chrCode = this.BGCHRBank1[++tileNumber];
	      if (chrCode < this.gfxBackgroundBankOffset) {
	        chrCode |= 0x100;
	      }
	      tile = this.tileCache[chrCode];
	      for (texel = tileYLine - 1; pixelPosition < pixelPositionEnd && scrollXAdjusted < 0x100; ++scrollXAdjusted) {
	        this.frameBuffer[pixelPosition++] = this.BGPalette[tile[++texel]];
	      }
	    }
	    scrollXAdjustedAligned = ((pixelPositionEnd - pixelPosition) >> 3) + tileYDown;
	    while (tileYDown < scrollXAdjustedAligned) {
	      chrCode = this.BGCHRBank1[tileYDown++];
	      if (chrCode < this.gfxBackgroundBankOffset) {
	        chrCode |= 0x100;
	      }
	      tile = this.tileCache[chrCode];
	      texel = tileYLine;
	      this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel]];
	    }
	    if (pixelPosition < pixelPositionEnd) {
	      chrCode = this.BGCHRBank1[tileYDown];
	      if (chrCode < this.gfxBackgroundBankOffset) {
	        chrCode |= 0x100;
	      }
	      tile = this.tileCache[chrCode];
	      switch (pixelPositionEnd - pixelPosition) {
	        case 7:
	          this.frameBuffer[pixelPosition + 6] = this.BGPalette[tile[tileYLine | 6]];
	        case 6:
	          this.frameBuffer[pixelPosition + 5] = this.BGPalette[tile[tileYLine | 5]];
	        case 5:
	          this.frameBuffer[pixelPosition + 4] = this.BGPalette[tile[tileYLine | 4]];
	        case 4:
	          this.frameBuffer[pixelPosition + 3] = this.BGPalette[tile[tileYLine | 3]];
	        case 3:
	          this.frameBuffer[pixelPosition + 2] = this.BGPalette[tile[tileYLine | 2]];
	        case 2:
	          this.frameBuffer[pixelPosition + 1] = this.BGPalette[tile[tileYLine | 1]];
	        case 1:
	          this.frameBuffer[pixelPosition] = this.BGPalette[tile[tileYLine]];
	      }
	    }
	  }
	};
	GameBoyCore.prototype.BGGBCLayerRender = function (scanlineToRender) {
	  var scrollYAdjusted = (this.backgroundY + scanlineToRender) & 0xFF;           //The line of the BG we're at.
	  var tileYLine = (scrollYAdjusted & 7) << 3;
	  var tileYDown = this.gfxBackgroundCHRBankPosition | ((scrollYAdjusted & 0xF8) << 2);  //The row of cached tiles we're fetching from.
	  var scrollXAdjusted = (this.backgroundX + this.currentX) & 0xFF;            //The scroll amount of the BG.
	  var pixelPosition = this.pixelStart + this.currentX;                  //Current pixel we're working on.
	  var pixelPositionEnd = this.pixelStart + ((this.gfxWindowDisplay && (scanlineToRender - this.windowY) >= 0) ? Math.min(Math.max(this.windowX, 0) + this.currentX, this.pixelEnd) : this.pixelEnd);  //Make sure we do at most 160 pixels a scanline.
	  var tileNumber = tileYDown + (scrollXAdjusted >> 3);
	  var chrCode = this.BGCHRBank1[tileNumber];
	  if (chrCode < this.gfxBackgroundBankOffset) {
	    chrCode |= 0x100;
	  }
	  var attrCode = this.BGCHRBank2[tileNumber];
	  var tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];
	  var palette = ((attrCode & 0x7) << 2) | ((attrCode & 0x80) >> 2);
	  for (var texel = (scrollXAdjusted & 0x7); texel < 8 && pixelPosition < pixelPositionEnd && scrollXAdjusted < 0x100; ++scrollXAdjusted) {
	    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[tileYLine | texel++]];
	  }
	  var scrollXAdjustedAligned = Math.min(pixelPositionEnd - pixelPosition, 0x100 - scrollXAdjusted) >> 3;
	  scrollXAdjusted += scrollXAdjustedAligned << 3;
	  scrollXAdjustedAligned += tileNumber;
	  while (tileNumber < scrollXAdjustedAligned) {
	    chrCode = this.BGCHRBank1[++tileNumber];
	    if (chrCode < this.gfxBackgroundBankOffset) {
	      chrCode |= 0x100;
	    }
	    attrCode = this.BGCHRBank2[tileNumber];
	    tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];
	    palette = ((attrCode & 0x7) << 2) | ((attrCode & 0x80) >> 2);
	    texel = tileYLine;
	    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel]];
	  }
	  if (pixelPosition < pixelPositionEnd) {
	    if (scrollXAdjusted < 0x100) {
	      chrCode = this.BGCHRBank1[++tileNumber];
	      if (chrCode < this.gfxBackgroundBankOffset) {
	        chrCode |= 0x100;
	      }
	      attrCode = this.BGCHRBank2[tileNumber];
	      tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];
	      palette = ((attrCode & 0x7) << 2) | ((attrCode & 0x80) >> 2);
	      for (texel = tileYLine - 1; pixelPosition < pixelPositionEnd && scrollXAdjusted < 0x100; ++scrollXAdjusted) {
	        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[++texel]];
	      }
	    }
	    scrollXAdjustedAligned = ((pixelPositionEnd - pixelPosition) >> 3) + tileYDown;
	    while (tileYDown < scrollXAdjustedAligned) {
	      chrCode = this.BGCHRBank1[tileYDown];
	      if (chrCode < this.gfxBackgroundBankOffset) {
	        chrCode |= 0x100;
	      }
	      attrCode = this.BGCHRBank2[tileYDown++];
	      tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];
	      palette = ((attrCode & 0x7) << 2) | ((attrCode & 0x80) >> 2);
	      texel = tileYLine;
	      this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel]];
	    }
	    if (pixelPosition < pixelPositionEnd) {
	      chrCode = this.BGCHRBank1[tileYDown];
	      if (chrCode < this.gfxBackgroundBankOffset) {
	        chrCode |= 0x100;
	      }
	      attrCode = this.BGCHRBank2[tileYDown];
	      tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];
	      palette = ((attrCode & 0x7) << 2) | ((attrCode & 0x80) >> 2);
	      switch (pixelPositionEnd - pixelPosition) {
	        case 7:
	          this.frameBuffer[pixelPosition + 6] = this.gbcBGPalette[palette | tile[tileYLine | 6]];
	        case 6:
	          this.frameBuffer[pixelPosition + 5] = this.gbcBGPalette[palette | tile[tileYLine | 5]];
	        case 5:
	          this.frameBuffer[pixelPosition + 4] = this.gbcBGPalette[palette | tile[tileYLine | 4]];
	        case 4:
	          this.frameBuffer[pixelPosition + 3] = this.gbcBGPalette[palette | tile[tileYLine | 3]];
	        case 3:
	          this.frameBuffer[pixelPosition + 2] = this.gbcBGPalette[palette | tile[tileYLine | 2]];
	        case 2:
	          this.frameBuffer[pixelPosition + 1] = this.gbcBGPalette[palette | tile[tileYLine | 1]];
	        case 1:
	          this.frameBuffer[pixelPosition] = this.gbcBGPalette[palette | tile[tileYLine]];
	      }
	    }
	  }
	};
	GameBoyCore.prototype.BGGBCLayerRenderNoPriorityFlagging = function (scanlineToRender) {
	  var scrollYAdjusted = (this.backgroundY + scanlineToRender) & 0xFF;           //The line of the BG we're at.
	  var tileYLine = (scrollYAdjusted & 7) << 3;
	  var tileYDown = this.gfxBackgroundCHRBankPosition | ((scrollYAdjusted & 0xF8) << 2);  //The row of cached tiles we're fetching from.
	  var scrollXAdjusted = (this.backgroundX + this.currentX) & 0xFF;            //The scroll amount of the BG.
	  var pixelPosition = this.pixelStart + this.currentX;                  //Current pixel we're working on.
	  var pixelPositionEnd = this.pixelStart + ((this.gfxWindowDisplay && (scanlineToRender - this.windowY) >= 0) ? Math.min(Math.max(this.windowX, 0) + this.currentX, this.pixelEnd) : this.pixelEnd);  //Make sure we do at most 160 pixels a scanline.
	  var tileNumber = tileYDown + (scrollXAdjusted >> 3);
	  var chrCode = this.BGCHRBank1[tileNumber];
	  if (chrCode < this.gfxBackgroundBankOffset) {
	    chrCode |= 0x100;
	  }
	  var attrCode = this.BGCHRBank2[tileNumber];
	  var tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];
	  var palette = (attrCode & 0x7) << 2;
	  for (var texel = (scrollXAdjusted & 0x7); texel < 8 && pixelPosition < pixelPositionEnd && scrollXAdjusted < 0x100; ++scrollXAdjusted) {
	    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[tileYLine | texel++]];
	  }
	  var scrollXAdjustedAligned = Math.min(pixelPositionEnd - pixelPosition, 0x100 - scrollXAdjusted) >> 3;
	  scrollXAdjusted += scrollXAdjustedAligned << 3;
	  scrollXAdjustedAligned += tileNumber;
	  while (tileNumber < scrollXAdjustedAligned) {
	    chrCode = this.BGCHRBank1[++tileNumber];
	    if (chrCode < this.gfxBackgroundBankOffset) {
	      chrCode |= 0x100;
	    }
	    attrCode = this.BGCHRBank2[tileNumber];
	    tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];
	    palette = (attrCode & 0x7) << 2;
	    texel = tileYLine;
	    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel]];
	  }
	  if (pixelPosition < pixelPositionEnd) {
	    if (scrollXAdjusted < 0x100) {
	      chrCode = this.BGCHRBank1[++tileNumber];
	      if (chrCode < this.gfxBackgroundBankOffset) {
	        chrCode |= 0x100;
	      }
	      attrCode = this.BGCHRBank2[tileNumber];
	      tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];
	      palette = (attrCode & 0x7) << 2;
	      for (texel = tileYLine - 1; pixelPosition < pixelPositionEnd && scrollXAdjusted < 0x100; ++scrollXAdjusted) {
	        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[++texel]];
	      }
	    }
	    scrollXAdjustedAligned = ((pixelPositionEnd - pixelPosition) >> 3) + tileYDown;
	    while (tileYDown < scrollXAdjustedAligned) {
	      chrCode = this.BGCHRBank1[tileYDown];
	      if (chrCode < this.gfxBackgroundBankOffset) {
	        chrCode |= 0x100;
	      }
	      attrCode = this.BGCHRBank2[tileYDown++];
	      tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];
	      palette = (attrCode & 0x7) << 2;
	      texel = tileYLine;
	      this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	      this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel]];
	    }
	    if (pixelPosition < pixelPositionEnd) {
	      chrCode = this.BGCHRBank1[tileYDown];
	      if (chrCode < this.gfxBackgroundBankOffset) {
	        chrCode |= 0x100;
	      }
	      attrCode = this.BGCHRBank2[tileYDown];
	      tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];
	      palette = (attrCode & 0x7) << 2;
	      switch (pixelPositionEnd - pixelPosition) {
	        case 7:
	          this.frameBuffer[pixelPosition + 6] = this.gbcBGPalette[palette | tile[tileYLine | 6]];
	        case 6:
	          this.frameBuffer[pixelPosition + 5] = this.gbcBGPalette[palette | tile[tileYLine | 5]];
	        case 5:
	          this.frameBuffer[pixelPosition + 4] = this.gbcBGPalette[palette | tile[tileYLine | 4]];
	        case 4:
	          this.frameBuffer[pixelPosition + 3] = this.gbcBGPalette[palette | tile[tileYLine | 3]];
	        case 3:
	          this.frameBuffer[pixelPosition + 2] = this.gbcBGPalette[palette | tile[tileYLine | 2]];
	        case 2:
	          this.frameBuffer[pixelPosition + 1] = this.gbcBGPalette[palette | tile[tileYLine | 1]];
	        case 1:
	          this.frameBuffer[pixelPosition] = this.gbcBGPalette[palette | tile[tileYLine]];
	      }
	    }
	  }
	};
	GameBoyCore.prototype.WindowGBLayerRender = function (scanlineToRender) {
	  if (this.gfxWindowDisplay) {                  //Is the window enabled?
	    var scrollYAdjusted = scanlineToRender - this.windowY;    //The line of the BG we're at.
	    if (scrollYAdjusted >= 0) {
	      var scrollXRangeAdjusted = (this.windowX > 0) ? (this.windowX + this.currentX) : this.currentX;
	      var pixelPosition = this.pixelStart + scrollXRangeAdjusted;
	      var pixelPositionEnd = this.pixelStart + this.pixelEnd;
	      if (pixelPosition < pixelPositionEnd) {
	        var tileYLine = (scrollYAdjusted & 0x7) << 3;
	        var tileNumber = (this.gfxWindowCHRBankPosition | ((scrollYAdjusted & 0xF8) << 2)) + (this.currentX >> 3);
	        var chrCode = this.BGCHRBank1[tileNumber];
	        if (chrCode < this.gfxBackgroundBankOffset) {
	          chrCode |= 0x100;
	        }
	        var tile = this.tileCache[chrCode];
	        var texel = (scrollXRangeAdjusted - this.windowX) & 0x7;
	        scrollXRangeAdjusted = Math.min(8, texel + pixelPositionEnd - pixelPosition);
	        while (texel < scrollXRangeAdjusted) {
	          this.frameBuffer[pixelPosition++] = this.BGPalette[tile[tileYLine | texel++]];
	        }
	        scrollXRangeAdjusted = tileNumber + ((pixelPositionEnd - pixelPosition) >> 3);
	        while (tileNumber < scrollXRangeAdjusted) {
	          chrCode = this.BGCHRBank1[++tileNumber];
	          if (chrCode < this.gfxBackgroundBankOffset) {
	            chrCode |= 0x100;
	          }
	          tile = this.tileCache[chrCode];
	          texel = tileYLine;
	          this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel]];
	        }
	        if (pixelPosition < pixelPositionEnd) {
	          chrCode = this.BGCHRBank1[++tileNumber];
	          if (chrCode < this.gfxBackgroundBankOffset) {
	            chrCode |= 0x100;
	          }
	          tile = this.tileCache[chrCode];
	          switch (pixelPositionEnd - pixelPosition) {
	            case 7:
	              this.frameBuffer[pixelPosition + 6] = this.BGPalette[tile[tileYLine | 6]];
	            case 6:
	              this.frameBuffer[pixelPosition + 5] = this.BGPalette[tile[tileYLine | 5]];
	            case 5:
	              this.frameBuffer[pixelPosition + 4] = this.BGPalette[tile[tileYLine | 4]];
	            case 4:
	              this.frameBuffer[pixelPosition + 3] = this.BGPalette[tile[tileYLine | 3]];
	            case 3:
	              this.frameBuffer[pixelPosition + 2] = this.BGPalette[tile[tileYLine | 2]];
	            case 2:
	              this.frameBuffer[pixelPosition + 1] = this.BGPalette[tile[tileYLine | 1]];
	            case 1:
	              this.frameBuffer[pixelPosition] = this.BGPalette[tile[tileYLine]];
	          }
	        }
	      }
	    }
	  }
	};
	GameBoyCore.prototype.WindowGBCLayerRender = function (scanlineToRender) {
	  if (this.gfxWindowDisplay) {                  //Is the window enabled?
	    var scrollYAdjusted = scanlineToRender - this.windowY;    //The line of the BG we're at.
	    if (scrollYAdjusted >= 0) {
	      var scrollXRangeAdjusted = (this.windowX > 0) ? (this.windowX + this.currentX) : this.currentX;
	      var pixelPosition = this.pixelStart + scrollXRangeAdjusted;
	      var pixelPositionEnd = this.pixelStart + this.pixelEnd;
	      if (pixelPosition < pixelPositionEnd) {
	        var tileYLine = (scrollYAdjusted & 0x7) << 3;
	        var tileNumber = (this.gfxWindowCHRBankPosition | ((scrollYAdjusted & 0xF8) << 2)) + (this.currentX >> 3);
	        var chrCode = this.BGCHRBank1[tileNumber];
	        if (chrCode < this.gfxBackgroundBankOffset) {
	          chrCode |= 0x100;
	        }
	        var attrCode = this.BGCHRBank2[tileNumber];
	        var tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];
	        var palette = ((attrCode & 0x7) << 2) | ((attrCode & 0x80) >> 2);
	        var texel = (scrollXRangeAdjusted - this.windowX) & 0x7;
	        scrollXRangeAdjusted = Math.min(8, texel + pixelPositionEnd - pixelPosition);
	        while (texel < scrollXRangeAdjusted) {
	          this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[tileYLine | texel++]];
	        }
	        scrollXRangeAdjusted = tileNumber + ((pixelPositionEnd - pixelPosition) >> 3);
	        while (tileNumber < scrollXRangeAdjusted) {
	          chrCode = this.BGCHRBank1[++tileNumber];
	          if (chrCode < this.gfxBackgroundBankOffset) {
	            chrCode |= 0x100;
	          }
	          attrCode = this.BGCHRBank2[tileNumber];
	          tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];
	          palette = ((attrCode & 0x7) << 2) | ((attrCode & 0x80) >> 2);
	          texel = tileYLine;
	          this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel]];
	        }
	        if (pixelPosition < pixelPositionEnd) {
	          chrCode = this.BGCHRBank1[++tileNumber];
	          if (chrCode < this.gfxBackgroundBankOffset) {
	            chrCode |= 0x100;
	          }
	          attrCode = this.BGCHRBank2[tileNumber];
	          tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];
	          palette = ((attrCode & 0x7) << 2) | ((attrCode & 0x80) >> 2);
	          switch (pixelPositionEnd - pixelPosition) {
	            case 7:
	              this.frameBuffer[pixelPosition + 6] = this.gbcBGPalette[palette | tile[tileYLine | 6]];
	            case 6:
	              this.frameBuffer[pixelPosition + 5] = this.gbcBGPalette[palette | tile[tileYLine | 5]];
	            case 5:
	              this.frameBuffer[pixelPosition + 4] = this.gbcBGPalette[palette | tile[tileYLine | 4]];
	            case 4:
	              this.frameBuffer[pixelPosition + 3] = this.gbcBGPalette[palette | tile[tileYLine | 3]];
	            case 3:
	              this.frameBuffer[pixelPosition + 2] = this.gbcBGPalette[palette | tile[tileYLine | 2]];
	            case 2:
	              this.frameBuffer[pixelPosition + 1] = this.gbcBGPalette[palette | tile[tileYLine | 1]];
	            case 1:
	              this.frameBuffer[pixelPosition] = this.gbcBGPalette[palette | tile[tileYLine]];
	          }
	        }
	      }
	    }
	  }
	};
	GameBoyCore.prototype.WindowGBCLayerRenderNoPriorityFlagging = function (scanlineToRender) {
	  if (this.gfxWindowDisplay) {                  //Is the window enabled?
	    var scrollYAdjusted = scanlineToRender - this.windowY;    //The line of the BG we're at.
	    if (scrollYAdjusted >= 0) {
	      var scrollXRangeAdjusted = (this.windowX > 0) ? (this.windowX + this.currentX) : this.currentX;
	      var pixelPosition = this.pixelStart + scrollXRangeAdjusted;
	      var pixelPositionEnd = this.pixelStart + this.pixelEnd;
	      if (pixelPosition < pixelPositionEnd) {
	        var tileYLine = (scrollYAdjusted & 0x7) << 3;
	        var tileNumber = (this.gfxWindowCHRBankPosition | ((scrollYAdjusted & 0xF8) << 2)) + (this.currentX >> 3);
	        var chrCode = this.BGCHRBank1[tileNumber];
	        if (chrCode < this.gfxBackgroundBankOffset) {
	          chrCode |= 0x100;
	        }
	        var attrCode = this.BGCHRBank2[tileNumber];
	        var tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];
	        var palette = (attrCode & 0x7) << 2;
	        var texel = (scrollXRangeAdjusted - this.windowX) & 0x7;
	        scrollXRangeAdjusted = Math.min(8, texel + pixelPositionEnd - pixelPosition);
	        while (texel < scrollXRangeAdjusted) {
	          this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[tileYLine | texel++]];
	        }
	        scrollXRangeAdjusted = tileNumber + ((pixelPositionEnd - pixelPosition) >> 3);
	        while (tileNumber < scrollXRangeAdjusted) {
	          chrCode = this.BGCHRBank1[++tileNumber];
	          if (chrCode < this.gfxBackgroundBankOffset) {
	            chrCode |= 0x100;
	          }
	          attrCode = this.BGCHRBank2[tileNumber];
	          tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];
	          palette = (attrCode & 0x7) << 2;
	          texel = tileYLine;
	          this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];
	          this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel]];
	        }
	        if (pixelPosition < pixelPositionEnd) {
	          chrCode = this.BGCHRBank1[++tileNumber];
	          if (chrCode < this.gfxBackgroundBankOffset) {
	            chrCode |= 0x100;
	          }
	          attrCode = this.BGCHRBank2[tileNumber];
	          tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];
	          palette = (attrCode & 0x7) << 2;
	          switch (pixelPositionEnd - pixelPosition) {
	            case 7:
	              this.frameBuffer[pixelPosition + 6] = this.gbcBGPalette[palette | tile[tileYLine | 6]];
	            case 6:
	              this.frameBuffer[pixelPosition + 5] = this.gbcBGPalette[palette | tile[tileYLine | 5]];
	            case 5:
	              this.frameBuffer[pixelPosition + 4] = this.gbcBGPalette[palette | tile[tileYLine | 4]];
	            case 4:
	              this.frameBuffer[pixelPosition + 3] = this.gbcBGPalette[palette | tile[tileYLine | 3]];
	            case 3:
	              this.frameBuffer[pixelPosition + 2] = this.gbcBGPalette[palette | tile[tileYLine | 2]];
	            case 2:
	              this.frameBuffer[pixelPosition + 1] = this.gbcBGPalette[palette | tile[tileYLine | 1]];
	            case 1:
	              this.frameBuffer[pixelPosition] = this.gbcBGPalette[palette | tile[tileYLine]];
	          }
	        }
	      }
	    }
	  }
	};
	GameBoyCore.prototype.SpriteGBLayerRender = function (scanlineToRender) {
	  if (this.gfxSpriteShow) {                   //Are sprites enabled?
	    var lineAdjusted = scanlineToRender + 0x10;
	    var OAMAddress = 0xFE00;
	    var yoffset = 0;
	    var xcoord = 1;
	    var xCoordStart = 0;
	    var xCoordEnd = 0;
	    var attrCode = 0;
	    var palette = 0;
	    var tile = null;
	    var data = 0;
	    var spriteCount = 0;
	    var length = 0;
	    var currentPixel = 0;
	    var linePixel = 0;
	    //Clear our x-coord sort buffer:
	    while (xcoord < 168) {
	      this.sortBuffer[xcoord++] = 0xFF;
	    }
	    if (this.gfxSpriteNormalHeight) {
	      //Draw the visible sprites:
	      for (var length = this.findLowestSpriteDrawable(lineAdjusted, 0x7); spriteCount < length; ++spriteCount) {
	        OAMAddress = this.OAMAddressCache[spriteCount];
	        yoffset = (lineAdjusted - this.memory[OAMAddress]) << 3;
	        attrCode = this.memory[OAMAddress | 3];
	        palette = (attrCode & 0x10) >> 2;
	        tile = this.tileCache[((attrCode & 0x60) << 4) | this.memory[OAMAddress | 0x2]];
	        linePixel = xCoordStart = this.memory[OAMAddress | 1];
	        xCoordEnd = Math.min(168 - linePixel, 8);
	        xcoord = (linePixel > 7) ? 0 : (8 - linePixel);
	        for (currentPixel = this.pixelStart + ((linePixel > 8) ? (linePixel - 8) : 0); xcoord < xCoordEnd; ++xcoord, ++currentPixel, ++linePixel) {
	          if (this.sortBuffer[linePixel] > xCoordStart) {
	            if (this.frameBuffer[currentPixel] >= 0x2000000) {
	              data = tile[yoffset | xcoord];
	              if (data > 0) {
	                this.frameBuffer[currentPixel] = this.OBJPalette[palette | data];
	                this.sortBuffer[linePixel] = xCoordStart;
	              }
	            }
	            else if (this.frameBuffer[currentPixel] < 0x1000000) {
	              data = tile[yoffset | xcoord];
	              if (data > 0 && attrCode < 0x80) {
	                this.frameBuffer[currentPixel] = this.OBJPalette[palette | data];
	                this.sortBuffer[linePixel] = xCoordStart;
	              }
	            }
	          }
	        }
	      }
	    }
	    else {
	      //Draw the visible sprites:
	      for (var length = this.findLowestSpriteDrawable(lineAdjusted, 0xF); spriteCount < length; ++spriteCount) {
	        OAMAddress = this.OAMAddressCache[spriteCount];
	        yoffset = (lineAdjusted - this.memory[OAMAddress]) << 3;
	        attrCode = this.memory[OAMAddress | 3];
	        palette = (attrCode & 0x10) >> 2;
	        if ((attrCode & 0x40) == (0x40 & yoffset)) {
	          tile = this.tileCache[((attrCode & 0x60) << 4) | (this.memory[OAMAddress | 0x2] & 0xFE)];
	        }
	        else {
	          tile = this.tileCache[((attrCode & 0x60) << 4) | this.memory[OAMAddress | 0x2] | 1];
	        }
	        yoffset &= 0x3F;
	        linePixel = xCoordStart = this.memory[OAMAddress | 1];
	        xCoordEnd = Math.min(168 - linePixel, 8);
	        xcoord = (linePixel > 7) ? 0 : (8 - linePixel);
	        for (currentPixel = this.pixelStart + ((linePixel > 8) ? (linePixel - 8) : 0); xcoord < xCoordEnd; ++xcoord, ++currentPixel, ++linePixel) {
	          if (this.sortBuffer[linePixel] > xCoordStart) {
	            if (this.frameBuffer[currentPixel] >= 0x2000000) {
	              data = tile[yoffset | xcoord];
	              if (data > 0) {
	                this.frameBuffer[currentPixel] = this.OBJPalette[palette | data];
	                this.sortBuffer[linePixel] = xCoordStart;
	              }
	            }
	            else if (this.frameBuffer[currentPixel] < 0x1000000) {
	              data = tile[yoffset | xcoord];
	              if (data > 0 && attrCode < 0x80) {
	                this.frameBuffer[currentPixel] = this.OBJPalette[palette | data];
	                this.sortBuffer[linePixel] = xCoordStart;
	              }
	            }
	          }
	        }
	      }
	    }
	  }
	};
	GameBoyCore.prototype.findLowestSpriteDrawable = function (scanlineToRender, drawableRange) {
	  var address = 0xFE00;
	  var spriteCount = 0;
	  var diff = 0;
	  while (address < 0xFEA0 && spriteCount < 10) {
	    diff = scanlineToRender - this.memory[address];
	    if ((diff & drawableRange) == diff) {
	      this.OAMAddressCache[spriteCount++] = address;
	    }
	    address += 4;
	  }
	  return spriteCount;
	};
	GameBoyCore.prototype.SpriteGBCLayerRender = function (scanlineToRender) {
	  if (this.gfxSpriteShow) {                   //Are sprites enabled?
	    var OAMAddress = 0xFE00;
	    var lineAdjusted = scanlineToRender + 0x10;
	    var yoffset = 0;
	    var xcoord = 0;
	    var endX = 0;
	    var xCounter = 0;
	    var attrCode = 0;
	    var palette = 0;
	    var tile = null;
	    var data = 0;
	    var currentPixel = 0;
	    var spriteCount = 0;
	    if (this.gfxSpriteNormalHeight) {
	      for (; OAMAddress < 0xFEA0 && spriteCount < 10; OAMAddress += 4) {
	        yoffset = lineAdjusted - this.memory[OAMAddress];
	        if ((yoffset & 0x7) == yoffset) {
	          xcoord = this.memory[OAMAddress | 1] - 8;
	          endX = Math.min(160, xcoord + 8);
	          attrCode = this.memory[OAMAddress | 3];
	          palette = (attrCode & 7) << 2;
	          tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | this.memory[OAMAddress | 2]];
	          xCounter = (xcoord > 0) ? xcoord : 0;
	          xcoord -= yoffset << 3;
	          for (currentPixel = this.pixelStart + xCounter; xCounter < endX; ++xCounter, ++currentPixel) {
	            if (this.frameBuffer[currentPixel] >= 0x2000000) {
	              data = tile[xCounter - xcoord];
	              if (data > 0) {
	                this.frameBuffer[currentPixel] = this.gbcOBJPalette[palette | data];
	              }
	            }
	            else if (this.frameBuffer[currentPixel] < 0x1000000) {
	              data = tile[xCounter - xcoord];
	              if (data > 0 && attrCode < 0x80) {    //Don't optimize for attrCode, as LICM-capable JITs should optimize its checks.
	                this.frameBuffer[currentPixel] = this.gbcOBJPalette[palette | data];
	              }
	            }
	          }
	          ++spriteCount;
	        }
	      }
	    }
	    else {
	      for (; OAMAddress < 0xFEA0 && spriteCount < 10; OAMAddress += 4) {
	        yoffset = lineAdjusted - this.memory[OAMAddress];
	        if ((yoffset & 0xF) == yoffset) {
	          xcoord = this.memory[OAMAddress | 1] - 8;
	          endX = Math.min(160, xcoord + 8);
	          attrCode = this.memory[OAMAddress | 3];
	          palette = (attrCode & 7) << 2;
	          if ((attrCode & 0x40) == (0x40 & (yoffset << 3))) {
	            tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | (this.memory[OAMAddress | 0x2] & 0xFE)];
	          }
	          else {
	            tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | this.memory[OAMAddress | 0x2] | 1];
	          }
	          xCounter = (xcoord > 0) ? xcoord : 0;
	          xcoord -= (yoffset & 0x7) << 3;
	          for (currentPixel = this.pixelStart + xCounter; xCounter < endX; ++xCounter, ++currentPixel) {
	            if (this.frameBuffer[currentPixel] >= 0x2000000) {
	              data = tile[xCounter - xcoord];
	              if (data > 0) {
	                this.frameBuffer[currentPixel] = this.gbcOBJPalette[palette | data];
	              }
	            }
	            else if (this.frameBuffer[currentPixel] < 0x1000000) {
	              data = tile[xCounter - xcoord];
	              if (data > 0 && attrCode < 0x80) {    //Don't optimize for attrCode, as LICM-capable JITs should optimize its checks.
	                this.frameBuffer[currentPixel] = this.gbcOBJPalette[palette | data];
	              }
	            }
	          }
	          ++spriteCount;
	        }
	      }
	    }
	  }
	};
	//Generate only a single tile line for the GB tile cache mode:
	GameBoyCore.prototype.generateGBTileLine = function (address) {
	  var lineCopy = (this.memory[0x1 | address] << 8) | this.memory[0x9FFE & address];
	  var tileBlock = this.tileCache[(address & 0x1FF0) >> 4];
	  address = (address & 0xE) << 2;
	  tileBlock[address | 7] = ((lineCopy & 0x100) >> 7) | (lineCopy & 0x1);
	  tileBlock[address | 6] = ((lineCopy & 0x200) >> 8) | ((lineCopy & 0x2) >> 1);
	  tileBlock[address | 5] = ((lineCopy & 0x400) >> 9) | ((lineCopy & 0x4) >> 2);
	  tileBlock[address | 4] = ((lineCopy & 0x800) >> 10) | ((lineCopy & 0x8) >> 3);
	  tileBlock[address | 3] = ((lineCopy & 0x1000) >> 11) | ((lineCopy & 0x10) >> 4);
	  tileBlock[address | 2] = ((lineCopy & 0x2000) >> 12) | ((lineCopy & 0x20) >> 5);
	  tileBlock[address | 1] = ((lineCopy & 0x4000) >> 13) | ((lineCopy & 0x40) >> 6);
	  tileBlock[address] = ((lineCopy & 0x8000) >> 14) | ((lineCopy & 0x80) >> 7);
	};
	//Generate only a single tile line for the GBC tile cache mode (Bank 1):
	GameBoyCore.prototype.generateGBCTileLineBank1 = function (address) {
	  var lineCopy = (this.memory[0x1 | address] << 8) | this.memory[0x9FFE & address];
	  address &= 0x1FFE;
	  var tileBlock1 = this.tileCache[address >> 4];
	  var tileBlock2 = this.tileCache[0x200 | (address >> 4)];
	  var tileBlock3 = this.tileCache[0x400 | (address >> 4)];
	  var tileBlock4 = this.tileCache[0x600 | (address >> 4)];
	  address = (address & 0xE) << 2;
	  var addressFlipped = 0x38 - address;
	  tileBlock4[addressFlipped] = tileBlock2[address] = tileBlock3[addressFlipped | 7] = tileBlock1[address | 7] = ((lineCopy & 0x100) >> 7) | (lineCopy & 0x1);
	  tileBlock4[addressFlipped | 1] = tileBlock2[address | 1] = tileBlock3[addressFlipped | 6] = tileBlock1[address | 6] = ((lineCopy & 0x200) >> 8) | ((lineCopy & 0x2) >> 1);
	  tileBlock4[addressFlipped | 2] = tileBlock2[address | 2] = tileBlock3[addressFlipped | 5] = tileBlock1[address | 5] = ((lineCopy & 0x400) >> 9) | ((lineCopy & 0x4) >> 2);
	  tileBlock4[addressFlipped | 3] = tileBlock2[address | 3] = tileBlock3[addressFlipped | 4] = tileBlock1[address | 4] = ((lineCopy & 0x800) >> 10) | ((lineCopy & 0x8) >> 3);
	  tileBlock4[addressFlipped | 4] = tileBlock2[address | 4] = tileBlock3[addressFlipped | 3] = tileBlock1[address | 3] = ((lineCopy & 0x1000) >> 11) | ((lineCopy & 0x10) >> 4);
	  tileBlock4[addressFlipped | 5] = tileBlock2[address | 5] = tileBlock3[addressFlipped | 2] = tileBlock1[address | 2] = ((lineCopy & 0x2000) >> 12) | ((lineCopy & 0x20) >> 5);
	  tileBlock4[addressFlipped | 6] = tileBlock2[address | 6] = tileBlock3[addressFlipped | 1] = tileBlock1[address | 1] = ((lineCopy & 0x4000) >> 13) | ((lineCopy & 0x40) >> 6);
	  tileBlock4[addressFlipped | 7] = tileBlock2[address | 7] = tileBlock3[addressFlipped] = tileBlock1[address] = ((lineCopy & 0x8000) >> 14) | ((lineCopy & 0x80) >> 7);
	};
	//Generate all the flip combinations for a full GBC VRAM bank 1 tile:
	GameBoyCore.prototype.generateGBCTileBank1 = function (vramAddress) {
	  var address = vramAddress >> 4;
	  var tileBlock1 = this.tileCache[address];
	  var tileBlock2 = this.tileCache[0x200 | address];
	  var tileBlock3 = this.tileCache[0x400 | address];
	  var tileBlock4 = this.tileCache[0x600 | address];
	  var lineCopy = 0;
	  vramAddress |= 0x8000;
	  address = 0;
	  var addressFlipped = 56;
	  do {
	    lineCopy = (this.memory[0x1 | vramAddress] << 8) | this.memory[vramAddress];
	    tileBlock4[addressFlipped] = tileBlock2[address] = tileBlock3[addressFlipped | 7] = tileBlock1[address | 7] = ((lineCopy & 0x100) >> 7) | (lineCopy & 0x1);
	    tileBlock4[addressFlipped | 1] = tileBlock2[address | 1] = tileBlock3[addressFlipped | 6] = tileBlock1[address | 6] = ((lineCopy & 0x200) >> 8) | ((lineCopy & 0x2) >> 1);
	    tileBlock4[addressFlipped | 2] = tileBlock2[address | 2] = tileBlock3[addressFlipped | 5] = tileBlock1[address | 5] = ((lineCopy & 0x400) >> 9) | ((lineCopy & 0x4) >> 2);
	    tileBlock4[addressFlipped | 3] = tileBlock2[address | 3] = tileBlock3[addressFlipped | 4] = tileBlock1[address | 4] = ((lineCopy & 0x800) >> 10) | ((lineCopy & 0x8) >> 3);
	    tileBlock4[addressFlipped | 4] = tileBlock2[address | 4] = tileBlock3[addressFlipped | 3] = tileBlock1[address | 3] = ((lineCopy & 0x1000) >> 11) | ((lineCopy & 0x10) >> 4);
	    tileBlock4[addressFlipped | 5] = tileBlock2[address | 5] = tileBlock3[addressFlipped | 2] = tileBlock1[address | 2] = ((lineCopy & 0x2000) >> 12) | ((lineCopy & 0x20) >> 5);
	    tileBlock4[addressFlipped | 6] = tileBlock2[address | 6] = tileBlock3[addressFlipped | 1] = tileBlock1[address | 1] = ((lineCopy & 0x4000) >> 13) | ((lineCopy & 0x40) >> 6);
	    tileBlock4[addressFlipped | 7] = tileBlock2[address | 7] = tileBlock3[addressFlipped] = tileBlock1[address] = ((lineCopy & 0x8000) >> 14) | ((lineCopy & 0x80) >> 7);
	    address += 8;
	    addressFlipped -= 8;
	    vramAddress += 2;
	  } while (addressFlipped > -1);
	};
	//Generate only a single tile line for the GBC tile cache mode (Bank 2):
	GameBoyCore.prototype.generateGBCTileLineBank2 = function (address) {
	  var lineCopy = (this.VRAM[0x1 | address] << 8) | this.VRAM[0x1FFE & address];
	  var tileBlock1 = this.tileCache[0x800 | (address >> 4)];
	  var tileBlock2 = this.tileCache[0xA00 | (address >> 4)];
	  var tileBlock3 = this.tileCache[0xC00 | (address >> 4)];
	  var tileBlock4 = this.tileCache[0xE00 | (address >> 4)];
	  address = (address & 0xE) << 2;
	  var addressFlipped = 0x38 - address;
	  tileBlock4[addressFlipped] = tileBlock2[address] = tileBlock3[addressFlipped | 7] = tileBlock1[address | 7] = ((lineCopy & 0x100) >> 7) | (lineCopy & 0x1);
	  tileBlock4[addressFlipped | 1] = tileBlock2[address | 1] = tileBlock3[addressFlipped | 6] = tileBlock1[address | 6] = ((lineCopy & 0x200) >> 8) | ((lineCopy & 0x2) >> 1);
	  tileBlock4[addressFlipped | 2] = tileBlock2[address | 2] = tileBlock3[addressFlipped | 5] = tileBlock1[address | 5] = ((lineCopy & 0x400) >> 9) | ((lineCopy & 0x4) >> 2);
	  tileBlock4[addressFlipped | 3] = tileBlock2[address | 3] = tileBlock3[addressFlipped | 4] = tileBlock1[address | 4] = ((lineCopy & 0x800) >> 10) | ((lineCopy & 0x8) >> 3);
	  tileBlock4[addressFlipped | 4] = tileBlock2[address | 4] = tileBlock3[addressFlipped | 3] = tileBlock1[address | 3] = ((lineCopy & 0x1000) >> 11) | ((lineCopy & 0x10) >> 4);
	  tileBlock4[addressFlipped | 5] = tileBlock2[address | 5] = tileBlock3[addressFlipped | 2] = tileBlock1[address | 2] = ((lineCopy & 0x2000) >> 12) | ((lineCopy & 0x20) >> 5);
	  tileBlock4[addressFlipped | 6] = tileBlock2[address | 6] = tileBlock3[addressFlipped | 1] = tileBlock1[address | 1] = ((lineCopy & 0x4000) >> 13) | ((lineCopy & 0x40) >> 6);
	  tileBlock4[addressFlipped | 7] = tileBlock2[address | 7] = tileBlock3[addressFlipped] = tileBlock1[address] = ((lineCopy & 0x8000) >> 14) | ((lineCopy & 0x80) >> 7);
	};
	//Generate all the flip combinations for a full GBC VRAM bank 2 tile:
	GameBoyCore.prototype.generateGBCTileBank2 = function (vramAddress) {
	  var address = vramAddress >> 4;
	  var tileBlock1 = this.tileCache[0x800 | address];
	  var tileBlock2 = this.tileCache[0xA00 | address];
	  var tileBlock3 = this.tileCache[0xC00 | address];
	  var tileBlock4 = this.tileCache[0xE00 | address];
	  var lineCopy = 0;
	  address = 0;
	  var addressFlipped = 56;
	  do {
	    lineCopy = (this.VRAM[0x1 | vramAddress] << 8) | this.VRAM[vramAddress];
	    tileBlock4[addressFlipped] = tileBlock2[address] = tileBlock3[addressFlipped | 7] = tileBlock1[address | 7] = ((lineCopy & 0x100) >> 7) | (lineCopy & 0x1);
	    tileBlock4[addressFlipped | 1] = tileBlock2[address | 1] = tileBlock3[addressFlipped | 6] = tileBlock1[address | 6] = ((lineCopy & 0x200) >> 8) | ((lineCopy & 0x2) >> 1);
	    tileBlock4[addressFlipped | 2] = tileBlock2[address | 2] = tileBlock3[addressFlipped | 5] = tileBlock1[address | 5] = ((lineCopy & 0x400) >> 9) | ((lineCopy & 0x4) >> 2);
	    tileBlock4[addressFlipped | 3] = tileBlock2[address | 3] = tileBlock3[addressFlipped | 4] = tileBlock1[address | 4] = ((lineCopy & 0x800) >> 10) | ((lineCopy & 0x8) >> 3);
	    tileBlock4[addressFlipped | 4] = tileBlock2[address | 4] = tileBlock3[addressFlipped | 3] = tileBlock1[address | 3] = ((lineCopy & 0x1000) >> 11) | ((lineCopy & 0x10) >> 4);
	    tileBlock4[addressFlipped | 5] = tileBlock2[address | 5] = tileBlock3[addressFlipped | 2] = tileBlock1[address | 2] = ((lineCopy & 0x2000) >> 12) | ((lineCopy & 0x20) >> 5);
	    tileBlock4[addressFlipped | 6] = tileBlock2[address | 6] = tileBlock3[addressFlipped | 1] = tileBlock1[address | 1] = ((lineCopy & 0x4000) >> 13) | ((lineCopy & 0x40) >> 6);
	    tileBlock4[addressFlipped | 7] = tileBlock2[address | 7] = tileBlock3[addressFlipped] = tileBlock1[address] = ((lineCopy & 0x8000) >> 14) | ((lineCopy & 0x80) >> 7);
	    address += 8;
	    addressFlipped -= 8;
	    vramAddress += 2;
	  } while (addressFlipped > -1);
	};
	//Generate only a single tile line for the GB tile cache mode (OAM accessible range):
	GameBoyCore.prototype.generateGBOAMTileLine = function (address) {
	  var lineCopy = (this.memory[0x1 | address] << 8) | this.memory[0x9FFE & address];
	  address &= 0x1FFE;
	  var tileBlock1 = this.tileCache[address >> 4];
	  var tileBlock2 = this.tileCache[0x200 | (address >> 4)];
	  var tileBlock3 = this.tileCache[0x400 | (address >> 4)];
	  var tileBlock4 = this.tileCache[0x600 | (address >> 4)];
	  address = (address & 0xE) << 2;
	  var addressFlipped = 0x38 - address;
	  tileBlock4[addressFlipped] = tileBlock2[address] = tileBlock3[addressFlipped | 7] = tileBlock1[address | 7] = ((lineCopy & 0x100) >> 7) | (lineCopy & 0x1);
	  tileBlock4[addressFlipped | 1] = tileBlock2[address | 1] = tileBlock3[addressFlipped | 6] = tileBlock1[address | 6] = ((lineCopy & 0x200) >> 8) | ((lineCopy & 0x2) >> 1);
	  tileBlock4[addressFlipped | 2] = tileBlock2[address | 2] = tileBlock3[addressFlipped | 5] = tileBlock1[address | 5] = ((lineCopy & 0x400) >> 9) | ((lineCopy & 0x4) >> 2);
	  tileBlock4[addressFlipped | 3] = tileBlock2[address | 3] = tileBlock3[addressFlipped | 4] = tileBlock1[address | 4] = ((lineCopy & 0x800) >> 10) | ((lineCopy & 0x8) >> 3);
	  tileBlock4[addressFlipped | 4] = tileBlock2[address | 4] = tileBlock3[addressFlipped | 3] = tileBlock1[address | 3] = ((lineCopy & 0x1000) >> 11) | ((lineCopy & 0x10) >> 4);
	  tileBlock4[addressFlipped | 5] = tileBlock2[address | 5] = tileBlock3[addressFlipped | 2] = tileBlock1[address | 2] = ((lineCopy & 0x2000) >> 12) | ((lineCopy & 0x20) >> 5);
	  tileBlock4[addressFlipped | 6] = tileBlock2[address | 6] = tileBlock3[addressFlipped | 1] = tileBlock1[address | 1] = ((lineCopy & 0x4000) >> 13) | ((lineCopy & 0x40) >> 6);
	  tileBlock4[addressFlipped | 7] = tileBlock2[address | 7] = tileBlock3[addressFlipped] = tileBlock1[address] = ((lineCopy & 0x8000) >> 14) | ((lineCopy & 0x80) >> 7);
	};
	GameBoyCore.prototype.graphicsJIT = function () {
	  if (this.LCDisOn) {
	    this.totalLinesPassed = 0;      //Mark frame for ensuring a JIT pass for the next framebuffer output.
	    this.graphicsJITScanlineGroup();
	  }
	};
	GameBoyCore.prototype.graphicsJITVBlank = function () {
	  //JIT the graphics to v-blank framing:
	  this.totalLinesPassed += this.queuedScanLines;
	  this.graphicsJITScanlineGroup();
	};
	GameBoyCore.prototype.graphicsJITScanlineGroup = function () {
	  //Normal rendering JIT, where we try to do groups of scanlines at once:
	  while (this.queuedScanLines > 0) {
	    this.renderScanLine(this.lastUnrenderedLine);
	    if (this.lastUnrenderedLine < 143) {
	      ++this.lastUnrenderedLine;
	    }
	    else {
	      this.lastUnrenderedLine = 0;
	    }
	    --this.queuedScanLines;
	  }
	};
	GameBoyCore.prototype.incrementScanLineQueue = function () {
	  if (this.queuedScanLines < 144) {
	    ++this.queuedScanLines;
	  }
	  else {
	    this.currentX = 0;
	    this.midScanlineOffset = -1;
	    if (this.lastUnrenderedLine < 143) {
	      ++this.lastUnrenderedLine;
	    }
	    else {
	      this.lastUnrenderedLine = 0;
	    }
	  }
	};
	GameBoyCore.prototype.midScanLineJIT = function () {
	  this.graphicsJIT();
	  this.renderMidScanLine();
	};
	//Check for the highest priority IRQ to fire:
	GameBoyCore.prototype.launchIRQ = function () {
	  var bitShift = 0;
	  var testbit = 1;
	  do {
	    //Check to see if an interrupt is enabled AND requested.
	    if ((testbit & this.IRQLineMatched) == testbit) {
	      this.IME = false;           //Reset the interrupt enabling.
	      this.interruptsRequested -= testbit;  //Reset the interrupt request.
	      this.IRQLineMatched = 0;        //Reset the IRQ assertion.
	      //Interrupts have a certain clock cycle length:
	      this.CPUTicks = 20;
	      //Set the stack pointer to the current program counter value:
	      this.stackPointer = (this.stackPointer - 1) & 0xFFFF;
	      this.memoryWriter[this.stackPointer](this, this.stackPointer, this.programCounter >> 8);
	      this.stackPointer = (this.stackPointer - 1) & 0xFFFF;
	      this.memoryWriter[this.stackPointer](this, this.stackPointer, this.programCounter & 0xFF);
	      //Set the program counter to the interrupt's address:
	      this.programCounter = 0x40 | (bitShift << 3);
	      //Clock the core for mid-instruction updates:
	      this.updateCore();
	      return;                 //We only want the highest priority interrupt.
	    }
	    testbit = 1 << ++bitShift;
	  } while (bitShift < 5);
	};
	/*
	  Check for IRQs to be fired while not in HALT:
	*/
	GameBoyCore.prototype.checkIRQMatching = function () {
	  if (this.IME) {
	    this.IRQLineMatched = this.interruptsEnabled & this.interruptsRequested & 0x1F;
	  }
	};
	/*
	  Handle the HALT opcode by predicting all IRQ cases correctly,
	  then selecting the next closest IRQ firing from the prediction to
	  clock up to. This prevents hacky looping that doesn't predict, but
	  instead just clocks through the core update procedure by one which
	  is very slow. Not many emulators do this because they have to cover
	  all the IRQ prediction cases and they usually get them wrong.
	*/
	GameBoyCore.prototype.calculateHALTPeriod = function () {
	  //Initialize our variables and start our prediction:
	  var currentClocks;
	  if (!this.halt) {
	    this.halt = true;
	    currentClocks = -1;
	    var temp_var = 0;
	    if (this.LCDisOn) {
	      //If the LCD is enabled, then predict the LCD IRQs enabled:
	      if ((this.interruptsEnabled & 0x1) == 0x1) {
	        currentClocks = ((456 * (((this.modeSTAT == 1) ? 298 : 144) - this.actualScanLine)) - this.LCDTicks) << this.doubleSpeedShifter;
	      }
	      if ((this.interruptsEnabled & 0x2) == 0x2) {
	        if (this.mode0TriggerSTAT) {
	          temp_var = (this.clocksUntilMode0() - this.LCDTicks) << this.doubleSpeedShifter;
	          if (temp_var <= currentClocks || currentClocks == -1) {
	            currentClocks = temp_var;
	          }
	        }
	        if (this.mode1TriggerSTAT && (this.interruptsEnabled & 0x1) == 0) {
	          temp_var = ((456 * (((this.modeSTAT == 1) ? 298 : 144) - this.actualScanLine)) - this.LCDTicks) << this.doubleSpeedShifter;
	          if (temp_var <= currentClocks || currentClocks == -1) {
	            currentClocks = temp_var;
	          }
	        }
	        if (this.mode2TriggerSTAT) {
	          temp_var = (((this.actualScanLine >= 143) ? (456 * (154 - this.actualScanLine)) : 456) - this.LCDTicks) << this.doubleSpeedShifter;
	          if (temp_var <= currentClocks || currentClocks == -1) {
	            currentClocks = temp_var;
	          }
	        }
	        if (this.LYCMatchTriggerSTAT && this.memory[0xFF45] <= 153) {
	          temp_var = (this.clocksUntilLYCMatch() - this.LCDTicks) << this.doubleSpeedShifter;
	          if (temp_var <= currentClocks || currentClocks == -1) {
	            currentClocks = temp_var;
	          }
	        }
	      }
	    }
	    if (this.TIMAEnabled && (this.interruptsEnabled & 0x4) == 0x4) {
	      //CPU timer IRQ prediction:
	      temp_var = ((0x100 - this.memory[0xFF05]) * this.TACClocker) - this.timerTicks;
	      if (temp_var <= currentClocks || currentClocks == -1) {
	        currentClocks = temp_var;
	      }
	    }
	    if (this.serialTimer > 0 && (this.interruptsEnabled & 0x8) == 0x8) {
	      //Serial IRQ prediction:
	      if (this.serialTimer <= currentClocks || currentClocks == -1) {
	        currentClocks = this.serialTimer;
	      }
	    }
	  }
	  else {
	    currentClocks = this.remainingClocks;
	  }
	  var maxClocks = (this.CPUCyclesTotal - this.emulatorTicks) << this.doubleSpeedShifter;
	  if (currentClocks >= 0) {
	    if (currentClocks <= maxClocks) {
	      //Exit out of HALT normally:
	      this.CPUTicks = Math.max(currentClocks, this.CPUTicks);
	      this.updateCoreFull();
	      this.halt = false;
	      this.CPUTicks = 0;
	    }
	    else {
	      //Still in HALT, clock only up to the clocks specified per iteration:
	      this.CPUTicks = Math.max(maxClocks, this.CPUTicks);
	      this.remainingClocks = currentClocks - this.CPUTicks;
	    }
	  }
	  else {
	    //Still in HALT, clock only up to the clocks specified per iteration:
	    //Will stay in HALT forever (Stuck in HALT forever), but the APU and LCD are still clocked, so don't pause:
	    this.CPUTicks += maxClocks;
	  }
	};
	//Memory Reading:
	GameBoyCore.prototype.memoryRead = function (address) {
	  //Act as a wrapper for reading the returns from the compiled jumps to memory.
	  return this.memoryReader[address](this, address); //This seems to be faster than the usual if/else.
	};
	GameBoyCore.prototype.memoryHighRead = function (address) {
	  //Act as a wrapper for reading the returns from the compiled jumps to memory.
	  return this.memoryHighReader[address](this, address); //This seems to be faster than the usual if/else.
	};
	GameBoyCore.prototype.memoryReadJumpCompile = function () {
	  //Faster in some browsers, since we are doing less conditionals overall by implementing them in advance.
	  for (var index = 0x0000; index <= 0xFFFF; index++) {
	    if (index < 0x4000) {
	      this.memoryReader[index] = this.memoryReadNormal;
	    }
	    else if (index < 0x8000) {
	      this.memoryReader[index] = this.memoryReadROM;
	    }
	    else if (index < 0x9800) {
	      this.memoryReader[index] = (this.cGBC) ? this.VRAMDATAReadCGBCPU : this.VRAMDATAReadDMGCPU;
	    }
	    else if (index < 0xA000) {
	      this.memoryReader[index] = (this.cGBC) ? this.VRAMCHRReadCGBCPU : this.VRAMCHRReadDMGCPU;
	    }
	    else if (index >= 0xA000 && index < 0xC000) {
	      if ((this.numRAMBanks == 1 / 16 && index < 0xA200) || this.numRAMBanks >= 1) {
	        if (this.cMBC7) {
	          this.memoryReader[index] = this.memoryReadMBC7;
	        }
	        else if (!this.cMBC3) {
	          this.memoryReader[index] = this.memoryReadMBC;
	        }
	        else {
	          //MBC3 RTC + RAM:
	          this.memoryReader[index] = this.memoryReadMBC3;
	        }
	      }
	      else {
	        this.memoryReader[index] = this.memoryReadBAD;
	      }
	    }
	    else if (index >= 0xC000 && index < 0xE000) {
	      if (!this.cGBC || index < 0xD000) {
	        this.memoryReader[index] = this.memoryReadNormal;
	      }
	      else {
	        this.memoryReader[index] = this.memoryReadGBCMemory;
	      }
	    }
	    else if (index >= 0xE000 && index < 0xFE00) {
	      if (!this.cGBC || index < 0xF000) {
	        this.memoryReader[index] = this.memoryReadECHONormal;
	      }
	      else {
	        this.memoryReader[index] = this.memoryReadECHOGBCMemory;
	      }
	    }
	    else if (index < 0xFEA0) {
	      this.memoryReader[index] = this.memoryReadOAM;
	    }
	    else if (this.cGBC && index >= 0xFEA0 && index < 0xFF00) {
	      this.memoryReader[index] = this.memoryReadNormal;
	    }
	    else if (index >= 0xFF00) {
	      switch (index) {
	        case 0xFF00:
	          //JOYPAD:
	          this.memoryHighReader[0] = this.memoryReader[0xFF00] = function (parentObj, address) {
	            return 0xC0 | parentObj.memory[0xFF00]; //Top nibble returns as set.
	          };
	          break;
	        case 0xFF01:
	          //SB
	          this.memoryHighReader[0x01] = this.memoryReader[0xFF01] = function (parentObj, address) {
	            return (parentObj.memory[0xFF02] < 0x80) ? parentObj.memory[0xFF01] : 0xFF;
	          };
	          break;
	        case 0xFF02:
	          //SC
	          if (this.cGBC) {
	            this.memoryHighReader[0x02] = this.memoryReader[0xFF02] = function (parentObj, address) {
	              return ((parentObj.serialTimer <= 0) ? 0x7C : 0xFC) | parentObj.memory[0xFF02];
	            };
	          }
	          else {
	            this.memoryHighReader[0x02] = this.memoryReader[0xFF02] = function (parentObj, address) {
	              return ((parentObj.serialTimer <= 0) ? 0x7E : 0xFE) | parentObj.memory[0xFF02];
	            };
	          }
	          break;
	        case 0xFF03:
	          this.memoryHighReader[0x03] = this.memoryReader[0xFF03] = this.memoryReadBAD;
	          break;
	        case 0xFF04:
	          //DIV
	          this.memoryHighReader[0x04] = this.memoryReader[0xFF04] = function (parentObj, address) {
	            parentObj.memory[0xFF04] = (parentObj.memory[0xFF04] + (parentObj.DIVTicks >> 8)) & 0xFF;
	            parentObj.DIVTicks &= 0xFF;
	            return parentObj.memory[0xFF04];
	            
	          };
	          break;
	        case 0xFF05:
	        case 0xFF06:
	          this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;
	          this.memoryReader[index] = this.memoryReadNormal;
	          break;
	        case 0xFF07:
	          this.memoryHighReader[0x07] = this.memoryReader[0xFF07] = function (parentObj, address) {
	            return 0xF8 | parentObj.memory[0xFF07];
	          };
	          break;
	        case 0xFF08:
	        case 0xFF09:
	        case 0xFF0A:
	        case 0xFF0B:
	        case 0xFF0C:
	        case 0xFF0D:
	        case 0xFF0E:
	          this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadBAD;
	          break;
	        case 0xFF0F:
	          //IF
	          this.memoryHighReader[0x0F] = this.memoryReader[0xFF0F] = function (parentObj, address) {
	            return 0xE0 | parentObj.interruptsRequested;
	          };
	          break;
	        case 0xFF10:
	          this.memoryHighReader[0x10] = this.memoryReader[0xFF10] = function (parentObj, address) {
	            return 0x80 | parentObj.memory[0xFF10];
	          };
	          break;
	        case 0xFF11:
	          this.memoryHighReader[0x11] = this.memoryReader[0xFF11] = function (parentObj, address) {
	            return 0x3F | parentObj.memory[0xFF11];
	          };
	          break;
	        case 0xFF12:
	          this.memoryHighReader[0x12] = this.memoryHighReadNormal;
	          this.memoryReader[0xFF12] = this.memoryReadNormal;
	          break;
	        case 0xFF13:
	          this.memoryHighReader[0x13] = this.memoryReader[0xFF13] = this.memoryReadBAD;
	          break;
	        case 0xFF14:
	          this.memoryHighReader[0x14] = this.memoryReader[0xFF14] = function (parentObj, address) {
	            return 0xBF | parentObj.memory[0xFF14];
	          };
	          break;
	        case 0xFF15:
	          this.memoryHighReader[0x15] = this.memoryReadBAD;
	          this.memoryReader[0xFF15] = this.memoryReadBAD;
	          break;
	        case 0xFF16:
	          this.memoryHighReader[0x16] = this.memoryReader[0xFF16] = function (parentObj, address) {
	            return 0x3F | parentObj.memory[0xFF16];
	          };
	          break;
	        case 0xFF17:
	          this.memoryHighReader[0x17] = this.memoryHighReadNormal;
	          this.memoryReader[0xFF17] = this.memoryReadNormal;
	          break;
	        case 0xFF18:
	          this.memoryHighReader[0x18] = this.memoryReader[0xFF18] = this.memoryReadBAD;
	          break;
	        case 0xFF19:
	          this.memoryHighReader[0x19] = this.memoryReader[0xFF19] = function (parentObj, address) {
	            return 0xBF | parentObj.memory[0xFF19];
	          };
	          break;
	        case 0xFF1A:
	          this.memoryHighReader[0x1A] = this.memoryReader[0xFF1A] = function (parentObj, address) {
	            return 0x7F | parentObj.memory[0xFF1A];
	          };
	          break;
	        case 0xFF1B:
	          this.memoryHighReader[0x1B] = this.memoryReader[0xFF1B] = this.memoryReadBAD;
	          break;
	        case 0xFF1C:
	          this.memoryHighReader[0x1C] = this.memoryReader[0xFF1C] = function (parentObj, address) {
	            return 0x9F | parentObj.memory[0xFF1C];
	          };
	          break;
	        case 0xFF1D:
	          this.memoryHighReader[0x1D] = this.memoryReader[0xFF1D] = this.memoryReadBAD;
	          break;
	        case 0xFF1E:
	          this.memoryHighReader[0x1E] = this.memoryReader[0xFF1E] = function (parentObj, address) {
	            return 0xBF | parentObj.memory[0xFF1E];
	          };
	          break;
	        case 0xFF1F:
	        case 0xFF20:
	          this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadBAD;
	          break;
	        case 0xFF21:
	        case 0xFF22:
	          this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;
	          this.memoryReader[index] = this.memoryReadNormal;
	          break;
	        case 0xFF23:
	          this.memoryHighReader[0x23] = this.memoryReader[0xFF23] = function (parentObj, address) {
	            return 0xBF | parentObj.memory[0xFF23];
	          };
	          break;
	        case 0xFF24:
	        case 0xFF25:
	          this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;
	          this.memoryReader[index] = this.memoryReadNormal;
	          break;
	        case 0xFF26:
	          this.memoryHighReader[0x26] = this.memoryReader[0xFF26] = function (parentObj, address) {
	            parentObj.audioJIT();
	            return 0x70 | parentObj.memory[0xFF26];
	          };
	          break;
	        case 0xFF27:
	        case 0xFF28:
	        case 0xFF29:
	        case 0xFF2A:
	        case 0xFF2B:
	        case 0xFF2C:
	        case 0xFF2D:
	        case 0xFF2E:
	        case 0xFF2F:
	          this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadBAD;
	          break;
	        case 0xFF30:
	        case 0xFF31:
	        case 0xFF32:
	        case 0xFF33:
	        case 0xFF34:
	        case 0xFF35:
	        case 0xFF36:
	        case 0xFF37:
	        case 0xFF38:
	        case 0xFF39:
	        case 0xFF3A:
	        case 0xFF3B:
	        case 0xFF3C:
	        case 0xFF3D:
	        case 0xFF3E:
	        case 0xFF3F:
	          this.memoryReader[index] = function (parentObj, address) {
	            return (parentObj.channel3canPlay) ? parentObj.memory[0xFF00 | (parentObj.channel3lastSampleLookup >> 1)] : parentObj.memory[address];
	          };
	          this.memoryHighReader[index & 0xFF] = function (parentObj, address) {
	            return (parentObj.channel3canPlay) ? parentObj.memory[0xFF00 | (parentObj.channel3lastSampleLookup >> 1)] : parentObj.memory[0xFF00 | address];
	          };
	          break;
	        case 0xFF40:
	          this.memoryHighReader[0x40] = this.memoryHighReadNormal;
	          this.memoryReader[0xFF40] = this.memoryReadNormal;
	          break;
	        case 0xFF41:
	          this.memoryHighReader[0x41] = this.memoryReader[0xFF41] = function (parentObj, address) {
	            return 0x80 | parentObj.memory[0xFF41] | parentObj.modeSTAT;
	          };
	          break;
	        case 0xFF42:
	          this.memoryHighReader[0x42] = this.memoryReader[0xFF42] = function (parentObj, address) {
	            return parentObj.backgroundY;
	          };
	          break;
	        case 0xFF43:
	          this.memoryHighReader[0x43] = this.memoryReader[0xFF43] = function (parentObj, address) {
	            return parentObj.backgroundX;
	          };
	          break;
	        case 0xFF44:
	          this.memoryHighReader[0x44] = this.memoryReader[0xFF44] = function (parentObj, address) {
	            return ((parentObj.LCDisOn) ? parentObj.memory[0xFF44] : 0);
	          };
	          break;
	        case 0xFF45:
	        case 0xFF46:
	        case 0xFF47:
	        case 0xFF48:
	        case 0xFF49:
	          this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;
	          this.memoryReader[index] = this.memoryReadNormal;
	          break;
	        case 0xFF4A:
	          //WY
	          this.memoryHighReader[0x4A] = this.memoryReader[0xFF4A] = function (parentObj, address) {
	            return parentObj.windowY;
	          };
	          break;
	        case 0xFF4B:
	          this.memoryHighReader[0x4B] = this.memoryHighReadNormal;
	          this.memoryReader[0xFF4B] = this.memoryReadNormal;
	          break;
	        case 0xFF4C:
	          this.memoryHighReader[0x4C] = this.memoryReader[0xFF4C] = this.memoryReadBAD;
	          break;
	        case 0xFF4D:
	          this.memoryHighReader[0x4D] = this.memoryHighReadNormal;
	          this.memoryReader[0xFF4D] = this.memoryReadNormal;
	          break;
	        case 0xFF4E:
	          this.memoryHighReader[0x4E] = this.memoryReader[0xFF4E] = this.memoryReadBAD;
	          break;
	        case 0xFF4F:
	          this.memoryHighReader[0x4F] = this.memoryReader[0xFF4F] = function (parentObj, address) {
	            return parentObj.currVRAMBank;
	          };
	          break;
	        case 0xFF50:
	        case 0xFF51:
	        case 0xFF52:
	        case 0xFF53:
	        case 0xFF54:
	          this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;
	          this.memoryReader[index] = this.memoryReadNormal;
	          break;
	        case 0xFF55:
	          if (this.cGBC) {
	            this.memoryHighReader[0x55] = this.memoryReader[0xFF55] = function (parentObj, address) {
	              if (!parentObj.LCDisOn && parentObj.hdmaRunning) {  //Undocumented behavior alert: HDMA becomes GDMA when LCD is off (Worms Armageddon Fix).
	                //DMA
	                parentObj.DMAWrite((parentObj.memory[0xFF55] & 0x7F) + 1);
	                parentObj.memory[0xFF55] = 0xFF;  //Transfer completed.
	                parentObj.hdmaRunning = false;
	              }
	              return parentObj.memory[0xFF55];
	            };
	          }
	          else {
	            this.memoryReader[0xFF55] = this.memoryReadNormal;
	            this.memoryHighReader[0x55] = this.memoryHighReadNormal;
	          }
	          break;
	        case 0xFF56:
	          if (this.cGBC) {
	            this.memoryHighReader[0x56] = this.memoryReader[0xFF56] = function (parentObj, address) {
	              //Return IR "not connected" status:
	              return 0x3C | ((parentObj.memory[0xFF56] >= 0xC0) ? (0x2 | (parentObj.memory[0xFF56] & 0xC1)) : (parentObj.memory[0xFF56] & 0xC3));
	            };
	          }
	          else {
	            this.memoryReader[0xFF56] = this.memoryReadNormal;
	            this.memoryHighReader[0x56] = this.memoryHighReadNormal;
	          }
	          break;
	        case 0xFF57:
	        case 0xFF58:
	        case 0xFF59:
	        case 0xFF5A:
	        case 0xFF5B:
	        case 0xFF5C:
	        case 0xFF5D:
	        case 0xFF5E:
	        case 0xFF5F:
	        case 0xFF60:
	        case 0xFF61:
	        case 0xFF62:
	        case 0xFF63:
	        case 0xFF64:
	        case 0xFF65:
	        case 0xFF66:
	        case 0xFF67:
	          this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadBAD;
	          break;
	        case 0xFF68:
	        case 0xFF69:
	        case 0xFF6A:
	        case 0xFF6B:
	          this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;
	          this.memoryReader[index] = this.memoryReadNormal;
	          break;
	        case 0xFF6C:
	          if (this.cGBC) {
	            this.memoryHighReader[0x6C] = this.memoryReader[0xFF6C] = function (parentObj, address) {
	              return 0xFE | parentObj.memory[0xFF6C];
	            };
	          }
	          else {
	            this.memoryHighReader[0x6C] = this.memoryReader[0xFF6C] = this.memoryReadBAD;
	          }
	          break;
	        case 0xFF6D:
	        case 0xFF6E:
	        case 0xFF6F:
	          this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadBAD;
	          break;
	        case 0xFF70:
	          if (this.cGBC) {
	            //SVBK
	            this.memoryHighReader[0x70] = this.memoryReader[0xFF70] = function (parentObj, address) {
	              return 0x40 | parentObj.memory[0xFF70];
	            };
	          }
	          else {
	            this.memoryHighReader[0x70] = this.memoryReader[0xFF70] = this.memoryReadBAD;
	          }
	          break;
	        case 0xFF71:
	          this.memoryHighReader[0x71] = this.memoryReader[0xFF71] = this.memoryReadBAD;
	          break;
	        case 0xFF72:
	        case 0xFF73:
	          this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadNormal;
	          break;
	        case 0xFF74:
	          if (this.cGBC) {
	            this.memoryHighReader[0x74] = this.memoryReader[0xFF74] = this.memoryReadNormal;
	          }
	          else {
	            this.memoryHighReader[0x74] = this.memoryReader[0xFF74] = this.memoryReadBAD;
	          }
	          break;
	        case 0xFF75:
	          this.memoryHighReader[0x75] = this.memoryReader[0xFF75] = function (parentObj, address) {
	            return 0x8F | parentObj.memory[0xFF75];
	          };
	          break;
	        case 0xFF76:
	        case 0xFF77:
	          this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = function (parentObj, address) {
	            return 0;
	          };
	          break;
	        case 0xFF78:
	        case 0xFF79:
	        case 0xFF7A:
	        case 0xFF7B:
	        case 0xFF7C:
	        case 0xFF7D:
	        case 0xFF7E:
	        case 0xFF7F:
	          this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadBAD;
	          break;
	        case 0xFFFF:
	          //IE
	          this.memoryHighReader[0xFF] = this.memoryReader[0xFFFF] = function (parentObj, address) {
	            return parentObj.interruptsEnabled;
	          };
	          break;
	        default:
	          this.memoryReader[index] = this.memoryReadNormal;
	          this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;
	      }
	    }
	    else {
	      this.memoryReader[index] = this.memoryReadBAD;
	    }
	  }
	};
	GameBoyCore.prototype.memoryReadNormal = function (parentObj, address) {
	  return parentObj.memory[address];
	};
	GameBoyCore.prototype.memoryHighReadNormal = function (parentObj, address) {
	  return parentObj.memory[0xFF00 | address];
	};
	GameBoyCore.prototype.memoryReadROM = function (parentObj, address) {
	  return parentObj.ROM[parentObj.currentROMBank + address];
	};
	GameBoyCore.prototype.memoryReadMBC = function (parentObj, address) {
	  //Switchable RAM
	  if (parentObj.MBCRAMBanksEnabled || this.opts.overrideMbc) {
	    return parentObj.MBCRam[address + parentObj.currMBCRAMBankPosition];
	  }
	  //debug("Reading from disabled RAM.", 1);
	  return 0xFF;
	};
	GameBoyCore.prototype.memoryReadMBC7 = function (parentObj, address) {
	  //Switchable RAM
	  if (parentObj.MBCRAMBanksEnabled || this.opts.overrideMbc) {
	    switch (address) {
	      case 0xA000:
	      case 0xA060:
	      case 0xA070:
	        return 0;
	      case 0xA080:
	        //TODO: Gyro Control Register
	        return 0;
	      case 0xA050:
	        //Y High Byte
	        return parentObj.highY;
	      case 0xA040:
	        //Y Low Byte
	        return parentObj.lowY;
	      case 0xA030:
	        //X High Byte
	        return parentObj.highX;
	      case 0xA020:
	        //X Low Byte:
	        return parentObj.lowX;
	      default:
	        return parentObj.MBCRam[address + parentObj.currMBCRAMBankPosition];
	    }
	  }
	  //debug("Reading from disabled RAM.", 1);
	  return 0xFF;
	};
	GameBoyCore.prototype.memoryReadMBC3 = function (parentObj, address) {
	  //Switchable RAM
	  if (parentObj.MBCRAMBanksEnabled || this.opts.overrideMbc) {
	    switch (parentObj.currMBCRAMBank) {
	      case 0x00:
	      case 0x01:
	      case 0x02:
	      case 0x03:
	        return parentObj.MBCRam[address + parentObj.currMBCRAMBankPosition];
	      case 0x08:
	        return parentObj.latchedSeconds;
	      case 0x09:
	        return parentObj.latchedMinutes;
	      case 0x0A:
	        return parentObj.latchedHours;
	      case 0x0B:
	        return parentObj.latchedLDays;
	      case 0x0C:
	        return (((parentObj.RTCDayOverFlow) ? 0x80 : 0) + ((parentObj.RTCHALT) ? 0x40 : 0)) + parentObj.latchedHDays;
	    }
	  }
	  //debug("Reading from invalid or disabled RAM.", 1);
	  return 0xFF;
	};
	GameBoyCore.prototype.memoryReadGBCMemory = function (parentObj, address) {
	  return parentObj.GBCMemory[address + parentObj.gbcRamBankPosition];
	};
	GameBoyCore.prototype.memoryReadOAM = function (parentObj, address) {
	  return (parentObj.modeSTAT > 1) ?  0xFF : parentObj.memory[address];
	};
	GameBoyCore.prototype.memoryReadECHOGBCMemory = function (parentObj, address) {
	  return parentObj.GBCMemory[address + parentObj.gbcRamBankPositionECHO];
	};
	GameBoyCore.prototype.memoryReadECHONormal = function (parentObj, address) {
	  return parentObj.memory[address - 0x2000];
	};
	GameBoyCore.prototype.memoryReadBAD = function (parentObj, address) {
	  return 0xFF;
	};
	GameBoyCore.prototype.VRAMDATAReadCGBCPU = function (parentObj, address) {
	  //CPU Side Reading The VRAM (Optimized for GameBoy Color)
	  return (parentObj.modeSTAT > 2) ? 0xFF : ((parentObj.currVRAMBank == 0) ? parentObj.memory[address] : parentObj.VRAM[address & 0x1FFF]);
	};
	GameBoyCore.prototype.VRAMDATAReadDMGCPU = function (parentObj, address) {
	  //CPU Side Reading The VRAM (Optimized for classic GameBoy)
	  return (parentObj.modeSTAT > 2) ? 0xFF : parentObj.memory[address];
	};
	GameBoyCore.prototype.VRAMCHRReadCGBCPU = function (parentObj, address) {
	  //CPU Side Reading the Character Data Map:
	  return (parentObj.modeSTAT > 2) ? 0xFF : parentObj.BGCHRCurrentBank[address & 0x7FF];
	};
	GameBoyCore.prototype.VRAMCHRReadDMGCPU = function (parentObj, address) {
	  //CPU Side Reading the Character Data Map:
	  return (parentObj.modeSTAT > 2) ? 0xFF : parentObj.BGCHRBank1[address & 0x7FF];
	};
	GameBoyCore.prototype.setCurrentMBC1ROMBank = function () {
	  //Read the cartridge ROM data from RAM memory:
	  switch (this.ROMBank1offs) {
	    case 0x00:
	    case 0x20:
	    case 0x40:
	    case 0x60:
	      //Bank calls for 0x00, 0x20, 0x40, and 0x60 are really for 0x01, 0x21, 0x41, and 0x61.
	      this.currentROMBank = (this.ROMBank1offs % this.ROMBankEdge) << 14;
	      break;
	    default:
	      this.currentROMBank = ((this.ROMBank1offs % this.ROMBankEdge) - 1) << 14;
	  }
	};
	GameBoyCore.prototype.setCurrentMBC2AND3ROMBank = function () {
	  //Read the cartridge ROM data from RAM memory:
	  //Only map bank 0 to bank 1 here (MBC2 is like MBC1, but can only do 16 banks, so only the bank 0 quirk appears for MBC2):
	  this.currentROMBank = Math.max((this.ROMBank1offs % this.ROMBankEdge) - 1, 0) << 14;
	};
	GameBoyCore.prototype.setCurrentMBC5ROMBank = function () {
	  //Read the cartridge ROM data from RAM memory:
	  this.currentROMBank = ((this.ROMBank1offs % this.ROMBankEdge) - 1) << 14;
	};
	//Memory Writing:
	GameBoyCore.prototype.memoryWrite = function (address, data) {
	  //Act as a wrapper for writing by compiled jumps to specific memory writing functions.
	  this.memoryWriter[address](this, address, data);
	};
	//0xFFXX fast path:
	GameBoyCore.prototype.memoryHighWrite = function (address, data) {
	  //Act as a wrapper for writing by compiled jumps to specific memory writing functions.
	  this.memoryHighWriter[address](this, address, data);
	};
	GameBoyCore.prototype.memoryWriteJumpCompile = function () {
	  //Faster in some browsers, since we are doing less conditionals overall by implementing them in advance.
	  for (var index = 0x0000; index <= 0xFFFF; index++) {
	    if (index < 0x8000) {
	      if (this.cMBC1) {
	        if (index < 0x2000) {
	          this.memoryWriter[index] = this.MBCWriteEnable;
	        }
	        else if (index < 0x4000) {
	          this.memoryWriter[index] = this.MBC1WriteROMBank;
	        }
	        else if (index < 0x6000) {
	          this.memoryWriter[index] = this.MBC1WriteRAMBank;
	        }
	        else {
	          this.memoryWriter[index] = this.MBC1WriteType;
	        }
	      }
	      else if (this.cMBC2) {
	        if (index < 0x1000) {
	          this.memoryWriter[index] = this.MBCWriteEnable;
	        }
	        else if (index >= 0x2100 && index < 0x2200) {
	          this.memoryWriter[index] = this.MBC2WriteROMBank;
	        }
	        else {
	          this.memoryWriter[index] = this.cartIgnoreWrite;
	        }
	      }
	      else if (this.cMBC3) {
	        if (index < 0x2000) {
	          this.memoryWriter[index] = this.MBCWriteEnable;
	        }
	        else if (index < 0x4000) {
	          this.memoryWriter[index] = this.MBC3WriteROMBank;
	        }
	        else if (index < 0x6000) {
	          this.memoryWriter[index] = this.MBC3WriteRAMBank;
	        }
	        else {
	          this.memoryWriter[index] = this.MBC3WriteRTCLatch;
	        }
	      }
	      else if (this.cMBC5 || this.cRUMBLE || this.cMBC7) {
	        if (index < 0x2000) {
	          this.memoryWriter[index] = this.MBCWriteEnable;
	        }
	        else if (index < 0x3000) {
	          this.memoryWriter[index] = this.MBC5WriteROMBankLow;
	        }
	        else if (index < 0x4000) {
	          this.memoryWriter[index] = this.MBC5WriteROMBankHigh;
	        }
	        else if (index < 0x6000) {
	          this.memoryWriter[index] = (this.cRUMBLE) ? this.RUMBLEWriteRAMBank : this.MBC5WriteRAMBank;
	        }
	        else {
	          this.memoryWriter[index] = this.cartIgnoreWrite;
	        }
	      }
	      else if (this.cHuC3) {
	        if (index < 0x2000) {
	          this.memoryWriter[index] = this.MBCWriteEnable;
	        }
	        else if (index < 0x4000) {
	          this.memoryWriter[index] = this.MBC3WriteROMBank;
	        }
	        else if (index < 0x6000) {
	          this.memoryWriter[index] = this.HuC3WriteRAMBank;
	        }
	        else {
	          this.memoryWriter[index] = this.cartIgnoreWrite;
	        }
	      }
	      else {
	        this.memoryWriter[index] = this.cartIgnoreWrite;
	      }
	    }
	    else if (index < 0x9000) {
	      this.memoryWriter[index] = (this.cGBC) ? this.VRAMGBCDATAWrite : this.VRAMGBDATAWrite;
	    }
	    else if (index < 0x9800) {
	      this.memoryWriter[index] = (this.cGBC) ? this.VRAMGBCDATAWrite : this.VRAMGBDATAUpperWrite;
	    }
	    else if (index < 0xA000) {
	      this.memoryWriter[index] = (this.cGBC) ? this.VRAMGBCCHRMAPWrite : this.VRAMGBCHRMAPWrite;
	    }
	    else if (index < 0xC000) {
	      if ((this.numRAMBanks == 1 / 16 && index < 0xA200) || this.numRAMBanks >= 1) {
	        if (!this.cMBC3) {
	          this.memoryWriter[index] = this.memoryWriteMBCRAM;
	        }
	        else {
	          //MBC3 RTC + RAM:
	          this.memoryWriter[index] = this.memoryWriteMBC3RAM;
	        }
	      }
	      else {
	        this.memoryWriter[index] = this.cartIgnoreWrite;
	      }
	    }
	    else if (index < 0xE000) {
	      if (this.cGBC && index >= 0xD000) {
	        this.memoryWriter[index] = this.memoryWriteGBCRAM;
	      }
	      else {
	        this.memoryWriter[index] = this.memoryWriteNormal;
	      }
	    }
	    else if (index < 0xFE00) {
	      if (this.cGBC && index >= 0xF000) {
	        this.memoryWriter[index] = this.memoryWriteECHOGBCRAM;
	      }
	      else {
	        this.memoryWriter[index] = this.memoryWriteECHONormal;
	      }
	    }
	    else if (index <= 0xFEA0) {
	      this.memoryWriter[index] = this.memoryWriteOAMRAM;
	    }
	    else if (index < 0xFF00) {
	      if (this.cGBC) {                      //Only GBC has access to this RAM.
	        this.memoryWriter[index] = this.memoryWriteNormal;
	      }
	      else {
	        this.memoryWriter[index] = this.cartIgnoreWrite;
	      }
	    }
	    else {
	      //Start the I/O initialization by filling in the slots as normal memory:
	      this.memoryWriter[index] = this.memoryWriteNormal;
	      this.memoryHighWriter[index & 0xFF] = this.memoryHighWriteNormal;
	    }
	  }
	  this.registerWriteJumpCompile();        //Compile the I/O write functions separately...
	};
	GameBoyCore.prototype.MBCWriteEnable = function (parentObj, address, data) {
	  //MBC RAM Bank Enable/Disable:
	  parentObj.MBCRAMBanksEnabled = ((data & 0x0F) == 0x0A); //If lower nibble is 0x0A, then enable, otherwise disable.
	};
	GameBoyCore.prototype.MBC1WriteROMBank = function (parentObj, address, data) {
	  //MBC1 ROM bank switching:
	  parentObj.ROMBank1offs = (parentObj.ROMBank1offs & 0x60) | (data & 0x1F);
	  parentObj.setCurrentMBC1ROMBank();
	};
	GameBoyCore.prototype.MBC1WriteRAMBank = function (parentObj, address, data) {
	  //MBC1 RAM bank switching
	  if (parentObj.MBC1Mode) {
	    //4/32 Mode
	    parentObj.currMBCRAMBank = data & 0x03;
	    parentObj.currMBCRAMBankPosition = (parentObj.currMBCRAMBank << 13) - 0xA000;
	  }
	  else {
	    //16/8 Mode
	    parentObj.ROMBank1offs = ((data & 0x03) << 5) | (parentObj.ROMBank1offs & 0x1F);
	    parentObj.setCurrentMBC1ROMBank();
	  }
	};
	GameBoyCore.prototype.MBC1WriteType = function (parentObj, address, data) {
	  //MBC1 mode setting:
	  parentObj.MBC1Mode = ((data & 0x1) == 0x1);
	  if (parentObj.MBC1Mode) {
	    parentObj.ROMBank1offs &= 0x1F;
	    parentObj.setCurrentMBC1ROMBank();
	  }
	  else {
	    parentObj.currMBCRAMBank = 0;
	    parentObj.currMBCRAMBankPosition = -0xA000;
	  }
	};
	GameBoyCore.prototype.MBC2WriteROMBank = function (parentObj, address, data) {
	  //MBC2 ROM bank switching:
	  parentObj.ROMBank1offs = data & 0x0F;
	  parentObj.setCurrentMBC2AND3ROMBank();
	};
	GameBoyCore.prototype.MBC3WriteROMBank = function (parentObj, address, data) {
	  //MBC3 ROM bank switching:
	  parentObj.ROMBank1offs = data & 0x7F;
	  parentObj.setCurrentMBC2AND3ROMBank();
	};
	GameBoyCore.prototype.MBC3WriteRAMBank = function (parentObj, address, data) {
	  parentObj.currMBCRAMBank = data;
	  if (data < 4) {
	    //MBC3 RAM bank switching
	    parentObj.currMBCRAMBankPosition = (parentObj.currMBCRAMBank << 13) - 0xA000;
	  }
	};
	GameBoyCore.prototype.MBC3WriteRTCLatch = function (parentObj, address, data) {
	  if (data == 0) {
	    parentObj.RTCisLatched = false;
	  }
	  else if (!parentObj.RTCisLatched) {
	    //Copy over the current RTC time for reading.
	    parentObj.RTCisLatched = true;
	    parentObj.latchedSeconds = parentObj.RTCSeconds | 0;
	    parentObj.latchedMinutes = parentObj.RTCMinutes;
	    parentObj.latchedHours = parentObj.RTCHours;
	    parentObj.latchedLDays = (parentObj.RTCDays & 0xFF);
	    parentObj.latchedHDays = parentObj.RTCDays >> 8;
	  }
	};
	GameBoyCore.prototype.MBC5WriteROMBankLow = function (parentObj, address, data) {
	  //MBC5 ROM bank switching:
	  parentObj.ROMBank1offs = (parentObj.ROMBank1offs & 0x100) | data;
	  parentObj.setCurrentMBC5ROMBank();
	};
	GameBoyCore.prototype.MBC5WriteROMBankHigh = function (parentObj, address, data) {
	  //MBC5 ROM bank switching (by least significant bit):
	  parentObj.ROMBank1offs  = ((data & 0x01) << 8) | (parentObj.ROMBank1offs & 0xFF);
	  parentObj.setCurrentMBC5ROMBank();
	};
	GameBoyCore.prototype.MBC5WriteRAMBank = function (parentObj, address, data) {
	  //MBC5 RAM bank switching
	  parentObj.currMBCRAMBank = data & 0xF;
	  parentObj.currMBCRAMBankPosition = (parentObj.currMBCRAMBank << 13) - 0xA000;
	};
	GameBoyCore.prototype.RUMBLEWriteRAMBank = function (parentObj, address, data) {
	  //MBC5 RAM bank switching
	  //Like MBC5, but bit 3 of the lower nibble is used for rumbling and bit 2 is ignored.
	  parentObj.currMBCRAMBank = data & 0x03;
	  parentObj.currMBCRAMBankPosition = (parentObj.currMBCRAMBank << 13) - 0xA000;
	};
	GameBoyCore.prototype.HuC3WriteRAMBank = function (parentObj, address, data) {
	  //HuC3 RAM bank switching
	  parentObj.currMBCRAMBank = data & 0x03;
	  parentObj.currMBCRAMBankPosition = (parentObj.currMBCRAMBank << 13) - 0xA000;
	};
	GameBoyCore.prototype.cartIgnoreWrite = function (parentObj, address, data) {
	  //We might have encountered illegal RAM writing or such, so just do nothing...
	};
	GameBoyCore.prototype.memoryWriteNormal = function (parentObj, address, data) {
	  parentObj.memory[address] = data;
	};
	GameBoyCore.prototype.memoryHighWriteNormal = function (parentObj, address, data) {
	  parentObj.memory[0xFF00 | address] = data;
	};
	GameBoyCore.prototype.memoryWriteMBCRAM = function (parentObj, address, data) {
	  if (parentObj.MBCRAMBanksEnabled || this.opts.overrideMbc) {
	    parentObj.MBCRam[address + parentObj.currMBCRAMBankPosition] = data;
	  }
	};
	GameBoyCore.prototype.memoryWriteMBC3RAM = function (parentObj, address, data) {
	  if (parentObj.MBCRAMBanksEnabled || this.opts.overrideMbc) {
	    switch (parentObj.currMBCRAMBank) {
	      case 0x00:
	      case 0x01:
	      case 0x02:
	      case 0x03:
	        parentObj.MBCRam[address + parentObj.currMBCRAMBankPosition] = data;
	        break;
	      case 0x08:
	        if (data < 60) {
	          parentObj.RTCSeconds = data;
	        }
	        else {
	          debug("(Bank #" + parentObj.currMBCRAMBank + ") RTC write out of range: " + data, 1);
	        }
	        break;
	      case 0x09:
	        if (data < 60) {
	          parentObj.RTCMinutes = data;
	        }
	        else {
	          debug("(Bank #" + parentObj.currMBCRAMBank + ") RTC write out of range: " + data, 1);
	        }
	        break;
	      case 0x0A:
	        if (data < 24) {
	          parentObj.RTCHours = data;
	        }
	        else {
	          debug("(Bank #" + parentObj.currMBCRAMBank + ") RTC write out of range: " + data, 1);
	        }
	        break;
	      case 0x0B:
	        parentObj.RTCDays = (data & 0xFF) | (parentObj.RTCDays & 0x100);
	        break;
	      case 0x0C:
	        parentObj.RTCDayOverFlow = (data > 0x7F);
	        parentObj.RTCHalt = (data & 0x40) == 0x40;
	        parentObj.RTCDays = ((data & 0x1) << 8) | (parentObj.RTCDays & 0xFF);
	        break;
	      default:
	        debug("Invalid MBC3 bank address selected: " + parentObj.currMBCRAMBank, 0);
	    }
	  }
	};
	GameBoyCore.prototype.memoryWriteGBCRAM = function (parentObj, address, data) {
	  parentObj.GBCMemory[address + parentObj.gbcRamBankPosition] = data;
	};
	GameBoyCore.prototype.memoryWriteOAMRAM = function (parentObj, address, data) {
	  if (parentObj.modeSTAT < 2) {   //OAM RAM cannot be written to in mode 2 & 3
	    if (parentObj.memory[address] != data) {
	      parentObj.graphicsJIT();
	      parentObj.memory[address] = data;
	    }
	  }
	};
	GameBoyCore.prototype.memoryWriteECHOGBCRAM = function (parentObj, address, data) {
	  parentObj.GBCMemory[address + parentObj.gbcRamBankPositionECHO] = data;
	};
	GameBoyCore.prototype.memoryWriteECHONormal = function (parentObj, address, data) {
	  parentObj.memory[address - 0x2000] = data;
	};
	GameBoyCore.prototype.VRAMGBDATAWrite = function (parentObj, address, data) {
	  if (parentObj.modeSTAT < 3) { //VRAM cannot be written to during mode 3
	    if (parentObj.memory[address] != data) {
	      //JIT the graphics render queue:
	      parentObj.graphicsJIT();
	      parentObj.memory[address] = data;
	      parentObj.generateGBOAMTileLine(address);
	    }
	  }
	};
	GameBoyCore.prototype.VRAMGBDATAUpperWrite = function (parentObj, address, data) {
	  if (parentObj.modeSTAT < 3) { //VRAM cannot be written to during mode 3
	    if (parentObj.memory[address] != data) {
	      //JIT the graphics render queue:
	      parentObj.graphicsJIT();
	      parentObj.memory[address] = data;
	      parentObj.generateGBTileLine(address);
	    }
	  }
	};
	GameBoyCore.prototype.VRAMGBCDATAWrite = function (parentObj, address, data) {
	  if (parentObj.modeSTAT < 3) { //VRAM cannot be written to during mode 3
	    if (parentObj.currVRAMBank == 0) {
	      if (parentObj.memory[address] != data) {
	        //JIT the graphics render queue:
	        parentObj.graphicsJIT();
	        parentObj.memory[address] = data;
	        parentObj.generateGBCTileLineBank1(address);
	      }
	    }
	    else {
	      address &= 0x1FFF;
	      if (parentObj.VRAM[address] != data) {
	        //JIT the graphics render queue:
	        parentObj.graphicsJIT();
	        parentObj.VRAM[address] = data;
	        parentObj.generateGBCTileLineBank2(address);
	      }
	    }
	  }
	};
	GameBoyCore.prototype.VRAMGBCHRMAPWrite = function (parentObj, address, data) {
	  if (parentObj.modeSTAT < 3) { //VRAM cannot be written to during mode 3
	    address &= 0x7FF;
	    if (parentObj.BGCHRBank1[address] != data) {
	      //JIT the graphics render queue:
	      parentObj.graphicsJIT();
	      parentObj.BGCHRBank1[address] = data;
	    }
	  }
	};
	GameBoyCore.prototype.VRAMGBCCHRMAPWrite = function (parentObj, address, data) {
	  if (parentObj.modeSTAT < 3) { //VRAM cannot be written to during mode 3
	    address &= 0x7FF;
	    if (parentObj.BGCHRCurrentBank[address] != data) {
	      //JIT the graphics render queue:
	      parentObj.graphicsJIT();
	      parentObj.BGCHRCurrentBank[address] = data;
	    }
	  }
	};
	GameBoyCore.prototype.DMAWrite = function (tilesToTransfer) {
	  if (!this.halt) {
	    //Clock the CPU for the DMA transfer (CPU is halted during the transfer):
	    this.CPUTicks += 4 | ((tilesToTransfer << 5) << this.doubleSpeedShifter);
	  }
	  //Source address of the transfer:
	  var source = (this.memory[0xFF51] << 8) | this.memory[0xFF52];
	  //Destination address in the VRAM memory range:
	  var destination = (this.memory[0xFF53] << 8) | this.memory[0xFF54];
	  //Creating some references:
	  var memoryReader = this.memoryReader;
	  //JIT the graphics render queue:
	  this.graphicsJIT();
	  var memory = this.memory;
	  //Determining which bank we're working on so we can optimize:
	  if (this.currVRAMBank == 0) {
	    //DMA transfer for VRAM bank 0:
	    do {
	      if (destination < 0x1800) {
	        memory[0x8000 | destination] = memoryReader[source](this, source++);
	        memory[0x8001 | destination] = memoryReader[source](this, source++);
	        memory[0x8002 | destination] = memoryReader[source](this, source++);
	        memory[0x8003 | destination] = memoryReader[source](this, source++);
	        memory[0x8004 | destination] = memoryReader[source](this, source++);
	        memory[0x8005 | destination] = memoryReader[source](this, source++);
	        memory[0x8006 | destination] = memoryReader[source](this, source++);
	        memory[0x8007 | destination] = memoryReader[source](this, source++);
	        memory[0x8008 | destination] = memoryReader[source](this, source++);
	        memory[0x8009 | destination] = memoryReader[source](this, source++);
	        memory[0x800A | destination] = memoryReader[source](this, source++);
	        memory[0x800B | destination] = memoryReader[source](this, source++);
	        memory[0x800C | destination] = memoryReader[source](this, source++);
	        memory[0x800D | destination] = memoryReader[source](this, source++);
	        memory[0x800E | destination] = memoryReader[source](this, source++);
	        memory[0x800F | destination] = memoryReader[source](this, source++);
	        this.generateGBCTileBank1(destination);
	        destination += 0x10;
	      }
	      else {
	        destination &= 0x7F0;
	        this.BGCHRBank1[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank1[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank1[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank1[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank1[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank1[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank1[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank1[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank1[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank1[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank1[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank1[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank1[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank1[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank1[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank1[destination++] = memoryReader[source](this, source++);
	        destination = (destination + 0x1800) & 0x1FF0;
	      }
	      source &= 0xFFF0;
	      --tilesToTransfer;
	    } while (tilesToTransfer > 0);
	  }
	  else {
	    var VRAM = this.VRAM;
	    //DMA transfer for VRAM bank 1:
	    do {
	      if (destination < 0x1800) {
	        VRAM[destination] = memoryReader[source](this, source++);
	        VRAM[destination | 0x1] = memoryReader[source](this, source++);
	        VRAM[destination | 0x2] = memoryReader[source](this, source++);
	        VRAM[destination | 0x3] = memoryReader[source](this, source++);
	        VRAM[destination | 0x4] = memoryReader[source](this, source++);
	        VRAM[destination | 0x5] = memoryReader[source](this, source++);
	        VRAM[destination | 0x6] = memoryReader[source](this, source++);
	        VRAM[destination | 0x7] = memoryReader[source](this, source++);
	        VRAM[destination | 0x8] = memoryReader[source](this, source++);
	        VRAM[destination | 0x9] = memoryReader[source](this, source++);
	        VRAM[destination | 0xA] = memoryReader[source](this, source++);
	        VRAM[destination | 0xB] = memoryReader[source](this, source++);
	        VRAM[destination | 0xC] = memoryReader[source](this, source++);
	        VRAM[destination | 0xD] = memoryReader[source](this, source++);
	        VRAM[destination | 0xE] = memoryReader[source](this, source++);
	        VRAM[destination | 0xF] = memoryReader[source](this, source++);
	        this.generateGBCTileBank2(destination);
	        destination += 0x10;
	      }
	      else {
	        destination &= 0x7F0;
	        this.BGCHRBank2[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank2[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank2[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank2[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank2[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank2[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank2[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank2[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank2[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank2[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank2[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank2[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank2[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank2[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank2[destination++] = memoryReader[source](this, source++);
	        this.BGCHRBank2[destination++] = memoryReader[source](this, source++);
	        destination = (destination + 0x1800) & 0x1FF0;
	      }
	      source &= 0xFFF0;
	      --tilesToTransfer;
	    } while (tilesToTransfer > 0);
	  }
	  //Update the HDMA registers to their next addresses:
	  memory[0xFF51] = source >> 8;
	  memory[0xFF52] = source & 0xF0;
	  memory[0xFF53] = destination >> 8;
	  memory[0xFF54] = destination & 0xF0;
	};
	GameBoyCore.prototype.registerWriteJumpCompile = function () {
	  //I/O Registers (GB + GBC):
	  //JoyPad
	  this.memoryHighWriter[0] = this.memoryWriter[0xFF00] = function (parentObj, address, data) {
	    parentObj.memory[0xFF00] = (data & 0x30) | ((((data & 0x20) == 0) ? (parentObj.JoyPad >> 4) : 0xF) & (((data & 0x10) == 0) ? (parentObj.JoyPad & 0xF) : 0xF));
	  };
	  //SB (Serial Transfer Data)
	  this.memoryHighWriter[0x1] = this.memoryWriter[0xFF01] = function (parentObj, address, data) {
	    if (parentObj.memory[0xFF02] < 0x80) {  //Cannot write while a serial transfer is active.
	      parentObj.memory[0xFF01] = data;
	    }
	  };
	  //SC (Serial Transfer Control):
	  this.memoryHighWriter[0x2] = this.memoryHighWriteNormal;
	  this.memoryWriter[0xFF02] = this.memoryWriteNormal;
	  //Unmapped I/O:
	  this.memoryHighWriter[0x3] = this.memoryWriter[0xFF03] = this.cartIgnoreWrite;
	  //DIV
	  this.memoryHighWriter[0x4] = this.memoryWriter[0xFF04] = function (parentObj, address, data) {
	    parentObj.DIVTicks &= 0xFF; //Update DIV for realignment.
	    parentObj.memory[0xFF04] = 0;
	  };
	  //TIMA
	  this.memoryHighWriter[0x5] = this.memoryWriter[0xFF05] = function (parentObj, address, data) {
	    parentObj.memory[0xFF05] = data;
	  };
	  //TMA
	  this.memoryHighWriter[0x6] = this.memoryWriter[0xFF06] = function (parentObj, address, data) {
	    parentObj.memory[0xFF06] = data;
	  };
	  //TAC
	  this.memoryHighWriter[0x7] = this.memoryWriter[0xFF07] = function (parentObj, address, data) {
	    parentObj.memory[0xFF07] = data & 0x07;
	    parentObj.TIMAEnabled = (data & 0x04) == 0x04;
	    parentObj.TACClocker = Math.pow(4, ((data & 0x3) != 0) ? (data & 0x3) : 4) << 2;  //TODO: Find a way to not make a conditional in here...
	  };
	  //Unmapped I/O:
	  this.memoryHighWriter[0x8] = this.memoryWriter[0xFF08] = this.cartIgnoreWrite;
	  this.memoryHighWriter[0x9] = this.memoryWriter[0xFF09] = this.cartIgnoreWrite;
	  this.memoryHighWriter[0xA] = this.memoryWriter[0xFF0A] = this.cartIgnoreWrite;
	  this.memoryHighWriter[0xB] = this.memoryWriter[0xFF0B] = this.cartIgnoreWrite;
	  this.memoryHighWriter[0xC] = this.memoryWriter[0xFF0C] = this.cartIgnoreWrite;
	  this.memoryHighWriter[0xD] = this.memoryWriter[0xFF0D] = this.cartIgnoreWrite;
	  this.memoryHighWriter[0xE] = this.memoryWriter[0xFF0E] = this.cartIgnoreWrite;
	  //IF (Interrupt Request)
	  this.memoryHighWriter[0xF] = this.memoryWriter[0xFF0F] = function (parentObj, address, data) {
	    parentObj.interruptsRequested = data;
	    parentObj.checkIRQMatching();
	  };
	  //NR10:
	  this.memoryHighWriter[0x10] = this.memoryWriter[0xFF10] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled) {
	      parentObj.audioJIT();
	      if (parentObj.channel1decreaseSweep && (data & 0x08) == 0) {
	        if (parentObj.channel1Swept) {
	          parentObj.channel1SweepFault = true;
	        }
	      }
	      parentObj.channel1lastTimeSweep = (data & 0x70) >> 4;
	      parentObj.channel1frequencySweepDivider = data & 0x07;
	      parentObj.channel1decreaseSweep = ((data & 0x08) == 0x08);
	      parentObj.memory[0xFF10] = data;
	      parentObj.channel1EnableCheck();
	    }
	  };
	  //NR11:
	  this.memoryHighWriter[0x11] = this.memoryWriter[0xFF11] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled || !parentObj.cGBC) {
	      if (parentObj.soundMasterEnabled) {
	        parentObj.audioJIT();
	      }
	      else {
	        data &= 0x3F;
	      }
	      parentObj.channel1CachedDuty = parentObj.dutyLookup[data >> 6];
	      parentObj.channel1totalLength = 0x40 - (data & 0x3F);
	      parentObj.memory[0xFF11] = data;
	      parentObj.channel1EnableCheck();
	    }
	  };
	  //NR12:
	  this.memoryHighWriter[0x12] = this.memoryWriter[0xFF12] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled) {
	      parentObj.audioJIT();
	      if (parentObj.channel1Enabled && parentObj.channel1envelopeSweeps == 0) {
	        //Zombie Volume PAPU Bug:
	        if (((parentObj.memory[0xFF12] ^ data) & 0x8) == 0x8) {
	          if ((parentObj.memory[0xFF12] & 0x8) == 0) {
	            if ((parentObj.memory[0xFF12] & 0x7) == 0x7) {
	              parentObj.channel1envelopeVolume += 2;
	            }
	            else {
	              ++parentObj.channel1envelopeVolume;
	            }
	          }
	          parentObj.channel1envelopeVolume = (16 - parentObj.channel1envelopeVolume) & 0xF;
	        }
	        else if ((parentObj.memory[0xFF12] & 0xF) == 0x8) {
	          parentObj.channel1envelopeVolume = (1 + parentObj.channel1envelopeVolume) & 0xF;
	        }
	        parentObj.channel1OutputLevelCache();
	      }
	      parentObj.channel1envelopeType = ((data & 0x08) == 0x08);
	      parentObj.memory[0xFF12] = data;
	      parentObj.channel1VolumeEnableCheck();
	    }
	  };
	  //NR13:
	  this.memoryHighWriter[0x13] = this.memoryWriter[0xFF13] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled) {
	      parentObj.audioJIT();
	      parentObj.channel1frequency = (parentObj.channel1frequency & 0x700) | data;
	      parentObj.channel1FrequencyTracker = (0x800 - parentObj.channel1frequency) << 2;
	    }
	  };
	  //NR14:
	  this.memoryHighWriter[0x14] = this.memoryWriter[0xFF14] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled) {
	      parentObj.audioJIT();
	      parentObj.channel1consecutive = ((data & 0x40) == 0x0);
	      parentObj.channel1frequency = ((data & 0x7) << 8) | (parentObj.channel1frequency & 0xFF);
	      parentObj.channel1FrequencyTracker = (0x800 - parentObj.channel1frequency) << 2;
	      if (data > 0x7F) {
	        //Reload 0xFF10:
	        parentObj.channel1timeSweep = parentObj.channel1lastTimeSweep;
	        parentObj.channel1Swept = false;
	        //Reload 0xFF12:
	        var nr12 = parentObj.memory[0xFF12];
	        parentObj.channel1envelopeVolume = nr12 >> 4;
	        parentObj.channel1OutputLevelCache();
	        parentObj.channel1envelopeSweepsLast = (nr12 & 0x7) - 1;
	        if (parentObj.channel1totalLength == 0) {
	          parentObj.channel1totalLength = 0x40;
	        }
	        if (parentObj.channel1lastTimeSweep > 0 || parentObj.channel1frequencySweepDivider > 0) {
	          parentObj.memory[0xFF26] |= 0x1;
	        }
	        else {
	          parentObj.memory[0xFF26] &= 0xFE;
	        }
	        if ((data & 0x40) == 0x40) {
	          parentObj.memory[0xFF26] |= 0x1;
	        }
	        parentObj.channel1ShadowFrequency = parentObj.channel1frequency;
	        //Reset frequency overflow check + frequency sweep type check:
	        parentObj.channel1SweepFault = false;
	        //Supposed to run immediately:
	        parentObj.channel1AudioSweepPerformDummy();
	      }
	      parentObj.channel1EnableCheck();
	      parentObj.memory[0xFF14] = data;
	    }
	  };
	  //NR20 (Unused I/O):
	  this.memoryHighWriter[0x15] = this.memoryWriter[0xFF15] = this.cartIgnoreWrite;
	  //NR21:
	  this.memoryHighWriter[0x16] = this.memoryWriter[0xFF16] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled || !parentObj.cGBC) {
	      if (parentObj.soundMasterEnabled) {
	        parentObj.audioJIT();
	      }
	      else {
	        data &= 0x3F;
	      }
	      parentObj.channel2CachedDuty = parentObj.dutyLookup[data >> 6];
	      parentObj.channel2totalLength = 0x40 - (data & 0x3F);
	      parentObj.memory[0xFF16] = data;
	      parentObj.channel2EnableCheck();
	    }
	  };
	  //NR22:
	  this.memoryHighWriter[0x17] = this.memoryWriter[0xFF17] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled) {
	      parentObj.audioJIT();
	      if (parentObj.channel2Enabled && parentObj.channel2envelopeSweeps == 0) {
	        //Zombie Volume PAPU Bug:
	        if (((parentObj.memory[0xFF17] ^ data) & 0x8) == 0x8) {
	          if ((parentObj.memory[0xFF17] & 0x8) == 0) {
	            if ((parentObj.memory[0xFF17] & 0x7) == 0x7) {
	              parentObj.channel2envelopeVolume += 2;
	            }
	            else {
	              ++parentObj.channel2envelopeVolume;
	            }
	          }
	          parentObj.channel2envelopeVolume = (16 - parentObj.channel2envelopeVolume) & 0xF;
	        }
	        else if ((parentObj.memory[0xFF17] & 0xF) == 0x8) {
	          parentObj.channel2envelopeVolume = (1 + parentObj.channel2envelopeVolume) & 0xF;
	        }
	        parentObj.channel2OutputLevelCache();
	      }
	      parentObj.channel2envelopeType = ((data & 0x08) == 0x08);
	      parentObj.memory[0xFF17] = data;
	      parentObj.channel2VolumeEnableCheck();
	    }
	  };
	  //NR23:
	  this.memoryHighWriter[0x18] = this.memoryWriter[0xFF18] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled) {
	      parentObj.audioJIT();
	      parentObj.channel2frequency = (parentObj.channel2frequency & 0x700) | data;
	      parentObj.channel2FrequencyTracker = (0x800 - parentObj.channel2frequency) << 2;
	    }
	  };
	  //NR24:
	  this.memoryHighWriter[0x19] = this.memoryWriter[0xFF19] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled) {
	      parentObj.audioJIT();
	      if (data > 0x7F) {
	        //Reload 0xFF17:
	        var nr22 = parentObj.memory[0xFF17];
	        parentObj.channel2envelopeVolume = nr22 >> 4;
	        parentObj.channel2OutputLevelCache();
	        parentObj.channel2envelopeSweepsLast = (nr22 & 0x7) - 1;
	        if (parentObj.channel2totalLength == 0) {
	          parentObj.channel2totalLength = 0x40;
	        }
	        if ((data & 0x40) == 0x40) {
	          parentObj.memory[0xFF26] |= 0x2;
	        }
	      }
	      parentObj.channel2consecutive = ((data & 0x40) == 0x0);
	      parentObj.channel2frequency = ((data & 0x7) << 8) | (parentObj.channel2frequency & 0xFF);
	      parentObj.channel2FrequencyTracker = (0x800 - parentObj.channel2frequency) << 2;
	      parentObj.memory[0xFF19] = data;
	      parentObj.channel2EnableCheck();
	    }
	  };
	  //NR30:
	  this.memoryHighWriter[0x1A] = this.memoryWriter[0xFF1A] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled) {
	      parentObj.audioJIT();
	      if (!parentObj.channel3canPlay && data >= 0x80) {
	        parentObj.channel3lastSampleLookup = 0;
	        parentObj.channel3UpdateCache();
	      }
	      parentObj.channel3canPlay = (data > 0x7F);
	      if (parentObj.channel3canPlay && parentObj.memory[0xFF1A] > 0x7F && !parentObj.channel3consecutive) {
	        parentObj.memory[0xFF26] |= 0x4;
	      }
	      parentObj.memory[0xFF1A] = data;
	      //parentObj.channel3EnableCheck();
	    }
	  };
	  //NR31:
	  this.memoryHighWriter[0x1B] = this.memoryWriter[0xFF1B] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled || !parentObj.cGBC) {
	      if (parentObj.soundMasterEnabled) {
	        parentObj.audioJIT();
	      }
	      parentObj.channel3totalLength = 0x100 - data;
	      parentObj.channel3EnableCheck();
	    }
	  };
	  //NR32:
	  this.memoryHighWriter[0x1C] = this.memoryWriter[0xFF1C] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled) {
	      parentObj.audioJIT();
	      data &= 0x60;
	      parentObj.memory[0xFF1C] = data;
	      parentObj.channel3patternType = (data == 0) ? 4 : ((data >> 5) - 1);
	    }
	  };
	  //NR33:
	  this.memoryHighWriter[0x1D] = this.memoryWriter[0xFF1D] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled) {
	      parentObj.audioJIT();
	      parentObj.channel3frequency = (parentObj.channel3frequency & 0x700) | data;
	      parentObj.channel3FrequencyPeriod = (0x800 - parentObj.channel3frequency) << 1;
	    }
	  };
	  //NR34:
	  this.memoryHighWriter[0x1E] = this.memoryWriter[0xFF1E] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled) {
	      parentObj.audioJIT();
	      if (data > 0x7F) {
	        if (parentObj.channel3totalLength == 0) {
	          parentObj.channel3totalLength = 0x100;
	        }
	        parentObj.channel3lastSampleLookup = 0;
	        if ((data & 0x40) == 0x40) {
	          parentObj.memory[0xFF26] |= 0x4;
	        }
	      }
	      parentObj.channel3consecutive = ((data & 0x40) == 0x0);
	      parentObj.channel3frequency = ((data & 0x7) << 8) | (parentObj.channel3frequency & 0xFF);
	      parentObj.channel3FrequencyPeriod = (0x800 - parentObj.channel3frequency) << 1;
	      parentObj.memory[0xFF1E] = data;
	      parentObj.channel3EnableCheck();
	    }
	  };
	  //NR40 (Unused I/O):
	  this.memoryHighWriter[0x1F] = this.memoryWriter[0xFF1F] = this.cartIgnoreWrite;
	  //NR41:
	  this.memoryHighWriter[0x20] = this.memoryWriter[0xFF20] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled || !parentObj.cGBC) {
	      if (parentObj.soundMasterEnabled) {
	        parentObj.audioJIT();
	      }
	      parentObj.channel4totalLength = 0x40 - (data & 0x3F);
	      parentObj.channel4EnableCheck();
	    }
	  };
	  //NR42:
	  this.memoryHighWriter[0x21] = this.memoryWriter[0xFF21] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled) {
	      parentObj.audioJIT();
	      if (parentObj.channel4Enabled && parentObj.channel4envelopeSweeps == 0) {
	        //Zombie Volume PAPU Bug:
	        if (((parentObj.memory[0xFF21] ^ data) & 0x8) == 0x8) {
	          if ((parentObj.memory[0xFF21] & 0x8) == 0) {
	            if ((parentObj.memory[0xFF21] & 0x7) == 0x7) {
	              parentObj.channel4envelopeVolume += 2;
	            }
	            else {
	              ++parentObj.channel4envelopeVolume;
	            }
	          }
	          parentObj.channel4envelopeVolume = (16 - parentObj.channel4envelopeVolume) & 0xF;
	        }
	        else if ((parentObj.memory[0xFF21] & 0xF) == 0x8) {
	          parentObj.channel4envelopeVolume = (1 + parentObj.channel4envelopeVolume) & 0xF;
	        }
	        parentObj.channel4currentVolume = parentObj.channel4envelopeVolume << parentObj.channel4VolumeShifter;
	      }
	      parentObj.channel4envelopeType = ((data & 0x08) == 0x08);
	      parentObj.memory[0xFF21] = data;
	      parentObj.channel4UpdateCache();
	      parentObj.channel4VolumeEnableCheck();
	    }
	  };
	  //NR43:
	  this.memoryHighWriter[0x22] = this.memoryWriter[0xFF22] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled) {
	      parentObj.audioJIT();
	      parentObj.channel4FrequencyPeriod = Math.max((data & 0x7) << 4, 8) << (data >> 4);
	      var bitWidth = (data & 0x8);
	      if ((bitWidth == 0x8 && parentObj.channel4BitRange == 0x7FFF) || (bitWidth == 0 && parentObj.channel4BitRange == 0x7F)) {
	        parentObj.channel4lastSampleLookup = 0;
	        parentObj.channel4BitRange = (bitWidth == 0x8) ? 0x7F : 0x7FFF;
	        parentObj.channel4VolumeShifter = (bitWidth == 0x8) ? 7 : 15;
	        parentObj.channel4currentVolume = parentObj.channel4envelopeVolume << parentObj.channel4VolumeShifter;
	        parentObj.noiseSampleTable = (bitWidth == 0x8) ? parentObj.LSFR7Table : parentObj.LSFR15Table;
	      }
	      parentObj.memory[0xFF22] = data;
	      parentObj.channel4UpdateCache();
	    }
	  };
	  //NR44:
	  this.memoryHighWriter[0x23] = this.memoryWriter[0xFF23] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled) {
	      parentObj.audioJIT();
	      parentObj.memory[0xFF23] = data;
	      parentObj.channel4consecutive = ((data & 0x40) == 0x0);
	      if (data > 0x7F) {
	        var nr42 = parentObj.memory[0xFF21];
	        parentObj.channel4envelopeVolume = nr42 >> 4;
	        parentObj.channel4currentVolume = parentObj.channel4envelopeVolume << parentObj.channel4VolumeShifter;
	        parentObj.channel4envelopeSweepsLast = (nr42 & 0x7) - 1;
	        if (parentObj.channel4totalLength == 0) {
	          parentObj.channel4totalLength = 0x40;
	        }
	        if ((data & 0x40) == 0x40) {
	          parentObj.memory[0xFF26] |= 0x8;
	        }
	      }
	      parentObj.channel4EnableCheck();
	    }
	  };
	  //NR50:
	  this.memoryHighWriter[0x24] = this.memoryWriter[0xFF24] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled && parentObj.memory[0xFF24] != data) {
	      parentObj.audioJIT();
	      parentObj.memory[0xFF24] = data;
	      parentObj.VinLeftChannelMasterVolume = ((data >> 4) & 0x07) + 1;
	      parentObj.VinRightChannelMasterVolume = (data & 0x07) + 1;
	      parentObj.mixerOutputLevelCache();
	    }
	  };
	  //NR51:
	  this.memoryHighWriter[0x25] = this.memoryWriter[0xFF25] = function (parentObj, address, data) {
	    if (parentObj.soundMasterEnabled && parentObj.memory[0xFF25] != data) {
	      parentObj.audioJIT();
	      parentObj.memory[0xFF25] = data;
	      parentObj.rightChannel1 = ((data & 0x01) == 0x01);
	      parentObj.rightChannel2 = ((data & 0x02) == 0x02);
	      parentObj.rightChannel3 = ((data & 0x04) == 0x04);
	      parentObj.rightChannel4 = ((data & 0x08) == 0x08);
	      parentObj.leftChannel1 = ((data & 0x10) == 0x10);
	      parentObj.leftChannel2 = ((data & 0x20) == 0x20);
	      parentObj.leftChannel3 = ((data & 0x40) == 0x40);
	      parentObj.leftChannel4 = (data > 0x7F);
	      parentObj.channel1OutputLevelCache();
	      parentObj.channel2OutputLevelCache();
	      parentObj.channel3OutputLevelCache();
	      parentObj.channel4OutputLevelCache();
	    }
	  };
	  //NR52:
	  this.memoryHighWriter[0x26] = this.memoryWriter[0xFF26] = function (parentObj, address, data) {
	    parentObj.audioJIT();
	    if (!parentObj.soundMasterEnabled && data > 0x7F) {
	      parentObj.memory[0xFF26] = 0x80;
	      parentObj.soundMasterEnabled = true;
	      parentObj.initializeAudioStartState();
	    }
	    else if (parentObj.soundMasterEnabled && data < 0x80) {
	      parentObj.memory[0xFF26] = 0;
	      parentObj.soundMasterEnabled = false;
	      //GBDev wiki says the registers are written with zeros on power off:
	      for (var index = 0xFF10; index < 0xFF26; index++) {
	        parentObj.memoryWriter[index](parentObj, index, 0);
	      }
	    }
	  };
	  //0xFF27 to 0xFF2F don't do anything...
	  this.memoryHighWriter[0x27] = this.memoryWriter[0xFF27] = this.cartIgnoreWrite;
	  this.memoryHighWriter[0x28] = this.memoryWriter[0xFF28] = this.cartIgnoreWrite;
	  this.memoryHighWriter[0x29] = this.memoryWriter[0xFF29] = this.cartIgnoreWrite;
	  this.memoryHighWriter[0x2A] = this.memoryWriter[0xFF2A] = this.cartIgnoreWrite;
	  this.memoryHighWriter[0x2B] = this.memoryWriter[0xFF2B] = this.cartIgnoreWrite;
	  this.memoryHighWriter[0x2C] = this.memoryWriter[0xFF2C] = this.cartIgnoreWrite;
	  this.memoryHighWriter[0x2D] = this.memoryWriter[0xFF2D] = this.cartIgnoreWrite;
	  this.memoryHighWriter[0x2E] = this.memoryWriter[0xFF2E] = this.cartIgnoreWrite;
	  this.memoryHighWriter[0x2F] = this.memoryWriter[0xFF2F] = this.cartIgnoreWrite;
	  //WAVE PCM RAM:
	  this.memoryHighWriter[0x30] = this.memoryWriter[0xFF30] = function (parentObj, address, data) {
	    parentObj.channel3WriteRAM(0, data);
	  };
	  this.memoryHighWriter[0x31] = this.memoryWriter[0xFF31] = function (parentObj, address, data) {
	    parentObj.channel3WriteRAM(0x1, data);
	  };
	  this.memoryHighWriter[0x32] = this.memoryWriter[0xFF32] = function (parentObj, address, data) {
	    parentObj.channel3WriteRAM(0x2, data);
	  };
	  this.memoryHighWriter[0x33] = this.memoryWriter[0xFF33] = function (parentObj, address, data) {
	    parentObj.channel3WriteRAM(0x3, data);
	  };
	  this.memoryHighWriter[0x34] = this.memoryWriter[0xFF34] = function (parentObj, address, data) {
	    parentObj.channel3WriteRAM(0x4, data);
	  };
	  this.memoryHighWriter[0x35] = this.memoryWriter[0xFF35] = function (parentObj, address, data) {
	    parentObj.channel3WriteRAM(0x5, data);
	  };
	  this.memoryHighWriter[0x36] = this.memoryWriter[0xFF36] = function (parentObj, address, data) {
	    parentObj.channel3WriteRAM(0x6, data);
	  };
	  this.memoryHighWriter[0x37] = this.memoryWriter[0xFF37] = function (parentObj, address, data) {
	    parentObj.channel3WriteRAM(0x7, data);
	  };
	  this.memoryHighWriter[0x38] = this.memoryWriter[0xFF38] = function (parentObj, address, data) {
	    parentObj.channel3WriteRAM(0x8, data);
	  };
	  this.memoryHighWriter[0x39] = this.memoryWriter[0xFF39] = function (parentObj, address, data) {
	    parentObj.channel3WriteRAM(0x9, data);
	  };
	  this.memoryHighWriter[0x3A] = this.memoryWriter[0xFF3A] = function (parentObj, address, data) {
	    parentObj.channel3WriteRAM(0xA, data);
	  };
	  this.memoryHighWriter[0x3B] = this.memoryWriter[0xFF3B] = function (parentObj, address, data) {
	    parentObj.channel3WriteRAM(0xB, data);
	  };
	  this.memoryHighWriter[0x3C] = this.memoryWriter[0xFF3C] = function (parentObj, address, data) {
	    parentObj.channel3WriteRAM(0xC, data);
	  };
	  this.memoryHighWriter[0x3D] = this.memoryWriter[0xFF3D] = function (parentObj, address, data) {
	    parentObj.channel3WriteRAM(0xD, data);
	  };
	  this.memoryHighWriter[0x3E] = this.memoryWriter[0xFF3E] = function (parentObj, address, data) {
	    parentObj.channel3WriteRAM(0xE, data);
	  };
	  this.memoryHighWriter[0x3F] = this.memoryWriter[0xFF3F] = function (parentObj, address, data) {
	    parentObj.channel3WriteRAM(0xF, data);
	  };
	  //SCY
	  this.memoryHighWriter[0x42] = this.memoryWriter[0xFF42] = function (parentObj, address, data) {
	    if (parentObj.backgroundY != data) {
	      parentObj.midScanLineJIT();
	      parentObj.backgroundY = data;
	    }
	  };
	  //SCX
	  this.memoryHighWriter[0x43] = this.memoryWriter[0xFF43] = function (parentObj, address, data) {
	    if (parentObj.backgroundX != data) {
	      parentObj.midScanLineJIT();
	      parentObj.backgroundX = data;
	    }
	  };
	  //LY
	  this.memoryHighWriter[0x44] = this.memoryWriter[0xFF44] = function (parentObj, address, data) {
	    //Read Only:
	    if (parentObj.LCDisOn) {
	      //Gambatte says to do this:
	      parentObj.modeSTAT = 2;
	      parentObj.midScanlineOffset = -1;
	      parentObj.totalLinesPassed = parentObj.currentX = parentObj.queuedScanLines = parentObj.lastUnrenderedLine = parentObj.LCDTicks = parentObj.STATTracker = parentObj.actualScanLine = parentObj.memory[0xFF44] = 0;
	    }
	  };
	  //LYC
	  this.memoryHighWriter[0x45] = this.memoryWriter[0xFF45] = function (parentObj, address, data) {
	    if (parentObj.memory[0xFF45] != data) {
	      parentObj.memory[0xFF45] = data;
	      if (parentObj.LCDisOn) {
	        parentObj.matchLYC(); //Get the compare of the first scan line.
	      }
	    }
	  };
	  //WY
	  this.memoryHighWriter[0x4A] = this.memoryWriter[0xFF4A] = function (parentObj, address, data) {
	    if (parentObj.windowY != data) {
	      parentObj.midScanLineJIT();
	      parentObj.windowY = data;
	    }
	  };
	  //WX
	  this.memoryHighWriter[0x4B] = this.memoryWriter[0xFF4B] = function (parentObj, address, data) {
	    if (parentObj.memory[0xFF4B] != data) {
	      parentObj.midScanLineJIT();
	      parentObj.memory[0xFF4B] = data;
	      parentObj.windowX = data - 7;
	    }
	  };
	  this.memoryHighWriter[0x72] = this.memoryWriter[0xFF72] = function (parentObj, address, data) {
	    parentObj.memory[0xFF72] = data;
	  };
	  this.memoryHighWriter[0x73] = this.memoryWriter[0xFF73] = function (parentObj, address, data) {
	    parentObj.memory[0xFF73] = data;
	  };
	  this.memoryHighWriter[0x75] = this.memoryWriter[0xFF75] = function (parentObj, address, data) {
	    parentObj.memory[0xFF75] = data;
	  };
	  this.memoryHighWriter[0x76] = this.memoryWriter[0xFF76] = this.cartIgnoreWrite;
	  this.memoryHighWriter[0x77] = this.memoryWriter[0xFF77] = this.cartIgnoreWrite;
	  //IE (Interrupt Enable)
	  this.memoryHighWriter[0xFF] = this.memoryWriter[0xFFFF] = function (parentObj, address, data) {
	    parentObj.interruptsEnabled = data;
	    parentObj.checkIRQMatching();
	  };
	  this.recompileModelSpecificIOWriteHandling();
	  this.recompileBootIOWriteHandling();
	};
	GameBoyCore.prototype.recompileModelSpecificIOWriteHandling = function () {
	  if (this.cGBC) {
	    //GameBoy Color Specific I/O:
	    //SC (Serial Transfer Control Register)
	    this.memoryHighWriter[0x2] = this.memoryWriter[0xFF02] = function (parentObj, address, data) {
	      if (((data & 0x1) == 0x1)) {
	        //Internal clock:
	        parentObj.memory[0xFF02] = (data & 0x7F);
	        parentObj.serialTimer = ((data & 0x2) == 0) ? 4096 : 128; //Set the Serial IRQ counter.
	        parentObj.serialShiftTimer = parentObj.serialShiftTimerAllocated = ((data & 0x2) == 0) ? 512 : 16;  //Set the transfer data shift counter.
	      }
	      else {
	        //External clock:
	        parentObj.memory[0xFF02] = data;
	        parentObj.serialShiftTimer = parentObj.serialShiftTimerAllocated = parentObj.serialTimer = 0; //Zero the timers, since we're emulating as if nothing is connected.
	      }
	    };
	    this.memoryHighWriter[0x40] = this.memoryWriter[0xFF40] = function (parentObj, address, data) {
	      if (parentObj.memory[0xFF40] != data) {
	        parentObj.midScanLineJIT();
	        var temp_var = (data > 0x7F);
	        if (temp_var != parentObj.LCDisOn) {
	          //When the display mode changes...
	          parentObj.LCDisOn = temp_var;
	          parentObj.memory[0xFF41] &= 0x78;
	          parentObj.midScanlineOffset = -1;
	          parentObj.totalLinesPassed = parentObj.currentX = parentObj.queuedScanLines = parentObj.lastUnrenderedLine = parentObj.STATTracker = parentObj.LCDTicks = parentObj.actualScanLine = parentObj.memory[0xFF44] = 0;
	          if (parentObj.LCDisOn) {
	            parentObj.modeSTAT = 2;
	            parentObj.matchLYC(); //Get the compare of the first scan line.
	            parentObj.LCDCONTROL = parentObj.LINECONTROL;
	          }
	          else {
	            parentObj.modeSTAT = 0;
	            parentObj.LCDCONTROL = parentObj.DISPLAYOFFCONTROL;
	            parentObj.DisplayShowOff();
	          }
	          parentObj.interruptsRequested &= 0xFD;
	        }
	        parentObj.gfxWindowCHRBankPosition = ((data & 0x40) == 0x40) ? 0x400 : 0;
	        parentObj.gfxWindowDisplay = ((data & 0x20) == 0x20);
	        parentObj.gfxBackgroundBankOffset = ((data & 0x10) == 0x10) ? 0 : 0x80;
	        parentObj.gfxBackgroundCHRBankPosition = ((data & 0x08) == 0x08) ? 0x400 : 0;
	        parentObj.gfxSpriteNormalHeight = ((data & 0x04) == 0);
	        parentObj.gfxSpriteShow = ((data & 0x02) == 0x02);
	        parentObj.BGPriorityEnabled = ((data & 0x01) == 0x01);
	        parentObj.priorityFlaggingPathRebuild();  //Special case the priority flagging as an optimization.
	        parentObj.memory[0xFF40] = data;
	      }
	    };
	    this.memoryHighWriter[0x41] = this.memoryWriter[0xFF41] = function (parentObj, address, data) {
	      parentObj.LYCMatchTriggerSTAT = ((data & 0x40) == 0x40);
	      parentObj.mode2TriggerSTAT = ((data & 0x20) == 0x20);
	      parentObj.mode1TriggerSTAT = ((data & 0x10) == 0x10);
	      parentObj.mode0TriggerSTAT = ((data & 0x08) == 0x08);
	      parentObj.memory[0xFF41] = data & 0x78;
	    };
	    this.memoryHighWriter[0x46] = this.memoryWriter[0xFF46] = function (parentObj, address, data) {
	      parentObj.memory[0xFF46] = data;
	      if (data < 0xE0) {
	        data <<= 8;
	        address = 0xFE00;
	        var stat = parentObj.modeSTAT;
	        parentObj.modeSTAT = 0;
	        var newData = 0;
	        do {
	          newData = parentObj.memoryReader[data](parentObj, data++);
	          if (newData != parentObj.memory[address]) {
	            //JIT the graphics render queue:
	            parentObj.modeSTAT = stat;
	            parentObj.graphicsJIT();
	            parentObj.modeSTAT = 0;
	            parentObj.memory[address++] = newData;
	            break;
	          }
	        } while (++address < 0xFEA0);
	        if (address < 0xFEA0) {
	          do {
	            parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);
	            parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);
	            parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);
	            parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);
	          } while (address < 0xFEA0);
	        }
	        parentObj.modeSTAT = stat;
	      }
	    };
	    //KEY1
	    this.memoryHighWriter[0x4D] = this.memoryWriter[0xFF4D] = function (parentObj, address, data) {
	      parentObj.memory[0xFF4D] = (data & 0x7F) | (parentObj.memory[0xFF4D] & 0x80);
	    };
	    this.memoryHighWriter[0x4F] = this.memoryWriter[0xFF4F] = function (parentObj, address, data) {
	      parentObj.currVRAMBank = data & 0x01;
	      if (parentObj.currVRAMBank > 0) {
	        parentObj.BGCHRCurrentBank = parentObj.BGCHRBank2;
	      }
	      else {
	        parentObj.BGCHRCurrentBank = parentObj.BGCHRBank1;
	      }
	      //Only writable by GBC.
	    };
	    this.memoryHighWriter[0x51] = this.memoryWriter[0xFF51] = function (parentObj, address, data) {
	      if (!parentObj.hdmaRunning) {
	        parentObj.memory[0xFF51] = data;
	      }
	    };
	    this.memoryHighWriter[0x52] = this.memoryWriter[0xFF52] = function (parentObj, address, data) {
	      if (!parentObj.hdmaRunning) {
	        parentObj.memory[0xFF52] = data & 0xF0;
	      }
	    };
	    this.memoryHighWriter[0x53] = this.memoryWriter[0xFF53] = function (parentObj, address, data) {
	      if (!parentObj.hdmaRunning) {
	        parentObj.memory[0xFF53] = data & 0x1F;
	      }
	    };
	    this.memoryHighWriter[0x54] = this.memoryWriter[0xFF54] = function (parentObj, address, data) {
	      if (!parentObj.hdmaRunning) {
	        parentObj.memory[0xFF54] = data & 0xF0;
	      }
	    };
	    this.memoryHighWriter[0x55] = this.memoryWriter[0xFF55] = function (parentObj, address, data) {
	      if (!parentObj.hdmaRunning) {
	        if ((data & 0x80) == 0) {
	          //DMA
	          parentObj.DMAWrite((data & 0x7F) + 1);
	          parentObj.memory[0xFF55] = 0xFF;  //Transfer completed.
	        }
	        else {
	          //H-Blank DMA
	          parentObj.hdmaRunning = true;
	          parentObj.memory[0xFF55] = data & 0x7F;
	        }
	      }
	      else if ((data & 0x80) == 0) {
	        //Stop H-Blank DMA
	        parentObj.hdmaRunning = false;
	        parentObj.memory[0xFF55] |= 0x80;
	      }
	      else {
	        parentObj.memory[0xFF55] = data & 0x7F;
	      }
	    };
	    this.memoryHighWriter[0x68] = this.memoryWriter[0xFF68] = function (parentObj, address, data) {
	      parentObj.memory[0xFF69] = parentObj.gbcBGRawPalette[data & 0x3F];
	      parentObj.memory[0xFF68] = data;
	    };
	    this.memoryHighWriter[0x69] = this.memoryWriter[0xFF69] = function (parentObj, address, data) {
	      parentObj.updateGBCBGPalette(parentObj.memory[0xFF68] & 0x3F, data);
	      if (parentObj.memory[0xFF68] > 0x7F) { // high bit = autoincrement
	        var next = ((parentObj.memory[0xFF68] + 1) & 0x3F);
	        parentObj.memory[0xFF68] = (next | 0x80);
	        parentObj.memory[0xFF69] = parentObj.gbcBGRawPalette[next];
	      }
	      else {
	        parentObj.memory[0xFF69] = data;
	      }
	    };
	    this.memoryHighWriter[0x6A] = this.memoryWriter[0xFF6A] = function (parentObj, address, data) {
	      parentObj.memory[0xFF6B] = parentObj.gbcOBJRawPalette[data & 0x3F];
	      parentObj.memory[0xFF6A] = data;
	    };
	    this.memoryHighWriter[0x6B] = this.memoryWriter[0xFF6B] = function (parentObj, address, data) {
	      parentObj.updateGBCOBJPalette(parentObj.memory[0xFF6A] & 0x3F, data);
	      if (parentObj.memory[0xFF6A] > 0x7F) { // high bit = autoincrement
	        var next = ((parentObj.memory[0xFF6A] + 1) & 0x3F);
	        parentObj.memory[0xFF6A] = (next | 0x80);
	        parentObj.memory[0xFF6B] = parentObj.gbcOBJRawPalette[next];
	      }
	      else {
	        parentObj.memory[0xFF6B] = data;
	      }
	    };
	    //SVBK
	    this.memoryHighWriter[0x70] = this.memoryWriter[0xFF70] = function (parentObj, address, data) {
	      var addressCheck = (parentObj.memory[0xFF51] << 8) | parentObj.memory[0xFF52];  //Cannot change the RAM bank while WRAM is the source of a running HDMA.
	      if (!parentObj.hdmaRunning || addressCheck < 0xD000 || addressCheck >= 0xE000) {
	        parentObj.gbcRamBank = Math.max(data & 0x07, 1);  //Bank range is from 1-7
	        parentObj.gbcRamBankPosition = ((parentObj.gbcRamBank - 1) << 12) - 0xD000;
	        parentObj.gbcRamBankPositionECHO = parentObj.gbcRamBankPosition - 0x2000;
	      }
	      parentObj.memory[0xFF70] = data;  //Bit 6 cannot be written to.
	    };
	    this.memoryHighWriter[0x74] = this.memoryWriter[0xFF74] = function (parentObj, address, data) {
	      parentObj.memory[0xFF74] = data;
	    };
	  }
	  else {
	    //Fill in the GameBoy Color I/O registers as normal RAM for GameBoy compatibility:
	    //SC (Serial Transfer Control Register)
	    this.memoryHighWriter[0x2] = this.memoryWriter[0xFF02] = function (parentObj, address, data) {
	      if (((data & 0x1) == 0x1)) {
	        //Internal clock:
	        parentObj.memory[0xFF02] = (data & 0x7F);
	        parentObj.serialTimer = 4096; //Set the Serial IRQ counter.
	        parentObj.serialShiftTimer = parentObj.serialShiftTimerAllocated = 512; //Set the transfer data shift counter.
	      }
	      else {
	        //External clock:
	        parentObj.memory[0xFF02] = data;
	        parentObj.serialShiftTimer = parentObj.serialShiftTimerAllocated = parentObj.serialTimer = 0; //Zero the timers, since we're emulating as if nothing is connected.
	      }
	    };
	    this.memoryHighWriter[0x40] = this.memoryWriter[0xFF40] = function (parentObj, address, data) {
	      if (parentObj.memory[0xFF40] != data) {
	        parentObj.midScanLineJIT();
	        var temp_var = (data > 0x7F);
	        if (temp_var != parentObj.LCDisOn) {
	          //When the display mode changes...
	          parentObj.LCDisOn = temp_var;
	          parentObj.memory[0xFF41] &= 0x78;
	          parentObj.midScanlineOffset = -1;
	          parentObj.totalLinesPassed = parentObj.currentX = parentObj.queuedScanLines = parentObj.lastUnrenderedLine = parentObj.STATTracker = parentObj.LCDTicks = parentObj.actualScanLine = parentObj.memory[0xFF44] = 0;
	          if (parentObj.LCDisOn) {
	            parentObj.modeSTAT = 2;
	            parentObj.matchLYC(); //Get the compare of the first scan line.
	            parentObj.LCDCONTROL = parentObj.LINECONTROL;
	          }
	          else {
	            parentObj.modeSTAT = 0;
	            parentObj.LCDCONTROL = parentObj.DISPLAYOFFCONTROL;
	            parentObj.DisplayShowOff();
	          }
	          parentObj.interruptsRequested &= 0xFD;
	        }
	        parentObj.gfxWindowCHRBankPosition = ((data & 0x40) == 0x40) ? 0x400 : 0;
	        parentObj.gfxWindowDisplay = (data & 0x20) == 0x20;
	        parentObj.gfxBackgroundBankOffset = ((data & 0x10) == 0x10) ? 0 : 0x80;
	        parentObj.gfxBackgroundCHRBankPosition = ((data & 0x08) == 0x08) ? 0x400 : 0;
	        parentObj.gfxSpriteNormalHeight = ((data & 0x04) == 0);
	        parentObj.gfxSpriteShow = (data & 0x02) == 0x02;
	        parentObj.bgEnabled = ((data & 0x01) == 0x01);
	        parentObj.memory[0xFF40] = data;
	      }
	    };
	    this.memoryHighWriter[0x41] = this.memoryWriter[0xFF41] = function (parentObj, address, data) {
	      parentObj.LYCMatchTriggerSTAT = ((data & 0x40) == 0x40);
	      parentObj.mode2TriggerSTAT = ((data & 0x20) == 0x20);
	      parentObj.mode1TriggerSTAT = ((data & 0x10) == 0x10);
	      parentObj.mode0TriggerSTAT = ((data & 0x08) == 0x08);
	      parentObj.memory[0xFF41] = data & 0x78;
	      if ((!parentObj.usedBootROM || !parentObj.usedGBCBootROM) && parentObj.LCDisOn && parentObj.modeSTAT < 2) {
	        parentObj.interruptsRequested |= 0x2;
	        parentObj.checkIRQMatching();
	      }
	    };
	    this.memoryHighWriter[0x46] = this.memoryWriter[0xFF46] = function (parentObj, address, data) {
	      parentObj.memory[0xFF46] = data;
	      if (data > 0x7F && data < 0xE0) { //DMG cannot DMA from the ROM banks.
	        data <<= 8;
	        address = 0xFE00;
	        var stat = parentObj.modeSTAT;
	        parentObj.modeSTAT = 0;
	        var newData = 0;
	        do {
	          newData = parentObj.memoryReader[data](parentObj, data++);
	          if (newData != parentObj.memory[address]) {
	            //JIT the graphics render queue:
	            parentObj.modeSTAT = stat;
	            parentObj.graphicsJIT();
	            parentObj.modeSTAT = 0;
	            parentObj.memory[address++] = newData;
	            break;
	          }
	        } while (++address < 0xFEA0);
	        if (address < 0xFEA0) {
	          do {
	            parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);
	            parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);
	            parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);
	            parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);
	          } while (address < 0xFEA0);
	        }
	        parentObj.modeSTAT = stat;
	      }
	    };
	    this.memoryHighWriter[0x47] = this.memoryWriter[0xFF47] = function (parentObj, address, data) {
	      if (parentObj.memory[0xFF47] != data) {
	        parentObj.midScanLineJIT();
	        parentObj.updateGBBGPalette(data);
	        parentObj.memory[0xFF47] = data;
	      }
	    };
	    this.memoryHighWriter[0x48] = this.memoryWriter[0xFF48] = function (parentObj, address, data) {
	      if (parentObj.memory[0xFF48] != data) {
	        parentObj.midScanLineJIT();
	        parentObj.updateGBOBJPalette(0, data);
	        parentObj.memory[0xFF48] = data;
	      }
	    };
	    this.memoryHighWriter[0x49] = this.memoryWriter[0xFF49] = function (parentObj, address, data) {
	      if (parentObj.memory[0xFF49] != data) {
	        parentObj.midScanLineJIT();
	        parentObj.updateGBOBJPalette(4, data);
	        parentObj.memory[0xFF49] = data;
	      }
	    };
	    this.memoryHighWriter[0x4D] = this.memoryWriter[0xFF4D] = function (parentObj, address, data) {
	      parentObj.memory[0xFF4D] = data;
	    };
	    this.memoryHighWriter[0x4F] = this.memoryWriter[0xFF4F] = this.cartIgnoreWrite; //Not writable in DMG mode.
	    this.memoryHighWriter[0x55] = this.memoryWriter[0xFF55] = this.cartIgnoreWrite;
	    this.memoryHighWriter[0x68] = this.memoryWriter[0xFF68] = this.cartIgnoreWrite;
	    this.memoryHighWriter[0x69] = this.memoryWriter[0xFF69] = this.cartIgnoreWrite;
	    this.memoryHighWriter[0x6A] = this.memoryWriter[0xFF6A] = this.cartIgnoreWrite;
	    this.memoryHighWriter[0x6B] = this.memoryWriter[0xFF6B] = this.cartIgnoreWrite;
	    this.memoryHighWriter[0x6C] = this.memoryWriter[0xFF6C] = this.cartIgnoreWrite;
	    this.memoryHighWriter[0x70] = this.memoryWriter[0xFF70] = this.cartIgnoreWrite;
	    this.memoryHighWriter[0x74] = this.memoryWriter[0xFF74] = this.cartIgnoreWrite;
	  }
	};
	GameBoyCore.prototype.recompileBootIOWriteHandling = function () {
	  //Boot I/O Registers:
	  if (this.inBootstrap) {
	    this.memoryHighWriter[0x50] = this.memoryWriter[0xFF50] = function (parentObj, address, data) {
	      debug("Boot ROM reads blocked: Bootstrap process has ended.", 0);
	      parentObj.inBootstrap = false;
	      parentObj.disableBootROM();     //Fill in the boot ROM ranges with ROM  bank 0 ROM ranges
	      parentObj.memory[0xFF50] = data;  //Bits are sustained in memory?
	    };
	    if (this.cGBC) {
	      this.memoryHighWriter[0x6C] = this.memoryWriter[0xFF6C] = function (parentObj, address, data) {
	        if (parentObj.inBootstrap) {
	          parentObj.cGBC = ((data & 0x1) == 0);
	          //Exception to the GBC identifying code:
	          if (parentObj.name + parentObj.gameCode + parentObj.ROM[0x143] == "Game and Watch 50") {
	            parentObj.cGBC = true;
	            debug("Created a boot exception for Game and Watch Gallery 2 (GBC ID byte is wrong on the cartridge).", 1);
	          }
	          debug("Booted to GBC Mode: " + parentObj.cGBC, 0);
	        }
	        parentObj.memory[0xFF6C] = data;
	      };
	    }
	  }
	  else {
	    //Lockout the ROMs from accessing the BOOT ROM control register:
	    this.memoryHighWriter[0x50] = this.memoryWriter[0xFF50] = this.cartIgnoreWrite;
	  }
	};
	//Helper Functions
	GameBoyCore.prototype.toTypedArray = function (baseArray, memtype) {
	  try {
	    if (!this.opts.typedArrays) {
	      return baseArray;
	    }
	    if (!baseArray || !baseArray.length) {
	      return [];
	    }
	    var length = baseArray.length;
	    switch (memtype) {
	      case "uint8":
	        var typedArrayTemp = new Uint8Array(length);
	        break;
	      case "int8":
	        var typedArrayTemp = new Int8Array(length);
	        break;
	      case "int32":
	        var typedArrayTemp = new Int32Array(length);
	        break;
	      case "float32":
	        var typedArrayTemp = new Float32Array(length);
	    }
	    for (var index = 0; index < length; index++) {
	      typedArrayTemp[index] = baseArray[index];
	    }
	    return typedArrayTemp;
	  }
	  catch (error) {
	    debug("Could not convert an array to a typed array: " + error.message, 1);
	    return baseArray;
	  }
	};
	GameBoyCore.prototype.fromTypedArray = function (baseArray) {
	  try {
	    if (!baseArray || !baseArray.length) {
	      return [];
	    }
	    var arrayTemp = [];
	    for (var index = 0; index < baseArray.length; ++index) {
	      arrayTemp[index] = baseArray[index];
	    }
	    return arrayTemp;
	  }
	  catch (error) {
	    debug("Conversion from a typed array failed: " + error.message, 1);
	    return baseArray;
	  }
	};
	GameBoyCore.prototype.getTypedArray = function (length, defaultValue, numberType) {
	  var arrayHandle;
	  try {
	    if (!this.opts.typedArrays) {
	      throw(new Error("Settings forced typed arrays to be disabled."));
	    }
	    switch (numberType) {
	      case "int8":
	        arrayHandle = new Int8Array(length);
	        break;
	      case "uint8":
	        arrayHandle = new Uint8Array(length);
	        break;
	      case "int32":
	        arrayHandle = new Int32Array(length);
	        break;
	      case "float32":
	        arrayHandle = new Float32Array(length);
	    }
	    if (defaultValue != 0) {
	      var index = 0;
	      while (index < length) {
	        arrayHandle[index++] = defaultValue;
	      }
	    }
	  }
	  catch (error) {
	    debug("Could not convert an array to a typed array: " + error.message, 1);
	    var arrayHandle = [];
	    var index = 0;
	    while (index < length) {
	      arrayHandle[index++] = defaultValue;
	    }
	  }
	  return arrayHandle;
	};


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */
	
	var index = __webpack_require__(6);
	
	/**
	 * Expose `Emitter`.
	 */
	
	module.exports = Emitter;
	
	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */
	
	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};
	
	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */
	
	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}
	
	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.on = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks[event] = this._callbacks[event] || [])
	    .push(fn);
	  return this;
	};
	
	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.once = function(event, fn){
	  var self = this;
	  this._callbacks = this._callbacks || {};
	
	  function on() {
	    self.off(event, on);
	    fn.apply(this, arguments);
	  }
	
	  fn._off = on;
	  this.on(event, on);
	  return this;
	};
	
	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners = function(event, fn){
	  this._callbacks = this._callbacks || {};
	
	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }
	
	  // specific event
	  var callbacks = this._callbacks[event];
	  if (!callbacks) return this;
	
	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks[event];
	    return this;
	  }
	
	  // remove specific handler
	  var i = index(callbacks, fn._off || fn);
	  if (~i) callbacks.splice(i, 1);
	  return this;
	};
	
	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */
	
	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks[event];
	
	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }
	
	  return this;
	};
	
	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */
	
	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks[event] || [];
	};
	
	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */
	
	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Expose `debug()` as the module.
	 */
	
	module.exports = debug;
	
	/**
	 * Create a debugger with the given `name`.
	 *
	 * @param {String} name
	 * @return {Type}
	 * @api public
	 */
	
	function debug(name) {
	  if (!debug.enabled(name)) return function(){};
	
	  return function(fmt){
	    fmt = coerce(fmt);
	
	    var curr = new Date;
	    var ms = curr - (debug[name] || curr);
	    debug[name] = curr;
	
	    fmt = name
	      + ' '
	      + fmt
	      + ' +' + debug.humanize(ms);
	
	    // This hackery is required for IE8
	    // where `console.log` doesn't have 'apply'
	    window.console
	      && console.log
	      && Function.prototype.apply.call(console.log, console, arguments);
	  }
	}
	
	/**
	 * The currently active debug mode names.
	 */
	
	debug.names = [];
	debug.skips = [];
	
	/**
	 * Enables a debug mode by name. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} name
	 * @api public
	 */
	
	debug.enable = function(name) {
	  try {
	    localStorage.debug = name;
	  } catch(e){}
	
	  var split = (name || '').split(/[\s,]+/)
	    , len = split.length;
	
	  for (var i = 0; i < len; i++) {
	    name = split[i].replace('*', '.*?');
	    if (name[0] === '-') {
	      debug.skips.push(new RegExp('^' + name.substr(1) + '$'));
	    }
	    else {
	      debug.names.push(new RegExp('^' + name + '$'));
	    }
	  }
	};
	
	/**
	 * Disable debug output.
	 *
	 * @api public
	 */
	
	debug.disable = function(){
	  debug.enable('');
	};
	
	/**
	 * Humanize the given `ms`.
	 *
	 * @param {Number} m
	 * @return {String}
	 * @api private
	 */
	
	debug.humanize = function(ms) {
	  var sec = 1000
	    , min = 60 * 1000
	    , hour = 60 * min;
	
	  if (ms >= hour) return (ms / hour).toFixed(1) + 'h';
	  if (ms >= min) return (ms / min).toFixed(1) + 'm';
	  if (ms >= sec) return (ms / sec | 0) + 's';
	  return ms + 'ms';
	};
	
	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */
	
	debug.enabled = function(name) {
	  for (var i = 0, len = debug.skips.length; i < len; i++) {
	    if (debug.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (var i = 0, len = debug.names.length; i < len; i++) {
	    if (debug.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	};
	
	/**
	 * Coerce `val`.
	 */
	
	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}
	
	// persist
	
	try {
	  if (window.localStorage) debug.enable(localStorage.debug);
	} catch(e){}


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	
	var indexOf = [].indexOf;
	
	module.exports = function(arr, obj){
	  if (indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

/***/ }
/******/ ])
});

//# sourceMappingURL=react-gameboy.map